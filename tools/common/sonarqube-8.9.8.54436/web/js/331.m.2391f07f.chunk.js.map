{"version":3,"sources":["webpack:///./src/main/js/apps/projectBranches/components/BranchPurgeSetting.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeRow.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeTable.tsx","webpack:///./src/main/js/apps/projectBranches/components/DeleteBranchModal.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeTabs.tsx","webpack:///./src/main/js/apps/projectBranches/components/RenameBranchModal.tsx","webpack:///./src/main/js/apps/projectBranches/components/LifetimeInformationRenderer.tsx","webpack:///./src/main/js/apps/projectBranches/components/LifetimeInformation.tsx","webpack:///./src/main/js/apps/projectBranches/components/App.tsx","webpack:///./src/main/js/api/settings.ts","webpack:///./src/main/js/types/settings.ts","webpack:///./src/main/js/components/icons/BranchLikeIcon.tsx","webpack:///./src/main/js/api/branches.ts","webpack:///./src/main/js/components/common/BranchStatus.tsx"],"names":["props","super","mounted","handleOnChange","branch","component","this","excludedFromPurge","state","newValue","setState","loading","key","name","then","catch","isTheMainBranch","disabled","onChange","value","className","overlay","branchLike","displayPurgeSetting","onDelete","onRename","branchLikeDisplayName","BranchLikeIcon","title","BranchStatus","date","analysisDate","ActionsDropdown","onClick","destructive","branchLikes","style","width","map","handleSubmit","event","preventDefault","project","pullRequest","header","contentLabel","onRequestClose","onClose","onSubmit","Tabs","handleNameChange","currentTarget","submitDisabled","size","htmlFor","autoFocus","id","maxLength","required","type","undefined","TABS","Branch","label","PullRequest","currentTab","onTabSelect","onDeleteBranchLike","deleting","onRenameBranchLike","renaming","onModalActionFulfilled","onBranchesChange","isBranchMode","branchLikesToDisplay","filter","onSelect","selected","tabs","branchAndPullRequestLifeTimeInDays","canAdmin","defaultMessage","values","days","settings","to","fetchBranchAndPullRequestLifetimeSetting","keys","DaysBeforeDeletingInactiveBranchesAndPRs","length","App","getDefinitions","r","definitions","getValues","data","setSettingValue","definition","multiValues","fieldValues","fields","JSON","stringify","setSimpleSettingValue","resetSettingValue","sendTestEmail","subject","message","checkSecretKey","generateSecretKey","encryptValue","SettingsKey","getBranches","branches","getPullRequests","pullRequests","deleteBranch","deletePullRequest","renameBranch","excludeBranchFromPurge","projectKey","branchName","excluded","status","level","small"],"mappings":"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","file":"js/331.m.2391f07f.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport Toggle from 'sonar-ui-common/components/controls/Toggle';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { excludeBranchFromPurge } from '../../../api/branches';\nimport { isMainBranch } from '../../../helpers/branch-like';\nimport { Branch } from '../../../types/branch-like';\n\ninterface Props {\n  branch: Branch;\n  component: T.Component;\n}\n\ninterface State {\n  excludedFromPurge: boolean;\n  loading: boolean;\n}\n\nexport default class BranchPurgeSetting extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { excludedFromPurge: props.branch.excludedFromPurge, loading: false };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleOnChange = () => {\n    const { branch, component } = this.props;\n    const { excludedFromPurge } = this.state;\n    const newValue = !excludedFromPurge;\n\n    this.setState({ loading: true });\n\n    excludeBranchFromPurge(component.key, branch.name, newValue)\n      .then(() => {\n        if (this.mounted) {\n          this.setState({\n            excludedFromPurge: newValue,\n            loading: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      });\n  };\n\n  render() {\n    const { branch } = this.props;\n    const { excludedFromPurge, loading } = this.state;\n\n    const isTheMainBranch = isMainBranch(branch);\n    const disabled = isTheMainBranch || loading;\n\n    return (\n      <>\n        <Toggle disabled={disabled} onChange={this.handleOnChange} value={excludedFromPurge} />\n        <span className=\"spacer-left\">\n          <DeferredSpinner loading={loading} />\n        </span>\n        {isTheMainBranch && (\n          <HelpTooltip\n            overlay={translate(\n              'project_branch_pull_request.branch.auto_deletion.main_branch_tooltip'\n            )}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport DateFromNow from 'sonar-ui-common/components/intl/DateFromNow';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport BranchStatus from '../../../components/common/BranchStatus';\nimport BranchLikeIcon from '../../../components/icons/BranchLikeIcon';\nimport {\n  getBranchLikeDisplayName,\n  isBranch,\n  isMainBranch,\n  isPullRequest\n} from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchPurgeSetting from './BranchPurgeSetting';\n\nexport interface BranchLikeRowProps {\n  branchLike: BranchLike;\n  component: T.Component;\n  displayPurgeSetting?: boolean;\n  onDelete: () => void;\n  onRename: () => void;\n}\n\nexport function BranchLikeRow(props: BranchLikeRowProps) {\n  const { branchLike, component, displayPurgeSetting, onDelete, onRename } = props;\n  const branchLikeDisplayName = getBranchLikeDisplayName(branchLike);\n\n  return (\n    <tr>\n      <td className=\"nowrap hide-overflow\">\n        <BranchLikeIcon branchLike={branchLike} className=\"little-spacer-right\" />\n        <span title={branchLikeDisplayName}>{branchLikeDisplayName}</span>\n        <span>\n          {isMainBranch(branchLike) && (\n            <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n          )}\n        </span>\n      </td>\n      <td className=\"nowrap\">\n        <BranchStatus branchLike={branchLike} component={component.key} />\n      </td>\n      <td className=\"nowrap\">{<DateFromNow date={branchLike.analysisDate} />}</td>\n      {displayPurgeSetting && isBranch(branchLike) && (\n        <td className=\"nowrap js-test-purge-toggle-container\">\n          <BranchPurgeSetting branch={branchLike} component={component} />\n        </td>\n      )}\n      <td className=\"nowrap\">\n        <ActionsDropdown>\n          {isMainBranch(branchLike) ? (\n            <ActionsDropdownItem className=\"js-rename\" onClick={onRename}>\n              {translate('project_branch_pull_request.branch.rename')}\n            </ActionsDropdownItem>\n          ) : (\n            <ActionsDropdownItem className=\"js-delete\" destructive={true} onClick={onDelete}>\n              {translate(\n                isPullRequest(branchLike)\n                  ? 'project_branch_pull_request.pull_request.delete'\n                  : 'project_branch_pull_request.branch.delete'\n              )}\n            </ActionsDropdownItem>\n          )}\n        </ActionsDropdown>\n      </td>\n    </tr>\n  );\n}\n\nexport default React.memo(BranchLikeRow);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBranchLikeKey } from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeRow from './BranchLikeRow';\n\nexport interface BranchLikeTableProps {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  displayPurgeSetting?: boolean;\n  onDelete: (branchLike: BranchLike) => void;\n  onRename: (branchLike: BranchLike) => void;\n  title: string;\n}\n\nexport function BranchLikeTable(props: BranchLikeTableProps) {\n  const { branchLikes, component, displayPurgeSetting, onDelete, onRename, title } = props;\n\n  return (\n    <div className=\"boxed-group boxed-group-inner\">\n      <table className=\"data zebra zebra-hover fixed\">\n        <thead>\n          <tr>\n            <th className=\"nowrap\">{title}</th>\n            <th className=\"nowrap\" style={{ width: '80px' }}>\n              {translate('status')}\n            </th>\n            <th className=\"nowrap\" style={{ width: '140px' }}>\n              {translate('project_branch_pull_request.last_analysis_date')}\n            </th>\n            {displayPurgeSetting && (\n              <th className=\"nowrap\" style={{ width: '150px' }}>\n                <div className=\"display-flex-center\">\n                  <span>\n                    {translate(\n                      'project_branch_pull_request.branch.auto_deletion.keep_when_inactive'\n                    )}\n                  </span>\n                  <HelpTooltip\n                    className=\"little-spacer-left\"\n                    overlay={translate(\n                      'project_branch_pull_request.branch.auto_deletion.keep_when_inactive.tooltip'\n                    )}\n                  />\n                </div>\n              </th>\n            )}\n            <th className=\"nowrap\" style={{ width: '50px' }}>\n              {translate('actions')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {branchLikes.map(branchLike => (\n            <BranchLikeRow\n              branchLike={branchLike}\n              component={component}\n              displayPurgeSetting={displayPurgeSetting}\n              key={getBranchLikeKey(branchLike)}\n              onDelete={() => onDelete(branchLike)}\n              onRename={() => onRename(branchLike)}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default React.memo(BranchLikeTable);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteBranch, deletePullRequest } from '../../../api/branches';\nimport { getBranchLikeDisplayName, isPullRequest } from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\n\ninterface Props {\n  branchLike: BranchLike;\n  component: T.Component;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\ninterface State {\n  loading: boolean;\n}\n\nexport default class DeleteBranchModal extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const request = isPullRequest(this.props.branchLike)\n      ? deletePullRequest({\n          project: this.props.component.key,\n          pullRequest: this.props.branchLike.key\n        })\n      : deleteBranch({\n          branch: this.props.branchLike.name,\n          project: this.props.component.key\n        });\n    request.then(\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n          this.props.onDelete();\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike } = this.props;\n    const header = translate(\n      isPullRequest(branchLike)\n        ? 'project_branch_pull_request.pull_request.delete'\n        : 'project_branch_pull_request.branch.delete'\n    );\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.props.onClose}>\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body\">\n            {translateWithParameters(\n              isPullRequest(branchLike)\n                ? 'project_branch_pull_request.pull_request.delete.are_you_sure'\n                : 'project_branch_pull_request.branch.delete.are_you_sure',\n              getBranchLikeDisplayName(branchLike)\n            )}\n          </div>\n          <footer className=\"modal-foot\">\n            {this.state.loading && <i className=\"spinner spacer-right\" />}\n            <SubmitButton className=\"button-red\" disabled={this.state.loading}>\n              {translate('delete')}\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BoxedTabs from 'sonar-ui-common/components/controls/BoxedTabs';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  isBranch,\n  isMainBranch,\n  isPullRequest,\n  sortBranches,\n  sortPullRequests\n} from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeTable from './BranchLikeTable';\nimport DeleteBranchModal from './DeleteBranchModal';\nimport RenameBranchModal from './RenameBranchModal';\n\ninterface Props {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  onBranchesChange: () => void;\n}\n\ninterface State {\n  currentTab: Tabs;\n  deleting?: BranchLike;\n  renaming?: BranchLike;\n}\n\nexport enum Tabs {\n  Branch,\n  PullRequest\n}\n\nconst TABS = [\n  {\n    key: Tabs.Branch,\n    label: (\n      <>\n        <BranchIcon />\n        <span className=\"spacer-left\">\n          {translate('project_branch_pull_request.tabs.branches')}\n        </span>\n      </>\n    )\n  },\n  {\n    key: Tabs.PullRequest,\n    label: (\n      <>\n        <PullRequestIcon />\n        <span className=\"spacer-left\">\n          {translate('project_branch_pull_request.tabs.pull_requests')}\n        </span>\n      </>\n    )\n  }\n];\n\nexport default class BranchLikeTabs extends React.PureComponent<Props, State> {\n  state: State = { currentTab: Tabs.Branch };\n\n  onTabSelect = (currentTab: Tabs) => {\n    this.setState({ currentTab });\n  };\n\n  onDeleteBranchLike = (branchLike: BranchLike) => this.setState({ deleting: branchLike });\n\n  onRenameBranchLike = (branchLike: BranchLike) => this.setState({ renaming: branchLike });\n\n  onClose = () => this.setState({ deleting: undefined, renaming: undefined });\n\n  onModalActionFulfilled = () => {\n    this.onClose();\n    this.props.onBranchesChange();\n  };\n\n  render() {\n    const { branchLikes, component } = this.props;\n    const { currentTab, deleting, renaming } = this.state;\n\n    const isBranchMode = currentTab === Tabs.Branch;\n    const branchLikesToDisplay: BranchLike[] = isBranchMode\n      ? sortBranches(branchLikes.filter(isBranch))\n      : sortPullRequests(branchLikes.filter(isPullRequest));\n    const title = translate(\n      isBranchMode\n        ? 'project_branch_pull_request.table.branch'\n        : 'project_branch_pull_request.table.pull_request'\n    );\n\n    return (\n      <>\n        <BoxedTabs\n          className=\"branch-like-tabs\"\n          onSelect={this.onTabSelect}\n          selected={currentTab}\n          tabs={TABS}\n        />\n\n        <BranchLikeTable\n          branchLikes={branchLikesToDisplay}\n          component={component}\n          displayPurgeSetting={isBranchMode}\n          onDelete={this.onDeleteBranchLike}\n          onRename={this.onRenameBranchLike}\n          title={title}\n        />\n\n        {deleting && (\n          <DeleteBranchModal\n            branchLike={deleting}\n            component={component}\n            onClose={this.onClose}\n            onDelete={this.onModalActionFulfilled}\n          />\n        )}\n\n        {renaming && isMainBranch(renaming) && (\n          <RenameBranchModal\n            branch={renaming}\n            component={component}\n            onClose={this.onClose}\n            onRename={this.onModalActionFulfilled}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { renameBranch } from '../../../api/branches';\nimport { MainBranch } from '../../../types/branch-like';\n\ninterface Props {\n  branch: MainBranch;\n  component: T.Component;\n  onClose: () => void;\n  onRename: () => void;\n}\n\ninterface State {\n  loading: boolean;\n  name?: string;\n}\n\nexport default class RenameBranchModal extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!this.state.name) {\n      return;\n    }\n    this.setState({ loading: true });\n    renameBranch(this.props.component.key, this.state.name).then(\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n          this.props.onRename();\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleNameChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  render() {\n    const { branch } = this.props;\n    const header = translate('project_branch_pull_request.branch.rename');\n    const submitDisabled =\n      this.state.loading || !this.state.name || this.state.name === branch.name;\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.props.onClose} size=\"small\">\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body\">\n            <MandatoryFieldsExplanation className=\"modal-field\" />\n            <div className=\"modal-field\">\n              <label htmlFor=\"rename-branch-name\">\n                {translate('new_name')}\n                <MandatoryFieldMarker />\n              </label>\n              <input\n                autoFocus={true}\n                id=\"rename-branch-name\"\n                maxLength={100}\n                name=\"name\"\n                onChange={this.handleNameChange}\n                required={true}\n                size={50}\n                type=\"text\"\n                value={this.state.name !== undefined ? this.state.name : branch.name}\n              />\n            </div>\n          </div>\n          <footer className=\"modal-foot\">\n            {this.state.loading && <i className=\"spinner spacer-right\" />}\n            <SubmitButton disabled={submitDisabled}>{translate('rename')}</SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\n\nexport interface LifetimeInformationRendererProps {\n  branchAndPullRequestLifeTimeInDays?: string;\n  canAdmin?: boolean;\n  loading: boolean;\n}\n\nexport function LifetimeInformationRenderer(props: LifetimeInformationRendererProps) {\n  const { branchAndPullRequestLifeTimeInDays, canAdmin, loading } = props;\n\n  return (\n    <DeferredSpinner loading={loading}>\n      {branchAndPullRequestLifeTimeInDays && (\n        <p className=\"page-description\">\n          <FormattedMessage\n            defaultMessage={translate('project_branch_pull_request.lifetime_information')}\n            id=\"project_branch_pull_request.lifetime_information\"\n            values={{ days: formatMeasure(branchAndPullRequestLifeTimeInDays, 'INT') }}\n          />\n          {canAdmin && (\n            <FormattedMessage\n              defaultMessage={translate('project_branch_pull_request.lifetime_information.admin')}\n              id=\"project_branch_pull_request.lifetime_information.admin\"\n              values={{\n                settings: <Link to=\"/admin/settings\">{translate('settings.page')}</Link>\n              }}\n            />\n          )}\n        </p>\n      )}\n    </DeferredSpinner>\n  );\n}\n\nexport default React.memo(LifetimeInformationRenderer);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getValues } from '../../../api/settings';\nimport { getAppState, Store } from '../../../store/rootReducer';\nimport { SettingsKey } from '../../../types/settings';\nimport LifetimeInformationRenderer from './LifetimeInformationRenderer';\n\ninterface Props {\n  canAdmin?: boolean;\n}\n\ninterface State {\n  branchAndPullRequestLifeTimeInDays?: string;\n  loading: boolean;\n}\n\nexport class LifetimeInformation extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranchAndPullRequestLifetimeSetting();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchBranchAndPullRequestLifetimeSetting() {\n    getValues({ keys: SettingsKey.DaysBeforeDeletingInactiveBranchesAndPRs }).then(\n      settings => {\n        if (this.mounted) {\n          this.setState({\n            loading: false,\n            branchAndPullRequestLifeTimeInDays: settings.length > 0 ? settings[0].value : undefined\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  render() {\n    const { canAdmin } = this.props;\n    const { branchAndPullRequestLifeTimeInDays, loading } = this.state;\n\n    return (\n      <LifetimeInformationRenderer\n        branchAndPullRequestLifeTimeInDays={branchAndPullRequestLifeTimeInDays}\n        canAdmin={canAdmin}\n        loading={loading}\n      />\n    );\n  }\n}\n\nconst mapStoreToProps = (state: Store) => ({\n  canAdmin: getAppState(state).canAdmin\n});\n\nexport default connect(mapStoreToProps)(LifetimeInformation);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeTabs from './BranchLikeTabs';\nimport LifetimeInformation from './LifetimeInformation';\n\nexport interface AppProps {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  onBranchesChange: () => void;\n}\n\nexport function App(props: AppProps) {\n  const { branchLikes, component, onBranchesChange } = props;\n\n  return (\n    <div className=\"page page-limited\" id=\"project-branch-like\">\n      <header className=\"page-header\">\n        <h1>{translate('project_branch_pull_request.page')}</h1>\n        <LifetimeInformation />\n      </header>\n\n      <BranchLikeTabs\n        branchLikes={branchLikes}\n        component={component}\n        onBranchesChange={onBranchesChange}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { omitBy } from 'lodash';\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { isCategoryDefinition } from '../apps/settings/utils';\nimport { BranchParameters } from '../types/branch-like';\nimport { SettingCategoryDefinition, SettingDefinition, SettingValue } from '../types/settings';\n\nexport function getDefinitions(component?: string): Promise<SettingCategoryDefinition[]> {\n  return getJSON('/api/settings/list_definitions', { component }).then(\n    r => r.definitions,\n    throwGlobalError\n  );\n}\n\nexport function getValues(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<SettingValue[]> {\n  return getJSON('/api/settings/values', data).then(r => r.settings);\n}\n\nexport function setSettingValue(\n  definition: SettingDefinition,\n  value: any,\n  component?: string\n): Promise<void> {\n  const { key } = definition;\n  const data: RequestData = { key, component };\n\n  if (isCategoryDefinition(definition) && definition.multiValues) {\n    data.values = value;\n  } else if (definition.type === 'PROPERTY_SET') {\n    data.fieldValues = value\n      .map((fields: any) => omitBy(fields, value => value == null))\n      .map(JSON.stringify);\n  } else {\n    data.value = value;\n  }\n\n  return post('/api/settings/set', data);\n}\n\nexport function setSimpleSettingValue(\n  data: { component?: string; value: string; key: string } & BranchParameters\n): Promise<void | Response> {\n  return post('/api/settings/set', data).catch(throwGlobalError);\n}\n\nexport function resetSettingValue(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<void> {\n  return post('/api/settings/reset', data);\n}\n\nexport function sendTestEmail(to: string, subject: string, message: string): Promise<void> {\n  return post('/api/emails/send', { to, subject, message });\n}\n\nexport function checkSecretKey(): Promise<{ secretKeyAvailable: boolean }> {\n  return getJSON('/api/settings/check_secret_key').catch(throwGlobalError);\n}\n\nexport function generateSecretKey(): Promise<{ secretKey: string }> {\n  return postJSON('/api/settings/generate_secret_key').catch(throwGlobalError);\n}\n\nexport function encryptValue(value: string): Promise<{ encryptedValue: string }> {\n  return postJSON('/api/settings/encrypt', { value }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const enum SettingsKey {\n  DaysBeforeDeletingInactiveBranchesAndPRs = 'sonar.dbcleaner.daysBeforeDeletingInactiveBranchesAndPRs',\n  DefaultProjectVisibility = 'projects.default.visibility',\n  ServerBaseUrl = 'sonar.core.serverBaseURL',\n  PluginRiskConsent = 'sonar.plugins.risk.consent'\n}\n\nexport type Setting = SettingValue & { definition: SettingDefinition };\n\nexport type SettingType =\n  | 'STRING'\n  | 'TEXT'\n  | 'JSON'\n  | 'PASSWORD'\n  | 'BOOLEAN'\n  | 'FLOAT'\n  | 'INTEGER'\n  | 'LICENSE'\n  | 'LONG'\n  | 'SINGLE_SELECT_LIST'\n  | 'PROPERTY_SET';\n\nexport interface SettingDefinition {\n  description?: string;\n  key: string;\n  multiValues?: boolean;\n  name?: string;\n  options: string[];\n  type?: SettingType;\n}\n\nexport interface SettingFieldDefinition extends SettingDefinition {\n  description: string;\n  name: string;\n}\n\nexport interface SettingCategoryDefinition extends SettingDefinition {\n  category: string;\n  defaultValue?: string;\n  deprecatedKey?: string;\n  fields: SettingFieldDefinition[];\n  multiValues?: boolean;\n  subCategory: string;\n}\n\nexport interface SettingValue {\n  fieldValues?: Array<T.Dict<string>>;\n  inherited?: boolean;\n  key: string;\n  parentFieldValues?: Array<T.Dict<string>>;\n  parentValue?: string;\n  parentValues?: string[];\n  value?: string;\n  values?: string[];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { IconProps } from 'sonar-ui-common/components/icons/Icon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { isPullRequest } from '../../helpers/branch-like';\nimport { BranchLike } from '../../types/branch-like';\n\nexport interface BranchLikeIconProps extends IconProps {\n  branchLike: BranchLike;\n}\n\nexport default function BranchLikeIcon({ branchLike, ...props }: BranchLikeIconProps) {\n  if (isPullRequest(branchLike)) {\n    return <PullRequestIcon {...props} />;\n  } else {\n    return <BranchIcon {...props} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Branch, PullRequest } from '../types/branch-like';\n\nexport function getBranches(project: string): Promise<Branch[]> {\n  return getJSON('/api/project_branches/list', { project }).then(r => r.branches, throwGlobalError);\n}\n\nexport function getPullRequests(project: string): Promise<PullRequest[]> {\n  return getJSON('/api/project_pull_requests/list', { project }).then(\n    r => r.pullRequests,\n    throwGlobalError\n  );\n}\n\nexport function deleteBranch(data: { branch: string; project: string }) {\n  return post('/api/project_branches/delete', data).catch(throwGlobalError);\n}\n\nexport function deletePullRequest(data: { project: string; pullRequest: string }) {\n  return post('/api/project_pull_requests/delete', data).catch(throwGlobalError);\n}\n\nexport function renameBranch(project: string, name: string) {\n  return post('/api/project_branches/rename', { project, name }).catch(throwGlobalError);\n}\n\nexport function excludeBranchFromPurge(projectKey: string, branchName: string, excluded: boolean) {\n  return post('/api/project_branches/set_automatic_deletion_protection', {\n    project: projectKey,\n    branch: branchName,\n    value: excluded\n  }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Level from 'sonar-ui-common/components/ui/Level';\nimport { getBranchStatusByBranchLike, Store } from '../../store/rootReducer';\nimport { BranchLike } from '../../types/branch-like';\n\ninterface ExposedProps {\n  branchLike: BranchLike;\n  component: string;\n}\n\ninterface BranchStatusProps {\n  status?: string;\n}\n\nexport function BranchStatus({ status }: BranchStatusProps) {\n  if (!status) {\n    return null;\n  }\n\n  return <Level level={status} small={true} />;\n}\n\nconst mapStateToProps = (state: Store, props: ExposedProps) => {\n  const { branchLike, component } = props;\n  const { status } = getBranchStatusByBranchLike(state, component, branchLike);\n  return { status };\n};\n\nexport default connect(mapStateToProps)(BranchStatus);\n"],"sourceRoot":""}