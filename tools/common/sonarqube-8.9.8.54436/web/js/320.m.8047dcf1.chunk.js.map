{"version":3,"sources":["webpack:///./src/main/js/apps/quality-gates/styles.css?5e7a","webpack:///./src/main/js/apps/quality-gates/styles.css","webpack:///./src/main/js/apps/quality-gates/utils.ts","webpack:///./src/main/js/apps/quality-gates/components/ConditionOperator.tsx","webpack:///./src/main/js/apps/quality-gates/components/MetricSelect.tsx","webpack:///./src/main/js/apps/quality-gates/components/ThresholdInput.tsx","webpack:///./src/main/js/apps/quality-gates/components/ConditionModal.tsx","webpack:///./src/main/js/apps/quality-gates/components/Condition.tsx","webpack:///./src/main/js/apps/quality-gates/components/Conditions.tsx","webpack:///./src/main/js/apps/quality-gates/components/Projects.tsx","webpack:///./src/main/js/apps/quality-gates/components/DetailsContent.tsx","webpack:///./src/main/js/apps/quality-gates/components/CopyQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/DeleteQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/RenameQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/DetailsHeader.tsx","webpack:///./src/main/js/apps/quality-gates/components/Details.tsx","webpack:///./src/main/js/apps/quality-gates/components/List.tsx","webpack:///./src/main/js/apps/quality-gates/components/CreateQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/ListHeader.tsx","webpack:///./src/main/js/apps/quality-gates/components/App.tsx","webpack:///./src/main/js/app/components/embed-docs-modal/Suggestions.tsx","webpack:///./src/main/js/app/utils/addGlobalSuccessMessage.ts","webpack:///./src/main/js/components/common/ScreenPositionHelper.tsx","webpack:///./src/main/js/components/common/DocumentationTooltip.tsx","webpack:///./src/main/js/components/search-navigator.css?9a2e","webpack:///./src/main/js/components/search-navigator.css","webpack:///./src/main/js/apps/quality-gates/components/BuiltInQualityGateBadge.tsx"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","checkIfDefault","qualityGate","list","finding","find","candidate","id","isDefault","addCondition","condition","conditions","deleteCondition","filter","replaceCondition","newCondition","oldCondition","map","getPossibleOperators","metric","direction","getNoDiffMetric","store","getStore","getState","regularMetricKey","key","replace","undefined","getLocalizedMetricNameNoDiffMetric","handleChange","value","this","props","onOperatorChange","op","type","operators","Array","isArray","operatorOptions","label","getLabel","autoFocus","className","clearable","name","onChange","searchable","option","metrics","selectedMetric","onMetricChange","domain","optionsWithDomains","forEach","index","previous","disabled","placeholder","e","currentTarget","handleSelectChange","renderRatingInput","super","handleFormSubmit","state","getSinglePossibleOperator","error","gateId","then","onAddCondition","Promise","reject","handleScopeChange","scope","setState","correspondingMetric","correspondingMetricKey","m","handleMetricChange","handleOperatorChange","handleErrorChange","header","onClose","confirmButtonText","confirmDisable","onConfirm","size","errorMessage","Alert","variant","checked","onCheck","htmlFor","handleUpdateCondition","onSaveCondition","handleOpenUpdate","modal","handleUpdateClose","handleDeleteClick","deleteFormOpen","closeDeleteForm","removeCondition","onRemoveCondition","canEdit","updated","highlighted","hidden","renderOperator","onClick","confirmData","isDestructive","FORBIDDEN_METRIC_TYPES","FORBIDDEN_METRICS","alert_status","releasability_rating","security_hotspots","new_security_hotspots","renderConditionsTable","updatedConditionId","style","width","appState","existingConditions","sortedConditions","sortedConditionsOnOverallMetrics","sortedConditionsOnNewMetrics","duplicates","savedConditions","sample","length","uniqDuplicates","d","availableMetrics","includes","DocumentationTooltip","links","href","branchesEnabled","withAppState","mounted","fetchProjects","searchParams","gateName","page","pageSize","query","selected","data","prevState","more","projects","results","newSelectedProjects","project","selectedProjects","lastSearchParams","needToReload","projectsTotalCount","paging","total","handleSelect","projectKey","handleUnselect","renderElement","elements","elementsTotalCount","labelAll","labelSelected","labelUnselected","SelectList","All","onSearch","onSelect","onUnselect","readOnly","selectedElements","withPaging","actions","manageConditions","overlay","associateProjects","handleNameChange","event","handleCopy","newQualityGate","onCopy","router","String","maxLength","required","withRouter","onDelete","modalBody","modalHeader","handleRename","onRename","handleActionRefresh","refreshItem","refreshList","all","handleSetAsDefaultClick","onSetDefault","isBuiltIn","BuiltInQualityGateBadge","rename","copy","setAsDefault","delete","loading","fetchDetails","handleAddCondition","addGlobalSuccessMessage","handleSaveCondition","handleRemoveCondition","handleSetDefault","fetchMetrics","prevProps","refreshQualityGates","timeout","defer","title","qualityGates","mapDispatchToProps","List","activeClassName","to","handleCreate","async","onCreate","ListHeader","canCreate","fetchQualityGates","qualitygates","create","params","openDefault","defaultQualityGate","gate","Boolean","defaultTitle","titleTemplate","Suggestions","suggestions","ScreenPositionHelper","top","Consumer","addSuggestions","removeSuggestions","SuggestionsInner","message","dispatch","getPosition","containerPos","container","getBoundingClientRect","window","pageYOffset","left","pageXOffset","debouncedOnResize","forceUpdate","addEventListener","removeEventListener","ref","children","inPlace","rel","target"],"mappings":"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","file":"js/320.m.8047dcf1.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".quality-gate-section{max-width:1440px}.quality-gate-section+.quality-gate-section{margin-top:10px;padding-top:20px}.quality-gate-metric-select .Select-option{padding-left:16px}.quality-gate-metric-select .Select-option.is-disabled{opacity:1;font-weight:600;color:#333;padding-left:8px;font-style:normal}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getLocalizedMetricName } from 'sonar-ui-common/helpers/l10n';\nimport getStore from '../../app/utils/getStore';\nimport { isDiffMetric } from '../../helpers/measures';\nimport { getMetricByKey } from '../../store/rootReducer';\n\nexport function checkIfDefault(qualityGate: T.QualityGate, list: T.QualityGate[]): boolean {\n  const finding = list.find(candidate => candidate.id === qualityGate.id);\n  return (finding && finding.isDefault) || false;\n}\n\nexport function addCondition(qualityGate: T.QualityGate, condition: T.Condition): T.QualityGate {\n  const oldConditions = qualityGate.conditions || [];\n  const conditions = [...oldConditions, condition];\n  return { ...qualityGate, conditions };\n}\n\nexport function deleteCondition(qualityGate: T.QualityGate, condition: T.Condition): T.QualityGate {\n  const conditions =\n    qualityGate.conditions && qualityGate.conditions.filter(candidate => candidate !== condition);\n  return { ...qualityGate, conditions };\n}\n\nexport function replaceCondition(\n  qualityGate: T.QualityGate,\n  newCondition: T.Condition,\n  oldCondition: T.Condition\n): T.QualityGate {\n  const conditions =\n    qualityGate.conditions &&\n    qualityGate.conditions.map(candidate => {\n      return candidate === oldCondition ? newCondition : candidate;\n    });\n  return { ...qualityGate, conditions };\n}\n\nexport function getPossibleOperators(metric: T.Metric) {\n  if (metric.direction === 1) {\n    return 'LT';\n  } else if (metric.direction === -1) {\n    return 'GT';\n  } else {\n    return ['LT', 'GT'];\n  }\n}\n\nexport function metricKeyExists(key: string) {\n  return getMetricByKey(getStore().getState(), key) !== undefined;\n}\n\nfunction getNoDiffMetric(metric: T.Metric) {\n  const store = getStore().getState();\n  const regularMetricKey = metric.key.replace(/^new_/, '');\n  if (isDiffMetric(metric.key) && metricKeyExists(regularMetricKey)) {\n    return getMetricByKey(store, regularMetricKey);\n  } else if (metric.key === 'new_maintainability_rating') {\n    return getMetricByKey(store, 'sqale_rating') || metric;\n  } else {\n    return metric;\n  }\n}\n\nexport function getLocalizedMetricNameNoDiffMetric(metric: T.Metric) {\n  return getLocalizedMetricName(getNoDiffMetric(metric));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getPossibleOperators } from '../utils';\n\ninterface Props {\n  metric: T.Metric;\n  onOperatorChange: (op: string) => void;\n  op?: string;\n}\n\nexport default class ConditionOperator extends React.PureComponent<Props> {\n  handleChange = ({ value }: { label: string; value: string }) => {\n    this.props.onOperatorChange(value);\n  };\n\n  getLabel(op: string, metric: T.Metric) {\n    return metric.type === 'RATING'\n      ? translate('quality_gates.operator', op, 'rating')\n      : translate('quality_gates.operator', op);\n  }\n\n  render() {\n    const operators = getPossibleOperators(this.props.metric);\n\n    if (Array.isArray(operators)) {\n      const operatorOptions = operators.map(op => {\n        const label = this.getLabel(op, this.props.metric);\n        return { label, value: op };\n      });\n\n      return (\n        <Select\n          autoFocus={true}\n          className=\"input-medium\"\n          clearable={false}\n          id=\"condition-operator\"\n          name=\"operator\"\n          onChange={this.handleChange}\n          options={operatorOptions}\n          searchable={false}\n          value={this.props.op}\n        />\n      );\n    } else {\n      return (\n        <span className=\"display-inline-block note abs-width-150\">\n          {this.getLabel(operators, this.props.metric)}\n        </span>\n      );\n    }\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { getLocalizedMetricDomain, translate } from 'sonar-ui-common/helpers/l10n';\nimport { getLocalizedMetricNameNoDiffMetric } from '../utils';\n\ninterface Props {\n  metric?: T.Metric;\n  metrics: T.Metric[];\n  onMetricChange: (metric: T.Metric) => void;\n}\n\ninterface Option {\n  disabled?: boolean;\n  label: string;\n  value: string;\n}\n\nexport default class MetricSelect extends React.PureComponent<Props> {\n  handleChange = (option: Option | null) => {\n    if (option) {\n      const { metrics } = this.props;\n      const selectedMetric = metrics.find(metric => metric.key === option.value);\n      if (selectedMetric) {\n        this.props.onMetricChange(selectedMetric);\n      }\n    }\n  };\n\n  render() {\n    const { metric, metrics } = this.props;\n\n    const options: Array<Option & { domain?: string }> = sortBy(\n      metrics.map(metric => ({\n        value: metric.key,\n        label: getLocalizedMetricNameNoDiffMetric(metric),\n        domain: metric.domain\n      })),\n      'domain'\n    );\n\n    // Use \"disabled\" property to emulate optgroups.\n    const optionsWithDomains: Option[] = [];\n    options.forEach((option, index, options) => {\n      const previous = index > 0 ? options[index - 1] : null;\n      if (option.domain && (!previous || previous.domain !== option.domain)) {\n        optionsWithDomains.push({\n          value: '<domain>',\n          label: getLocalizedMetricDomain(option.domain),\n          disabled: true\n        });\n      }\n      optionsWithDomains.push(option);\n    });\n\n    return (\n      <Select\n        className=\"text-middle quality-gate-metric-select\"\n        id=\"condition-metric\"\n        onChange={this.handleChange}\n        options={optionsWithDomains}\n        placeholder={translate('search.search_for_metrics')}\n        value={metric && metric.key}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\n\ninterface Props {\n  name: string;\n  value: string;\n  metric: T.Metric;\n  onChange: (value: string) => void;\n}\n\nexport default class ThresholdInput extends React.PureComponent<Props> {\n  handleChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.onChange(e.currentTarget.value);\n  };\n\n  handleSelectChange = (option: { value: string } | null) => {\n    if (option) {\n      this.props.onChange(option.value);\n    } else {\n      this.props.onChange('');\n    }\n  };\n\n  renderRatingInput() {\n    const { name, value } = this.props;\n\n    const options = [\n      { label: 'A', value: '1' },\n      { label: 'B', value: '2' },\n      { label: 'C', value: '3' },\n      { label: 'D', value: '4' }\n    ];\n\n    return (\n      <Select\n        className=\"input-tiny text-middle\"\n        clearable={true}\n        id=\"condition-threshold\"\n        name={name}\n        onChange={this.handleSelectChange}\n        options={options}\n        placeholder=\"\"\n        searchable={false}\n        value={value}\n      />\n    );\n  }\n\n  render() {\n    const { name, value, metric } = this.props;\n\n    if (metric.type === 'RATING') {\n      return this.renderRatingInput();\n    }\n\n    return (\n      <input\n        className=\"input-tiny text-middle\"\n        data-type={metric.type}\n        id=\"condition-threshold\"\n        name={name}\n        onChange={this.handleChange}\n        type=\"text\"\n        value={value}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDiffMetric } from 'sonar-ui-common/helpers/measures';\nimport { createCondition, updateCondition } from '../../../api/quality-gates';\nimport { getPossibleOperators } from '../utils';\nimport ConditionOperator from './ConditionOperator';\nimport MetricSelect from './MetricSelect';\nimport ThresholdInput from './ThresholdInput';\n\ninterface Props {\n  condition?: T.Condition;\n  metric?: T.Metric;\n  metrics?: T.Metric[];\n  header: string;\n  onAddCondition: (condition: T.Condition) => void;\n  onClose: () => void;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  error: string;\n  errorMessage?: string;\n  metric?: T.Metric;\n  op?: string;\n  scope: 'new' | 'overall';\n}\n\nexport default class ConditionModal extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      error: props.condition ? props.condition.error : '',\n      scope: 'new',\n      metric: props.metric ? props.metric : undefined,\n      op: props.condition ? props.condition.op : undefined\n    };\n  }\n\n  getSinglePossibleOperator(metric: T.Metric) {\n    const operators = getPossibleOperators(metric);\n    return Array.isArray(operators) ? undefined : operators;\n  }\n\n  handleFormSubmit = () => {\n    if (this.state.metric) {\n      const { condition, qualityGate } = this.props;\n      const newCondition: T.Omit<T.Condition, 'id'> = {\n        metric: this.state.metric.key,\n        op: this.getSinglePossibleOperator(this.state.metric) || this.state.op,\n        error: this.state.error\n      };\n      const submitPromise = condition\n        ? updateCondition({ id: condition.id, ...newCondition })\n        : createCondition({ gateId: qualityGate.id, ...newCondition });\n      return submitPromise.then(this.props.onAddCondition);\n    }\n    return Promise.reject();\n  };\n\n  handleScopeChange = (scope: 'new' | 'overall') => {\n    this.setState(({ metric }) => {\n      const { metrics } = this.props;\n      let correspondingMetric;\n\n      if (metric && metrics) {\n        const correspondingMetricKey =\n          scope === 'new' ? `new_${metric.key}` : metric.key.replace(/^new_/, '');\n        correspondingMetric = metrics.find(m => m.key === correspondingMetricKey);\n      }\n\n      return { scope, metric: correspondingMetric };\n    });\n  };\n\n  handleMetricChange = (metric: T.Metric) => {\n    this.setState({ metric, op: undefined, error: '' });\n  };\n\n  handleOperatorChange = (op: string) => {\n    this.setState({ op });\n  };\n\n  handleErrorChange = (error: string) => {\n    this.setState({ error });\n  };\n\n  render() {\n    const { header, metrics, onClose } = this.props;\n    const { op, error, scope, metric } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={header}\n        confirmDisable={metric === undefined}\n        header={header}\n        onClose={onClose}\n        onConfirm={this.handleFormSubmit}\n        size=\"small\">\n        {this.state.errorMessage && <Alert variant=\"error\">{this.state.errorMessage}</Alert>}\n\n        {this.props.metric === undefined && (\n          <div className=\"modal-field display-flex-center\">\n            <Radio checked={scope === 'new'} onCheck={this.handleScopeChange} value=\"new\">\n              <span data-test=\"quality-gates__condition-scope-new\">\n                {translate('quality_gates.conditions.new_code')}\n              </span>\n            </Radio>\n            <Radio\n              checked={scope === 'overall'}\n              className=\"big-spacer-left\"\n              onCheck={this.handleScopeChange}\n              value=\"overall\">\n              <span data-test=\"quality-gates__condition-scope-overall\">\n                {translate('quality_gates.conditions.overall_code')}\n              </span>\n            </Radio>\n          </div>\n        )}\n\n        <div className=\"modal-field\">\n          <label htmlFor=\"condition-metric\">\n            {translate('quality_gates.conditions.fails_when')}\n          </label>\n          {metrics && (\n            <MetricSelect\n              metric={metric}\n              metrics={metrics.filter(metric =>\n                scope === 'new' ? isDiffMetric(metric.key) : !isDiffMetric(metric.key)\n              )}\n              onMetricChange={this.handleMetricChange}\n            />\n          )}\n          {this.props.metric && (\n            <span className=\"note\">{getLocalizedMetricName(this.props.metric)}</span>\n          )}\n        </div>\n\n        {metric && (\n          <>\n            <div className=\"modal-field display-inline-block\">\n              <label htmlFor=\"condition-operator\">\n                {translate('quality_gates.conditions.operator')}\n              </label>\n              <ConditionOperator\n                metric={metric}\n                onOperatorChange={this.handleOperatorChange}\n                op={op}\n              />\n            </div>\n            <div className=\"modal-field display-inline-block spacer-left\">\n              <label htmlFor=\"condition-threshold\">\n                {translate('quality_gates.conditions.value')}\n              </label>\n              <ThresholdInput\n                metric={metric}\n                name=\"error\"\n                onChange={this.handleErrorChange}\n                value={error}\n              />\n            </div>\n          </>\n        )}\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { DeleteButton, EditButton } from 'sonar-ui-common/components/controls/buttons';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport {\n  getLocalizedMetricName,\n  translate,\n  translateWithParameters\n} from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { deleteCondition } from '../../../api/quality-gates';\nimport { getLocalizedMetricNameNoDiffMetric } from '../utils';\nimport ConditionModal from './ConditionModal';\n\ninterface Props {\n  condition: T.Condition;\n  canEdit: boolean;\n  metric: T.Metric;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updated?: boolean;\n}\n\ninterface State {\n  deleteFormOpen: boolean;\n  modal: boolean;\n}\n\nexport default class Condition extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      deleteFormOpen: false,\n      modal: false\n    };\n  }\n\n  handleUpdateCondition = (newCondition: T.Condition) => {\n    this.props.onSaveCondition(newCondition, this.props.condition);\n  };\n\n  handleOpenUpdate = () => {\n    this.setState({ modal: true });\n  };\n\n  handleUpdateClose = () => {\n    this.setState({ modal: false });\n  };\n\n  handleDeleteClick = () => {\n    this.setState({ deleteFormOpen: true });\n  };\n\n  closeDeleteForm = () => {\n    this.setState({ deleteFormOpen: false });\n  };\n\n  removeCondition = (condition: T.Condition) => {\n    deleteCondition({ id: condition.id }).then(\n      () => this.props.onRemoveCondition(condition),\n      () => {}\n    );\n  };\n\n  renderOperator() {\n    // TODO can operator be missing?\n    const { op = 'GT' } = this.props.condition;\n    return this.props.metric.type === 'RATING'\n      ? translate('quality_gates.operator', op, 'rating')\n      : translate('quality_gates.operator', op);\n  }\n\n  render() {\n    const { condition, canEdit, metric, qualityGate, updated } = this.props;\n    return (\n      <tr className={classNames({ highlighted: updated })}>\n        <td className=\"text-middle\">\n          {getLocalizedMetricNameNoDiffMetric(metric)}\n          {metric.hidden && (\n            <span className=\"text-danger little-spacer-left\">{translate('deprecated')}</span>\n          )}\n        </td>\n\n        <td className=\"text-middle nowrap\">{this.renderOperator()}</td>\n\n        <td className=\"text-middle nowrap\">{formatMeasure(condition.error, metric.type)}</td>\n\n        {canEdit && (\n          <>\n            <td className=\"text-center thin\">\n              <EditButton\n                data-test=\"quality-gates__condition-update\"\n                onClick={this.handleOpenUpdate}\n              />\n            </td>\n            <td className=\"text-center thin\">\n              <DeleteButton\n                data-test=\"quality-gates__condition-delete\"\n                onClick={this.handleDeleteClick}\n              />\n            </td>\n            {this.state.modal && (\n              <ConditionModal\n                condition={condition}\n                header={translate('quality_gates.update_condition')}\n                metric={metric}\n                onAddCondition={this.handleUpdateCondition}\n                onClose={this.handleUpdateClose}\n                qualityGate={qualityGate}\n              />\n            )}\n            {this.state.deleteFormOpen && (\n              <ConfirmModal\n                confirmButtonText={translate('delete')}\n                confirmData={condition}\n                header={translate('quality_gates.delete_condition')}\n                isDestructive={true}\n                onClose={this.closeDeleteForm}\n                onConfirm={this.removeCondition}>\n                {translateWithParameters(\n                  'quality_gates.delete_condition.confirm.message',\n                  getLocalizedMetricName(this.props.metric)\n                )}\n              </ConfirmModal>\n            )}\n          </>\n        )}\n      </tr>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { differenceWith, map, sortBy, uniqBy } from 'lodash';\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDiffMetric } from 'sonar-ui-common/helpers/measures';\nimport DocumentationTooltip from '../../../components/common/DocumentationTooltip';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { MetricKey } from '../../../types/metrics';\nimport Condition from './Condition';\nimport ConditionModal from './ConditionModal';\n\ninterface Props {\n  appState: Pick<T.AppState, 'branchesEnabled'>;\n  canEdit: boolean;\n  conditions: T.Condition[];\n  metrics: T.Dict<T.Metric>;\n  onAddCondition: (condition: T.Condition) => void;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nconst FORBIDDEN_METRIC_TYPES = ['DATA', 'DISTRIB', 'STRING', 'BOOL'];\nconst FORBIDDEN_METRICS: string[] = [\n  MetricKey.alert_status,\n  MetricKey.releasability_rating,\n  MetricKey.security_hotspots,\n  MetricKey.new_security_hotspots\n];\n\nexport class Conditions extends React.PureComponent<Props> {\n  renderConditionsTable = (conditions: T.Condition[], scope: 'new' | 'overall') => {\n    const {\n      qualityGate,\n      metrics,\n      canEdit,\n      onRemoveCondition,\n      onSaveCondition,\n      updatedConditionId\n    } = this.props;\n    return (\n      <table className=\"data zebra\" data-test={`quality-gates__conditions-${scope}`}>\n        <thead>\n          <tr>\n            <th className=\"nowrap\" style={{ width: 300 }}>\n              {translate('quality_gates.conditions.metric')}\n            </th>\n            <th className=\"nowrap\">{translate('quality_gates.conditions.operator')}</th>\n            <th className=\"nowrap\">{translate('quality_gates.conditions.value')}</th>\n            {canEdit && (\n              <>\n                <th className=\"thin\">{translate('edit')}</th>\n                <th className=\"thin\">{translate('delete')}</th>\n              </>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {conditions.map(condition => (\n            <Condition\n              canEdit={canEdit}\n              condition={condition}\n              key={condition.id}\n              metric={metrics[condition.metric]}\n              onRemoveCondition={onRemoveCondition}\n              onSaveCondition={onSaveCondition}\n              qualityGate={qualityGate}\n              updated={condition.id === updatedConditionId}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  render() {\n    const { appState, conditions, metrics, canEdit } = this.props;\n\n    const existingConditions = conditions.filter(condition => metrics[condition.metric]);\n    const sortedConditions = sortBy(\n      existingConditions,\n      condition => metrics[condition.metric] && metrics[condition.metric].name\n    );\n\n    const sortedConditionsOnOverallMetrics = sortedConditions.filter(\n      condition => !isDiffMetric(condition.metric)\n    );\n    const sortedConditionsOnNewMetrics = sortedConditions.filter(condition =>\n      isDiffMetric(condition.metric)\n    );\n\n    const duplicates: T.Condition[] = [];\n    const savedConditions = existingConditions.filter(condition => condition.id != null);\n    savedConditions.forEach(condition => {\n      const sameCount = savedConditions.filter(sample => sample.metric === condition.metric).length;\n      if (sameCount > 1) {\n        duplicates.push(condition);\n      }\n    });\n\n    const uniqDuplicates = uniqBy(duplicates, d => d.metric).map(condition => ({\n      ...condition,\n      metric: metrics[condition.metric]\n    }));\n\n    const availableMetrics = differenceWith(\n      map(metrics, metric => metric).filter(\n        metric =>\n          !metric.hidden &&\n          !FORBIDDEN_METRIC_TYPES.includes(metric.type) &&\n          !FORBIDDEN_METRICS.includes(metric.key)\n      ),\n      conditions,\n      (metric, condition) => metric.key === condition.metric\n    );\n\n    return (\n      <div className=\"quality-gate-section\">\n        {canEdit && (\n          <div className=\"pull-right\">\n            <ModalButton\n              modal={({ onClose }) => (\n                <ConditionModal\n                  header={translate('quality_gates.add_condition')}\n                  metrics={availableMetrics}\n                  onAddCondition={this.props.onAddCondition}\n                  onClose={onClose}\n                  qualityGate={this.props.qualityGate}\n                />\n              )}>\n              {({ onClick }) => (\n                <Button data-test=\"quality-gates__add-condition\" onClick={onClick}>\n                  {translate('quality_gates.add_condition')}\n                </Button>\n              )}\n            </ModalButton>\n          </div>\n        )}\n\n        <header className=\"display-flex-center spacer-bottom\">\n          <h3>{translate('quality_gates.conditions')}</h3>\n          <DocumentationTooltip\n            className=\"spacer-left\"\n            content={translate('quality_gates.conditions.help')}\n            links={[\n              {\n                href: '/documentation/user-guide/clean-as-you-code/',\n                label: translate('quality_gates.conditions.help.link')\n              }\n            ]}\n          />\n        </header>\n\n        {uniqDuplicates.length > 0 && (\n          <Alert variant=\"warning\">\n            <p>{translate('quality_gates.duplicated_conditions')}</p>\n            <ul className=\"list-styled spacer-top\">\n              {uniqDuplicates.map(d => (\n                <li key={d.metric.key}>{getLocalizedMetricName(d.metric)}</li>\n              ))}\n            </ul>\n          </Alert>\n        )}\n\n        {sortedConditionsOnNewMetrics.length > 0 && (\n          <div className=\"big-spacer-top\">\n            <h4>{translate('quality_gates.conditions.new_code.long')}</h4>\n\n            {appState.branchesEnabled && (\n              <p className=\"spacer-top spacer-bottom\">\n                {translate('quality_gates.conditions.new_code.description')}\n              </p>\n            )}\n\n            {this.renderConditionsTable(sortedConditionsOnNewMetrics, 'new')}\n          </div>\n        )}\n\n        {sortedConditionsOnOverallMetrics.length > 0 && (\n          <div className=\"big-spacer-top\">\n            <h4>{translate('quality_gates.conditions.overall_code.long')}</h4>\n\n            {appState.branchesEnabled && (\n              <p className=\"spacer-top spacer-bottom\">\n                {translate('quality_gates.conditions.overall_code.description')}\n              </p>\n            )}\n\n            {this.renderConditionsTable(sortedConditionsOnOverallMetrics, 'overall')}\n          </div>\n        )}\n\n        {existingConditions.length === 0 && (\n          <div className=\"big-spacer-top\">{translate('quality_gates.no_conditions')}</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withAppState(Conditions);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { find, without } from 'lodash';\nimport * as React from 'react';\nimport SelectList, {\n  SelectListFilter,\n  SelectListSearchParams\n} from 'sonar-ui-common/components/controls/SelectList';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  associateGateWithProject,\n  dissociateGateWithProject,\n  searchProjects\n} from '../../../api/quality-gates';\n\ninterface Props {\n  canEdit?: boolean;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  needToReload: boolean;\n  lastSearchParams?: SelectListSearchParams;\n  projects: Array<{ key: string; name: string; selected: boolean }>;\n  projectsTotalCount?: number;\n  selectedProjects: string[];\n}\n\nexport default class Projects extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      needToReload: false,\n      projects: [],\n      selectedProjects: []\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchProjects = (searchParams: SelectListSearchParams) =>\n    searchProjects({\n      gateName: this.props.qualityGate.name,\n      page: searchParams.page,\n      pageSize: searchParams.pageSize,\n      query: searchParams.query !== '' ? searchParams.query : undefined,\n      selected: searchParams.filter\n    }).then(data => {\n      if (this.mounted) {\n        this.setState(prevState => {\n          const more = searchParams.page != null && searchParams.page > 1;\n\n          const projects = more ? [...prevState.projects, ...data.results] : data.results;\n          const newSelectedProjects = data.results\n            .filter(project => project.selected)\n            .map(project => project.key);\n          const selectedProjects = more\n            ? [...prevState.selectedProjects, ...newSelectedProjects]\n            : newSelectedProjects;\n\n          return {\n            lastSearchParams: searchParams,\n            needToReload: false,\n            projects,\n            projectsTotalCount: data.paging.total,\n            selectedProjects\n          };\n        });\n      }\n    });\n\n  handleSelect = (key: string) =>\n    associateGateWithProject({\n      gateId: this.props.qualityGate.id,\n      projectKey: key\n    }).then(() => {\n      if (this.mounted) {\n        this.setState(prevState => ({\n          needToReload: true,\n          selectedProjects: [...prevState.selectedProjects, key]\n        }));\n      }\n    });\n\n  handleUnselect = (key: string) =>\n    dissociateGateWithProject({\n      gateId: this.props.qualityGate.id,\n      projectKey: key\n    }).then(() => {\n      if (this.mounted) {\n        this.setState(prevState => ({\n          needToReload: true,\n          selectedProjects: without(prevState.selectedProjects, key)\n        }));\n      }\n    });\n\n  renderElement = (key: string): React.ReactNode => {\n    const project = find(this.state.projects, { key });\n    return (\n      <div className=\"select-list-list-item\">\n        {project === undefined ? (\n          key\n        ) : (\n          <>\n            {project.name}\n            <br />\n            <span className=\"note\">{project.key}</span>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <SelectList\n        elements={this.state.projects.map(project => project.key)}\n        elementsTotalCount={this.state.projectsTotalCount}\n        labelAll={translate('quality_gates.projects.all')}\n        labelSelected={translate('quality_gates.projects.with')}\n        labelUnselected={translate('quality_gates.projects.without')}\n        needToReload={\n          this.state.needToReload &&\n          this.state.lastSearchParams &&\n          this.state.lastSearchParams.filter !== SelectListFilter.All\n        }\n        onSearch={this.fetchProjects}\n        onSelect={this.handleSelect}\n        onUnselect={this.handleUnselect}\n        readOnly={!this.props.canEdit}\n        renderElement={this.renderElement}\n        selectedElements={this.state.selectedProjects}\n        withPaging={true}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport Conditions from './Conditions';\nimport Projects from './Projects';\n\nexport interface DetailsContentProps {\n  isDefault?: boolean;\n  metrics: T.Dict<T.Metric>;\n  onAddCondition: (condition: T.Condition) => void;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nexport function DetailsContent(props: DetailsContentProps) {\n  const { isDefault, metrics, qualityGate, updatedConditionId } = props;\n  const conditions = qualityGate.conditions || [];\n  const actions = qualityGate.actions || ({} as any);\n\n  return (\n    <div className=\"layout-page-main-inner\">\n      <Conditions\n        canEdit={actions.manageConditions}\n        conditions={conditions}\n        metrics={metrics}\n        onAddCondition={props.onAddCondition}\n        onRemoveCondition={props.onRemoveCondition}\n        onSaveCondition={props.onSaveCondition}\n        qualityGate={qualityGate}\n        updatedConditionId={updatedConditionId}\n      />\n\n      <div className=\"quality-gate-section\" id=\"quality-gate-projects\">\n        <header className=\"display-flex-center spacer-bottom\">\n          <h3>{translate('quality_gates.projects')}</h3>\n          <HelpTooltip\n            className=\"spacer-left\"\n            overlay={\n              <div className=\"big-padded-top big-padded-bottom\">\n                {translate('quality_gates.projects.help')}\n              </div>\n            }\n          />\n        </header>\n        {isDefault ? (\n          translate('quality_gates.projects_for_default')\n        ) : (\n          <Projects\n            canEdit={actions.associateProjects}\n            // pass unique key to re-mount the component when the quality gate changes\n            key={qualityGate.id}\n            qualityGate={qualityGate}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(DetailsContent);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { copyQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onClose: () => void;\n  onCopy: () => Promise<void>;\n  qualityGate: T.QualityGate;\n  router: Pick<Router, 'push'>;\n}\n\ninterface State {\n  name: string;\n}\n\nexport class CopyQualityGateForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.qualityGate.name };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleCopy = () => {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n\n    if (!name) {\n      return undefined;\n    }\n\n    return copyQualityGate({ id: qualityGate.id, name }).then(newQualityGate => {\n      this.props.onCopy();\n      this.props.router.push(getQualityGateUrl(String(newQualityGate.id)));\n    });\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n    const confirmDisable = !name || (qualityGate && qualityGate.name === name);\n\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('copy')}\n        confirmDisable={confirmDisable}\n        header={translate('quality_gates.copy')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleCopy}\n        size=\"small\">\n        <MandatoryFieldsExplanation className=\"modal-field\" />\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <MandatoryFieldMarker />\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n\nexport default withRouter(CopyQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ConfirmButton from 'sonar-ui-common/components/controls/ConfirmButton';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGatesUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onDelete: () => Promise<void>;\n  qualityGate: T.QualityGate;\n  router: Pick<Router, 'push'>;\n}\n\nexport class DeleteQualityGateForm extends React.PureComponent<Props> {\n  onDelete = () => {\n    const { qualityGate } = this.props;\n    return deleteQualityGate({ id: qualityGate.id })\n      .then(this.props.onDelete)\n      .then(() => {\n        this.props.router.push(getQualityGatesUrl());\n      });\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n\n    return (\n      <ConfirmButton\n        confirmButtonText={translate('delete')}\n        isDestructive={true}\n        modalBody={translateWithParameters(\n          'quality_gates.delete.confirm.message',\n          qualityGate.name\n        )}\n        modalHeader={translate('quality_gates.delete')}\n        onConfirm={this.onDelete}>\n        {({ onClick }) => (\n          <Button\n            className=\"little-spacer-left button-red\"\n            id=\"quality-gate-delete\"\n            onClick={onClick}>\n            {translate('delete')}\n          </Button>\n        )}\n      </ConfirmButton>\n    );\n  }\n}\n\nexport default withRouter(DeleteQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { renameQualityGate } from '../../../api/quality-gates';\n\ninterface Props {\n  onClose: () => void;\n  onRename: () => Promise<void>;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  name: string;\n}\n\nexport default class RenameQualityGateForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.qualityGate.name };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleRename = () => {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n\n    if (!name) {\n      return undefined;\n    }\n\n    return renameQualityGate({ id: qualityGate.id, name }).then(() => this.props.onRename());\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n    const confirmDisable = !name || (qualityGate && qualityGate.name === name);\n\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('rename')}\n        confirmDisable={confirmDisable}\n        header={translate('quality_gates.rename')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleRename}\n        size=\"small\">\n        <MandatoryFieldsExplanation className=\"modal-field\" />\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <MandatoryFieldMarker />\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { setQualityGateAsDefault } from '../../../api/quality-gates';\nimport BuiltInQualityGateBadge from './BuiltInQualityGateBadge';\nimport CopyQualityGateForm from './CopyQualityGateForm';\nimport DeleteQualityGateForm from './DeleteQualityGateForm';\nimport RenameQualityGateForm from './RenameQualityGateForm';\n\ninterface Props {\n  onSetDefault: () => void;\n  qualityGate: T.QualityGate;\n  refreshItem: () => Promise<void>;\n  refreshList: () => Promise<void>;\n}\n\nexport default class DetailsHeader extends React.PureComponent<Props> {\n  handleActionRefresh = () => {\n    const { refreshItem, refreshList } = this.props;\n    return Promise.all([refreshItem(), refreshList()]).then(\n      () => {},\n      () => {}\n    );\n  };\n\n  handleSetAsDefaultClick = () => {\n    const { qualityGate } = this.props;\n    if (!qualityGate.isDefault) {\n      // Optimistic update\n      this.props.onSetDefault();\n      setQualityGateAsDefault({ id: qualityGate.id }).then(\n        this.handleActionRefresh,\n        this.handleActionRefresh\n      );\n    }\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const actions = qualityGate.actions || ({} as any);\n    return (\n      <div className=\"layout-page-header-panel layout-page-main-header issues-main-header\">\n        <div className=\"layout-page-header-panel-inner layout-page-main-header-inner\">\n          <div className=\"layout-page-main-inner\">\n            <div className=\"pull-left display-flex-center\">\n              <h2>{qualityGate.name}</h2>\n              {qualityGate.isBuiltIn && <BuiltInQualityGateBadge className=\"spacer-left\" />}\n            </div>\n\n            <div className=\"pull-right\">\n              {actions.rename && (\n                <ModalButton\n                  modal={({ onClose }) => (\n                    <RenameQualityGateForm\n                      onClose={onClose}\n                      onRename={this.handleActionRefresh}\n                      qualityGate={qualityGate}\n                    />\n                  )}>\n                  {({ onClick }) => (\n                    <Button id=\"quality-gate-rename\" onClick={onClick}>\n                      {translate('rename')}\n                    </Button>\n                  )}\n                </ModalButton>\n              )}\n              {actions.copy && (\n                <ModalButton\n                  modal={({ onClose }) => (\n                    <CopyQualityGateForm\n                      onClose={onClose}\n                      onCopy={this.handleActionRefresh}\n                      qualityGate={qualityGate}\n                    />\n                  )}>\n                  {({ onClick }) => (\n                    <Button className=\"little-spacer-left\" id=\"quality-gate-copy\" onClick={onClick}>\n                      {translate('copy')}\n                    </Button>\n                  )}\n                </ModalButton>\n              )}\n              {actions.setAsDefault && (\n                <Button\n                  className=\"little-spacer-left\"\n                  id=\"quality-gate-toggle-default\"\n                  onClick={this.handleSetAsDefaultClick}>\n                  {translate('set_as_default')}\n                </Button>\n              )}\n              {actions.delete && (\n                <DeleteQualityGateForm\n                  onDelete={this.props.refreshList}\n                  qualityGate={qualityGate}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { connect } from 'react-redux';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { fetchQualityGate } from '../../../api/quality-gates';\nimport addGlobalSuccessMessage from '../../../app/utils/addGlobalSuccessMessage';\nimport { fetchMetrics } from '../../../store/rootActions';\nimport { getMetrics, Store } from '../../../store/rootReducer';\nimport { addCondition, checkIfDefault, deleteCondition, replaceCondition } from '../utils';\nimport DetailsContent from './DetailsContent';\nimport DetailsHeader from './DetailsHeader';\n\ninterface OwnProps {\n  id: string;\n  onSetDefault: (qualityGate: T.QualityGate) => void;\n  qualityGates: T.QualityGate[];\n  refreshQualityGates: () => Promise<void>;\n}\n\ninterface StateToProps {\n  metrics: T.Dict<T.Metric>;\n}\n\ninterface DispatchToProps {\n  fetchMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps & OwnProps;\n\ninterface State {\n  loading: boolean;\n  qualityGate?: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nexport class Details extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.props.fetchMetrics();\n    this.fetchDetails();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.id !== this.props.id) {\n      this.fetchDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchDetails = () => {\n    const { id } = this.props;\n    this.setState({ loading: true });\n    return fetchQualityGate({ id }).then(\n      qualityGate => {\n        if (this.mounted) {\n          this.setState({ loading: false, qualityGate, updatedConditionId: undefined });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleAddCondition = (condition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_added'));\n      return {\n        qualityGate: addCondition(qualityGate, condition),\n        updatedConditionId: condition.id\n      };\n    });\n  };\n\n  handleSaveCondition = (newCondition: T.Condition, oldCondition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_updated'));\n      return {\n        qualityGate: replaceCondition(qualityGate, newCondition, oldCondition),\n        updatedConditionId: newCondition.id\n      };\n    });\n  };\n\n  handleRemoveCondition = (condition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_deleted'));\n      return {\n        qualityGate: deleteCondition(qualityGate, condition),\n        updatedConditionId: undefined\n      };\n    });\n  };\n\n  handleSetDefault = () => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      this.props.onSetDefault(qualityGate);\n      const newQualityGate: T.QualityGate = {\n        ...qualityGate,\n        actions: { ...qualityGate.actions, delete: false, setAsDefault: false }\n      };\n      return { qualityGate: newQualityGate };\n    });\n  };\n\n  render() {\n    const { metrics, refreshQualityGates } = this.props;\n    const { loading, qualityGate, updatedConditionId } = this.state;\n\n    return (\n      <div className=\"layout-page-main\">\n        <DeferredSpinner loading={loading} timeout={200}>\n          {qualityGate && (\n            <>\n              <Helmet defer={false} title={qualityGate.name} />\n              <DetailsHeader\n                onSetDefault={this.handleSetDefault}\n                qualityGate={qualityGate}\n                refreshItem={this.fetchDetails}\n                refreshList={refreshQualityGates}\n              />\n              <DetailsContent\n                isDefault={checkIfDefault(qualityGate, this.props.qualityGates)}\n                metrics={metrics}\n                onAddCondition={this.handleAddCondition}\n                onRemoveCondition={this.handleRemoveCondition}\n                onSaveCondition={this.handleSaveCondition}\n                qualityGate={qualityGate}\n                updatedConditionId={updatedConditionId}\n              />\n            </>\n          )}\n        </DeferredSpinner>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchToProps = { fetchMetrics };\n\nconst mapStateToProps = (state: Store): StateToProps => ({\n  metrics: getMetrics(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getQualityGateUrl } from '../../../helpers/urls';\nimport BuiltInQualityGateBadge from './BuiltInQualityGateBadge';\n\ninterface Props {\n  qualityGates: T.QualityGate[];\n}\n\nexport default function List({ qualityGates }: Props) {\n  return (\n    <div className=\"list-group\">\n      {qualityGates.map(qualityGate => (\n        <Link\n          activeClassName=\"active\"\n          className=\"list-group-item display-flex-center\"\n          data-id={qualityGate.id}\n          key={qualityGate.id}\n          to={getQualityGateUrl(String(qualityGate.id))}>\n          <span className=\"flex-1\">{qualityGate.name}</span>\n          {qualityGate.isDefault && (\n            <span className=\"badge little-spacer-left\">{translate('default')}</span>\n          )}\n          {qualityGate.isBuiltIn && <BuiltInQualityGateBadge className=\"little-spacer-left\" />}\n        </Link>\n      ))}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { createQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onClose: () => void;\n  onCreate: () => Promise<void>;\n  router: Pick<Router, 'push'>;\n}\n\ninterface State {\n  name: string;\n}\n\nexport class CreateQualityGateForm extends React.PureComponent<Props, State> {\n  state: State = { name: '' };\n\n  handleNameChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleCreate = async () => {\n    const { name } = this.state;\n\n    if (name) {\n      const qualityGate = await createQualityGate({ name });\n\n      await this.props.onCreate();\n\n      this.props.router.push(getQualityGateUrl(String(qualityGate.id)));\n    }\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('save')}\n        confirmDisable={!name}\n        header={translate('quality_gates.create')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleCreate}\n        size=\"small\">\n        <MandatoryFieldsExplanation className=\"modal-field\" />\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <MandatoryFieldMarker />\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n\nexport default withRouter(CreateQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport DocumentationTooltip from '../../../components/common/DocumentationTooltip';\nimport CreateQualityGateForm from './CreateQualityGateForm';\n\ninterface Props {\n  canCreate: boolean;\n  refreshQualityGates: () => Promise<void>;\n}\n\nexport default function ListHeader({ canCreate, refreshQualityGates }: Props) {\n  return (\n    <header className=\"page-header\">\n      {canCreate && (\n        <div className=\"page-actions\">\n          <ModalButton\n            modal={({ onClose }) => (\n              <CreateQualityGateForm onClose={onClose} onCreate={refreshQualityGates} />\n            )}>\n            {({ onClick }) => (\n              <Button data-test=\"quality-gates__add\" onClick={onClick}>\n                {translate('create')}\n              </Button>\n            )}\n          </ModalButton>\n        </div>\n      )}\n\n      <div className=\"display-flex-center\">\n        <h1 className=\"page-title\">{translate('quality_gates.page')}</h1>\n        <DocumentationTooltip\n          className=\"spacer-left\"\n          content={translate('quality_gates.help')}\n          links={[\n            {\n              href: '/documentation/user-guide/quality-gates/',\n              label: translate('learn_more')\n            }\n          ]}\n        />\n      </div>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  addSideBarClass,\n  addWhitePageClass,\n  removeSideBarClass,\n  removeWhitePageClass\n} from 'sonar-ui-common/helpers/pages';\nimport { fetchQualityGates } from '../../../api/quality-gates';\nimport Suggestions from '../../../app/components/embed-docs-modal/Suggestions';\nimport ScreenPositionHelper from '../../../components/common/ScreenPositionHelper';\nimport '../../../components/search-navigator.css';\nimport { getQualityGateUrl } from '../../../helpers/urls';\nimport '../styles.css';\nimport Details from './Details';\nimport List from './List';\nimport ListHeader from './ListHeader';\n\ninterface State {\n  canCreate: boolean;\n  loading: boolean;\n  qualityGates: T.QualityGate[];\n}\n\nclass App extends React.PureComponent<Pick<WithRouterProps, 'params' | 'router'>, State> {\n  mounted = false;\n  state: State = { canCreate: false, loading: true, qualityGates: [] };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchQualityGates();\n    addWhitePageClass();\n    addSideBarClass();\n  }\n\n  componentDidUpdate(prevProps: WithRouterProps) {\n    if (prevProps.params.id !== undefined && this.props.params.id === undefined) {\n      this.openDefault(this.state.qualityGates);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n    removeWhitePageClass();\n    removeSideBarClass();\n  }\n\n  fetchQualityGates = () => {\n    return fetchQualityGates().then(\n      ({ actions, qualitygates: qualityGates }) => {\n        if (this.mounted) {\n          this.setState({ canCreate: actions.create, loading: false, qualityGates });\n\n          if (!this.props.params.id) {\n            this.openDefault(qualityGates);\n          }\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  openDefault(qualityGates: T.QualityGate[]) {\n    const defaultQualityGate = qualityGates.find(gate => Boolean(gate.isDefault))!;\n    this.props.router.replace(getQualityGateUrl(String(defaultQualityGate.id)));\n  }\n\n  handleSetDefault = (qualityGate: T.QualityGate) => {\n    this.setState(({ qualityGates }) => {\n      return {\n        qualityGates: qualityGates.map(candidate => {\n          if (candidate.isDefault || candidate.id === qualityGate.id) {\n            return { ...candidate, isDefault: candidate.id === qualityGate.id };\n          }\n          return candidate;\n        })\n      };\n    });\n  };\n\n  render() {\n    const { id } = this.props.params;\n    const { canCreate, qualityGates } = this.state;\n    const defaultTitle = translate('quality_gates.page');\n\n    return (\n      <>\n        <Helmet defaultTitle={defaultTitle} defer={false} titleTemplate={`%s - ${defaultTitle}`} />\n        <div className=\"layout-page\" id=\"quality-gates-page\">\n          <Suggestions suggestions=\"quality_gates\" />\n\n          <ScreenPositionHelper className=\"layout-page-side-outer\">\n            {({ top }) => (\n              <div className=\"layout-page-side\" style={{ top }}>\n                <div className=\"layout-page-side-inner\">\n                  <div className=\"layout-page-filters\">\n                    <ListHeader\n                      canCreate={canCreate}\n                      refreshQualityGates={this.fetchQualityGates}\n                    />\n                    <DeferredSpinner loading={this.state.loading}>\n                      <List qualityGates={qualityGates} />\n                    </DeferredSpinner>\n                  </div>\n                </div>\n              </div>\n            )}\n          </ScreenPositionHelper>\n\n          {id !== undefined && (\n            <Details\n              id={id}\n              onSetDefault={this.handleSetDefault}\n              qualityGates={this.state.qualityGates}\n              refreshQualityGates={this.fetchQualityGates}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SuggestionsContext } from './SuggestionsContext';\n\ninterface Props {\n  suggestions: string;\n}\n\nexport default function Suggestions({ suggestions }: Props) {\n  return (\n    <SuggestionsContext.Consumer>\n      {({ addSuggestions, removeSuggestions }) => (\n        <SuggestionsInner\n          addSuggestions={addSuggestions}\n          removeSuggestions={removeSuggestions}\n          suggestions={suggestions}\n        />\n      )}\n    </SuggestionsContext.Consumer>\n  );\n}\n\ninterface SuggestionsInnerProps {\n  addSuggestions: (key: string) => void;\n  removeSuggestions: (key: string) => void;\n  suggestions: string;\n}\n\nclass SuggestionsInner extends React.PureComponent<SuggestionsInnerProps> {\n  componentDidMount() {\n    this.props.addSuggestions(this.props.suggestions);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.props.removeSuggestions(this.props.suggestions);\n      this.props.addSuggestions(prevProps.suggestions);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeSuggestions(this.props.suggestions);\n  }\n\n  render() {\n    return null;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as globalMessages from '../../store/globalMessages';\nimport getStore from './getStore';\n\nexport default function addGlobalSuccessMessage(message: string): void {\n  const store = getStore();\n  store.dispatch(globalMessages.addGlobalSuccessMessage(message));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\n\ninterface Props {\n  className?: string;\n  children: (position: { top: number; left: number }) => React.ReactElement<any>;\n}\n\nexport default class ScreenPositionHelper extends React.PureComponent<Props> {\n  container?: HTMLDivElement;\n  debouncedOnResize: () => void;\n\n  constructor(props: Props) {\n    super(props);\n    this.debouncedOnResize = debounce(() => this.forceUpdate(), 250);\n  }\n\n  componentDidMount() {\n    this.forceUpdate();\n    window.addEventListener('resize', this.debouncedOnResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.debouncedOnResize);\n  }\n\n  getPosition = () => {\n    const containerPos = this.container && this.container.getBoundingClientRect();\n    if (!containerPos) {\n      return { top: 0, left: 0 };\n    }\n    return {\n      top: window.pageYOffset + containerPos.top,\n      left: window.pageXOffset + containerPos.left\n    };\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        ref={container => (this.container = container as HTMLDivElement)}>\n        {this.props.children(this.getPosition())}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport { isWebUri } from 'valid-url';\n\nexport interface DocumentationTooltipProps {\n  children?: React.ReactNode;\n  className?: string;\n  content?: React.ReactNode;\n  links?: Array<{ href: string; label: string; inPlace?: boolean }>;\n  title?: string;\n}\n\nexport default function DocumentationTooltip(props: DocumentationTooltipProps) {\n  const { className, content, links, title } = props;\n\n  return (\n    <HelpTooltip\n      className={className}\n      overlay={\n        <div className=\"big-padded-top big-padded-bottom\">\n          {title && (\n            <div className=\"spacer-bottom\">\n              <strong>{title}</strong>\n            </div>\n          )}\n\n          {content && <p>{content}</p>}\n\n          {links && (\n            <>\n              <hr className=\"big-spacer-top big-spacer-bottom\" />\n\n              {links.map(({ href, label, inPlace }) => (\n                <div className=\"little-spacer-bottom\" key={label}>\n                  {inPlace ? (\n                    <Link to={href}>\n                      <span>{label}</span>\n                    </Link>\n                  ) : (\n                    <a\n                      className=\"display-inline-flex-center link-with-icon\"\n                      href={href}\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\">\n                      {isWebUri(href) && <DetachIcon size={14} className=\"spacer-right\" />}\n                      <span>{label}</span>\n                    </a>\n                  )}\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n      }>\n      {props.children}\n    </HelpTooltip>\n  );\n}\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../node_modules/postcss-loader/src/index.js??postcss!./search-navigator.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".search-navigator.sticky .search-navigator-workspace-header{position:fixed;z-index:50;top:0;left:300px;right:0}.search-navigator.sticky .search-navigator-workspace-details,.search-navigator.sticky .search-navigator-workspace-list{padding-top:43px}.search-navigator-facet-box{background-color:#f3f3f3;font-size:13px}.search-navigator-facet-box.leak-facet-box{background-color:#fbf3d5;border:1px solid #f1e8cb}.search-navigator-facet-box.is-inner{margin-left:8px;padding-left:12px;border-left:1px solid #e6e6e6}.search-navigator-facet-box.is-inner .search-navigator-facet-header{padding-top:6px;padding-bottom:6px}.leak-facet-box:not(.hidden)+.leak-facet-box{border-top:none}.search-navigator-facet-box-forbidden{background-color:transparent;opacity:.5}.search-navigator-facet-box-forbidden .search-navigator-facet-container,.search-navigator-facet-box-forbidden .search-navigator-facet-empty,.search-navigator-facet-box-forbidden .search-navigator-facet-list{display:none}.search-navigator-facet-box-forbidden .search-navigator-facet-header{color:#666}.search-navigator-facet-box-forbidden .search-navigator-facet-header:hover{color:#4b9fd5}.search-navigator-facet-box-forbidden .search-navigator-facet-header{cursor:default}.search-navigator-facet-box-forbidden .search-navigator-facet-header:hover{color:#666}.search-navigator-facet{position:relative;display:inline-flex;justify-content:space-between;align-items:center;width:100%;height:24px;margin:0 0 1px;padding:0 6px;border:1px solid transparent;border-radius:2px;box-sizing:border-box;white-space:normal;opacity:.3;cursor:not-allowed;transition:none}a.search-navigator-facet{opacity:1;cursor:pointer}a.search-navigator-facet .facet-name{color:#333}.search-navigator-facet.active,a.search-navigator-facet:focus,a.search-navigator-facet:hover{border-color:#4b9fd5}.search-navigator-facet.facet-category{opacity:1;cursor:default}.search-navigator-facet.facet-category .facet-name{color:#666}.search-navigator-facet .facet-name{flex:1 1 auto;min-width:0;line-height:16px;padding:1px 0;color:#666;font-size:12px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.search-navigator-facet .facet-stat{display:flex;align-items:center;margin-left:8px;color:#666;font-size:12px}.search-navigator-facet .facet-toggle{display:none;float:left;height:16px;line-height:16px;margin-top:-1px;padding:0 5px;border-radius:2px;font-size:11px;text-transform:lowercase}.search-navigator-facet .facet-toggle:hover{color:#333}.search-navigator-facet .facet-toggle-active.facet-toggle-green{background-color:#0a0;color:#fff}.search-navigator-facet .facet-toggle-active.facet-toggle-red{background-color:#d4333f;color:#fff}.leak-facet-box .search-navigator-facet .facet-name,.leak-facet-box .search-navigator-facet .facet-stat{background-color:#fbf3d5}.leak-facet-box .search-navigator-facet .facet-stat:before{background-image:linear-gradient(90deg,rgba(251,243,213,0),#fbf3d5 75%)}.search-navigator-facet.active{background-color:#cae3f2;text-decoration:none}.search-navigator-facet.active .facet-toggle{display:inline}.search-navigator-facet.compare .facet-toggle{cursor:not-allowed;opacity:.5}.search-navigator-facet.compare .facet-toggle.facet-toggle-green{background-color:#0a0;color:#fff}.search-navigator-facet.compare .facet-toggle.facet-toggle-red{background-color:transparent;color:#666}.search-navigator-facet-half{width:45%}.search-navigator-facet-half:nth-child(odd){margin-right:10%}.search-navigator-facet-highlight-under-container{margin-bottom:1px}.search-navigator-facet-highlight-under-container .search-navigator-facet{margin-bottom:0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover{border-bottom:none;padding-bottom:1px;border-radius:2px 2px 0 0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet{border-top:none;border-bottom:none;border-left-color:#4b9fd5;border-right-color:#4b9fd5;border-radius:0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:last-of-type,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet:last-of-type{border-bottom:1px solid #4b9fd5;border-radius:0 0 2px 2px}.search-navigator-facet-highlight-under-container .search-navigator-facet.active:last-of-type,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover:last-of-type{border-bottom:1px solid #4b9fd5;border-radius:2px}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet{background-color:#cae3f2;text-decoration:none}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet .facet-toggle{display:inline}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet.active{border-top:1px solid #4b9fd5}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover,.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover~.search-navigator-facet{background-color:#a1cde8;text-decoration:none}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover .facet-toggle,.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover~.search-navigator-facet .facet-toggle{display:inline}.search-navigator-facet-header{display:block;flex-shrink:0;padding:8px 0;color:#333;font-weight:600;overflow:hidden;white-space:nowrap}.search-navigator-facet-header>a{border-bottom:none;color:#333}.search-navigator-facet-header>a:focus,.search-navigator-facet-header>a:hover{color:#4b9fd5}.search-navigator-facet-header>.note{font-weight:400}.search-navigator-facet-header>h3,.search-navigator-facet-header>h4{line-height:inherit;display:inline}.search-navigator-facet-header-value{display:block;overflow:hidden}.search-navigator-facet-header-value>.badge{display:block}.search-navigator-facet-header-button{flex-shrink:0;margin-left:auto}.search-navigator-facet-header-wrapper{display:flex;align-items:center}.search-navigator-facet-list{padding-bottom:8px;font-size:0}.search-navigator-facet-list-title{margin:0 8px 4px;font-size:12px;font-weight:700}.search-navigator-facet-list+.search-navigator-facet-list>.search-navigator-facet-list-title{border-top:1px solid #e6e6e6;padding-top:8px}.search-navigator-facet-empty{margin:0;padding:0 10px 10px;color:#333;font-size:12px;white-space:nowrap}.search-navigator-facet-footer{display:block;padding-bottom:8px;border-bottom:none}.search-navigator-facet-container{margin-top:6px;padding:0 10px 16px}.search-navigator-date-facet-selection{position:relative;padding-left:8px;font-size:12px}.search-navigator-date-facet-selection:after,.search-navigator-date-facet-selection:before{display:table;content:\\\"\\\";line-height:0}.search-navigator-date-facet-selection:after{clear:both}.search-navigator-date-facet-selection .date-input-control-input{width:115px!important}.search-navigator-date-facet-selection-dropdown-left{float:left;border-bottom:none}.search-navigator-date-facet-selection-dropdown-right{float:right;border-bottom:none}.search-navigator-date-facet-selection-input-left{position:absolute;left:0;width:100px;visibility:hidden}.search-navigator-date-facet-selection-input-right{position:absolute;right:0;width:100px;visibility:hidden}.search-navigator-date-facet-selection .date-input-control:not(:first-of-type) .date-input-calendar{left:auto;right:0}.search-navigator-filters{position:relative;padding:5px 10px;background-color:#f3f3f3}.search-navigator-filters:after,.search-navigator-filters:before{display:table;content:\\\"\\\";line-height:0}.search-navigator-filters:after{clear:both}.search-navigator-filters-header{margin-bottom:12px;padding-bottom:11px;border-bottom:1px solid #e6e6e6}.search-navigator-intro{width:500px;margin:0 auto;padding-top:100px}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  className?: string;\n}\n\nexport default function BuiltInQualityGateBadge({ className }: Props) {\n  return (\n    <Tooltip overlay={translate('quality_gates.built_in.help')}>\n      <div className={classNames('badge', className)}>{translate('quality_gates.built_in')}</div>\n    </Tooltip>\n  );\n}\n"],"sourceRoot":""}