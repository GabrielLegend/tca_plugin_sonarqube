{"version":3,"sources":["webpack:///./src/main/js/apps/application-console/BranchSelectItem.tsx","webpack:///./src/main/js/apps/application-console/ProjectBranchRow.tsx","webpack:///./src/main/js/apps/application-console/CreateBranchForm.tsx","webpack:///./src/main/js/apps/application-console/BranchRowActions.tsx","webpack:///./src/main/js/apps/application-console/ApplicationProjectBranch.tsx","webpack:///./src/main/js/apps/application-console/ApplicationBranches.tsx","webpack:///./src/main/js/apps/application-console/ApplicationProjects.tsx","webpack:///./src/main/js/apps/application-console/EditForm.tsx","webpack:///./src/main/js/apps/application-console/ApplicationConsoleAppRenderer.tsx","webpack:///./src/main/js/apps/application-console/ApplicationConsoleApp.tsx","webpack:///./src/main/js/app/utils/addGlobalSuccessMessage.ts","webpack:///./src/main/js/api/application.ts","webpack:///./src/main/js/api/branches.ts"],"names":["handleMouseDown","event","preventDefault","stopPropagation","this","props","onSelect","option","handleMouseEnter","onFocus","handleMouseMove","isFocused","overlay","label","placement","className","onMouseDown","onMouseEnter","onMouseMove","role","node","mounted","state","loading","parseBranches","branches","b","isMain","name","map","branch","value","setCurrentTarget","target","handleChange","onChange","project","key","setState","selectedBranch","handleOpen","onOpen","length","then","branchesResult","checked","onCheck","onClose","options","enabled","id","qualifier","clearable","disabled","optionComponent","searchable","currentSelect","projects","selected","selectedBranches","stopLoading","canSubmit","hasUnselectedBranches","projectKey","includes","handleInputChange","currentTarget","handleFormSubmit","async","projectKeys","projectBranches","p","application","projectBranch","onUpdate","onCreate","handleProjectCheck","handleBranchChange","handleSelectorClose","classList","add","handleSelectorDirection","selectNode","elementCount","modalTop","getBoundingClientRect","top","modalHeight","offsetHeight","maxSelectHeight","Math","min","remove","renderProjectsList","undefined","enabledProjects","filter","enabledProjectsKey","forEach","isUpdating","header","onSubmit","size","onCloseClick","onFormSubmit","submitting","ref","htmlFor","autoFocus","maxLength","type","onClick","handleDelete","onUpdateBranches","handleUpdate","newBranchName","handleCloseForm","handleUpdateClick","confirmButtonText","isDestructive","modalBody","modalHeader","onConfirm","ActionsDropdown","destructive","ApplicationProjectBranch","creating","handleCreate","handleCreateFormClose","handleCreateClick","canCreateBranches","some","Boolean","createEnable","title","renderBranches","super","loadApplicationProjects","searchParams","lastSearchParams","applicationKey","page","ps","pageSize","q","query","fetchProjects","data","prevState","more","selectedProjects","disabledProjects","dealWithProjects","needToReload","projectsTotalCount","paging","total","newSelectedProjects","handleSelect","find","onAddProject","handleUnselect","onRemoveProject","renderElement","SelectList","Selected","prevProps","disabledElements","elements","elementsTotalCount","All","onSearch","onUnselect","selectedElements","withPaging","handleNameChange","handleDescriptionChange","description","onEdit","ApplicationConsoleAppRenderer","editing","setEditing","onRefresh","updateApplicationState","buildNewFields","fetchDetails","component","handleRefreshClick","addGlobalSuccessMessage","handleEdit","handleAddProject","prevApp","handleRemoveProject","handleUpdateBranches","message","dispatch","getApplicationLeak","r","leaks","getApplicationDetails","addApplicationBranch","catch","updateApplicationBranch","deleteApplicationBranch","getApplicationProjects","addProjectToApplication","removeProjectFromApplication","refreshApplication","createApplication","visibility","deleteApplication","editApplication","getBranches","getPullRequests","pullRequests","deleteBranch","deletePullRequest","renameBranch","excludeBranchFromPurge","branchName","excluded"],"mappings":"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","file":"js/345.m.055915d8.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\n\nexport interface Option {\n  label: string;\n  type: string;\n  value: string;\n}\n\ninterface Props {\n  option: Option;\n  children?: React.ReactNode;\n  className?: string;\n  isFocused?: boolean;\n  onFocus: (option: Option, event: React.SyntheticEvent<HTMLElement>) => void;\n  onSelect: (option: Option, event: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nexport default class BranchSelectItem extends React.PureComponent<Props> {\n  handleMouseDown = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.onSelect(this.props.option, event);\n  };\n\n  handleMouseEnter = (event: React.MouseEvent<HTMLElement>) => {\n    this.props.onFocus(this.props.option, event);\n  };\n\n  handleMouseMove = (event: React.MouseEvent<HTMLElement>) => {\n    if (this.props.isFocused) {\n      return;\n    }\n    this.props.onFocus(this.props.option, event);\n  };\n\n  render() {\n    const { option } = this.props;\n    return (\n      <Tooltip overlay={option.label} placement=\"left\">\n        <div\n          className={this.props.className}\n          onMouseDown={this.handleMouseDown}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseMove={this.handleMouseMove}\n          role=\"listitem\">\n          <div>\n            <BranchIcon className=\"little-spacer-right\" />\n            {option.label}\n          </div>\n        </div>\n      </Tooltip>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { orderBy } from 'lodash';\nimport * as React from 'react';\nimport Checkbox from 'sonar-ui-common/components/controls/Checkbox';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { getBranches } from '../../api/branches';\nimport { ApplicationProject } from '../../types/application';\nimport BranchSelectItem from './BranchSelectItem';\nimport { ApplicationBranch, SelectBranchOption } from './utils';\n\ninterface Props {\n  checked: boolean;\n  onChange: (projectKey: string, branch: SelectBranchOption) => void;\n  onCheck: (checked: boolean, id?: string) => void;\n  onClose: () => void;\n  onOpen: (selectNode: HTMLElement, elementCount: number) => void;\n  project: ApplicationProject;\n}\n\ninterface State {\n  branches?: SelectBranchOption[];\n  loading: boolean;\n  selectedBranch?: SelectBranchOption;\n}\n\nexport default class ProjectBranchRow extends React.PureComponent<Props, State> {\n  node?: HTMLElement | null = null;\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  parseBranches = (branches: Array<ApplicationBranch>) => {\n    return orderBy(branches, [b => b.isMain, b => b.name]).map(branch => {\n      return { value: branch.name, label: branch.name, isMain: branch.isMain };\n    });\n  };\n\n  setCurrentTarget = (event: React.FocusEvent<HTMLInputElement>) => {\n    this.node = event.target;\n  };\n\n  handleChange = (value: SelectBranchOption) => {\n    this.props.onChange(this.props.project.key, value);\n    this.setState({ selectedBranch: value });\n  };\n\n  handleOpen = () => {\n    if (this.state.branches && this.node) {\n      this.props.onOpen(this.node, this.state.branches.length);\n      return;\n    }\n\n    const { project } = this.props;\n    this.setState({ loading: true });\n    getBranches(project.key).then(\n      branchesResult => {\n        const branches = this.parseBranches(branchesResult);\n        if (this.node) {\n          this.props.onOpen(this.node, branches.length);\n        }\n        if (this.mounted) {\n          this.setState({ branches, loading: false });\n        }\n      },\n      () => {\n        /* Fail silently*/\n      }\n    );\n  };\n\n  render() {\n    const { checked, onCheck, onClose, project } = this.props;\n    const options = this.state.branches || [\n      { value: project.branch, label: project.branch, isMain: project.isMain }\n    ];\n    const value = project.enabled\n      ? this.state.selectedBranch || project.branch\n      : this.state.selectedBranch;\n    return (\n      <tr key={project.key}>\n        <td className=\"text-center\">\n          <Checkbox checked={checked} id={project.key} onCheck={onCheck} />\n        </td>\n        <td className=\"nowrap hide-overflow branch-name-row\">\n          <Tooltip overlay={project.name}>\n            <span>\n              <QualifierIcon qualifier=\"TRK\" /> {project.name}\n            </span>\n          </Tooltip>\n        </td>\n        <td>\n          <Select\n            className=\"width100\"\n            clearable={false}\n            disabled={!checked}\n            onChange={this.handleChange}\n            onClose={onClose}\n            onFocus={this.setCurrentTarget}\n            onOpen={this.handleOpen}\n            optionComponent={BranchSelectItem}\n            options={options}\n            searchable={false}\n            value={value}\n          />\n          <DeferredSpinner className=\"project-branch-row-spinner\" loading={this.state.loading} />\n        </td>\n      </tr>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { some, without } from 'lodash';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport SimpleModal from 'sonar-ui-common/components/controls/SimpleModal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  addApplicationBranch,\n  getApplicationDetails,\n  updateApplicationBranch\n} from '../../api/application';\nimport { Application, ApplicationProject } from '../../types/application';\nimport ProjectBranchRow from './ProjectBranchRow';\nimport { ApplicationBranch, SelectBranchOption } from './utils';\n\ninterface Props {\n  application: Application;\n  branch?: ApplicationBranch;\n  enabledProjectsKey: string[];\n  onClose: () => void;\n  onCreate?: (branch: ApplicationBranch) => void;\n  onUpdate?: (name: string) => void;\n}\n\ninterface BranchesList {\n  [name: string]: SelectBranchOption | null;\n}\n\ninterface State {\n  loading: boolean;\n  name: string;\n  projects: ApplicationProject[];\n  selected: string[];\n  selectedBranches: BranchesList;\n}\n\nconst MAX_PROJECTS_HEIGHT = 220;\nconst PROJECT_HEIGHT = 22;\nexport default class CreateBranchForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  node?: HTMLElement | null = null;\n  currentSelect?: HTMLElement | null = null;\n\n  state: State = {\n    loading: false,\n    name: '',\n    projects: [],\n    selected: [],\n    selectedBranches: {}\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    const { application } = this.props;\n    const branch = this.props.branch ? this.props.branch.name : undefined;\n    this.setState({ loading: true });\n    getApplicationDetails(application.key, branch).then(\n      ({ projects }) => {\n        if (this.mounted) {\n          const enabledProjects = projects.filter(p =>\n            this.props.enabledProjectsKey.includes(p.key)\n          );\n          const selected = enabledProjects.filter(p => p.selected).map(p => p.key);\n          const selectedBranches: BranchesList = {};\n          enabledProjects.forEach(p => {\n            if (!p.enabled) {\n              selectedBranches[p.key] = null;\n            } else {\n              selectedBranches[p.key] = {\n                value: p.branch || '',\n                label: p.branch || '',\n                isMain: p.isMain || false\n              };\n            }\n          });\n          this.setState({\n            name: branch || '',\n            selected,\n            loading: false,\n            projects: enabledProjects,\n            selectedBranches\n          });\n        }\n      },\n      () => {\n        this.props.onClose();\n      }\n    );\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  stopLoading = () => {\n    if (this.mounted) {\n      this.setState({ loading: false });\n    }\n  };\n\n  canSubmit = () => {\n    const hasUnselectedBranches = some(this.state.selectedBranches, (branch, projectKey) => {\n      return !branch && this.state.selected.includes(projectKey);\n    });\n    return (\n      !this.state.loading &&\n      this.state.name.length > 0 &&\n      !hasUnselectedBranches &&\n      this.state.selected.length > 0\n    );\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleFormSubmit = async () => {\n    const projectKeys = this.state.selected;\n\n    const projectBranches = projectKeys.map(p => {\n      const branch = this.state.selectedBranches[p];\n      return !branch || branch.isMain ? '' : branch.value;\n    });\n\n    if (this.props.branch) {\n      await updateApplicationBranch({\n        application: this.props.application.key,\n        branch: this.props.branch.name,\n        name: this.state.name,\n        project: projectKeys,\n        projectBranch: projectBranches\n      });\n      if (this.props.onUpdate) {\n        this.props.onUpdate(this.state.name);\n      }\n    } else {\n      await addApplicationBranch({\n        application: this.props.application.key,\n        branch: this.state.name,\n        project: projectKeys,\n        projectBranch: projectBranches\n      });\n      if (this.props.onCreate) {\n        this.props.onCreate({ name: this.state.name, isMain: false });\n      }\n    }\n    this.props.onClose();\n  };\n\n  handleProjectCheck = (checked: boolean, key: string) => {\n    this.setState(state => ({\n      selected: checked ? [...state.selected, key] : without(state.selected, key)\n    }));\n  };\n\n  handleBranchChange = (projectKey: string, branch: SelectBranchOption) => {\n    this.setState(state => ({\n      selectedBranches: { ...state.selectedBranches, [projectKey]: branch }\n    }));\n  };\n\n  handleSelectorClose = () => {\n    if (this.node) {\n      this.node.classList.add('selector-hidden');\n    }\n  };\n\n  handleSelectorDirection = (selectNode: HTMLElement, elementCount: number) => {\n    if (this.node) {\n      const modalTop = this.node.getBoundingClientRect().top;\n      const modalHeight = this.node.offsetHeight;\n      const maxSelectHeight = Math.min(MAX_PROJECTS_HEIGHT, (elementCount + 1) * PROJECT_HEIGHT);\n      const selectBottom = selectNode.getBoundingClientRect().top + maxSelectHeight;\n      if (selectBottom > modalTop + modalHeight) {\n        this.node.classList.add('inverted-direction');\n      } else {\n        this.node.classList.remove('inverted-direction');\n      }\n      this.node.classList.remove('selector-hidden');\n    }\n  };\n\n  renderProjectsList = () => {\n    return (\n      <>\n        <strong className=\"spacer-left spacer-top\">\n          {translate('application_console.branches.configuration')}\n        </strong>\n        <p className=\"spacer-top big-spacer-bottom spacer-left spacer-right\">\n          {translate('application_console.branches.create.help')}\n        </p>\n        <table className=\"data zebra\">\n          <thead>\n            <tr>\n              <th className=\"thin\" />\n              <th className=\"thin\">{translate('project')}</th>\n              <th>{translate('branch')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.projects.map(project => (\n              <ProjectBranchRow\n                checked={this.state.selected.includes(project.key)}\n                key={project.key}\n                onChange={this.handleBranchChange}\n                onCheck={this.handleProjectCheck}\n                onClose={this.handleSelectorClose}\n                onOpen={this.handleSelectorDirection}\n                project={project}\n              />\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n\n  render() {\n    const isUpdating = this.props.branch !== undefined;\n    const header = translate('application_console.branches', isUpdating ? 'update' : 'create');\n    return (\n      <SimpleModal\n        header={header}\n        onClose={this.props.onClose}\n        onSubmit={this.handleFormSubmit}\n        size=\"medium\">\n        {({ onCloseClick, onFormSubmit, submitting }) => (\n          <form className=\"views-form\" onSubmit={onFormSubmit}>\n            <div className=\"modal-head\">\n              <h2>{header}</h2>\n            </div>\n\n            <div\n              className=\"modal-body modal-container selector-hidden\"\n              ref={node => (this.node = node)}>\n              {this.state.loading ? (\n                <div className=\"text-center big-spacer-top big-spacer-bottom\">\n                  <i className=\"spinner spacer-right\" />\n                </div>\n              ) : (\n                <>\n                  <MandatoryFieldsExplanation className=\"modal-field\" />\n                  <div className=\"modal-field\">\n                    <label htmlFor=\"view-edit-name\">\n                      {translate('name')}\n                      <MandatoryFieldMarker />\n                    </label>\n                    <input\n                      autoFocus={true}\n                      className=\"input-super-large\"\n                      maxLength={250}\n                      name=\"name\"\n                      onChange={this.handleInputChange}\n                      size={50}\n                      type=\"text\"\n                      value={this.state.name}\n                    />\n                  </div>\n                  {this.renderProjectsList()}\n                </>\n              )}\n            </div>\n\n            <div className=\"modal-foot\">\n              <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n              <SubmitButton disabled={submitting || !this.canSubmit()}>\n                {translate(\n                  'application_console.branches',\n                  isUpdating ? 'update' : 'create',\n                  'verb'\n                )}\n              </SubmitButton>\n              <ResetButtonLink onClick={onCloseClick}>\n                {translate('application_console.branches.cancel')}\n              </ResetButtonLink>\n            </div>\n          </form>\n        )}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { without } from 'lodash';\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport ConfirmButton from 'sonar-ui-common/components/controls/ConfirmButton';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteApplicationBranch } from '../../api/application';\nimport { Application } from '../../types/application';\nimport CreateBranchForm from './CreateBranchForm';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  application: Application;\n  branch: ApplicationBranch;\n  onUpdateBranches: (branches: Array<ApplicationBranch>) => void;\n}\n\ninterface State {\n  isUpdating: boolean;\n}\n\nexport default class BranchRowActions extends React.PureComponent<Props, State> {\n  state: State = { isUpdating: false };\n\n  handleDelete = () => {\n    const { application, branch } = this.props;\n    return deleteApplicationBranch(application.key, branch.name).then(() => {\n      this.props.onUpdateBranches(without(application.branches, branch));\n    });\n  };\n\n  handleUpdate = (newBranchName: string) => {\n    this.props.onUpdateBranches(\n      this.props.application.branches.map(branch => {\n        if (branch.name === this.props.branch.name) {\n          branch.name = newBranchName;\n        }\n        return branch;\n      })\n    );\n  };\n\n  handleCloseForm = () => {\n    this.setState({ isUpdating: false });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({ isUpdating: true });\n  };\n\n  render() {\n    return (\n      <>\n        <ConfirmButton\n          confirmButtonText={translate('delete')}\n          isDestructive={true}\n          modalBody={translateWithParameters(\n            'application_console.branches.delete.warning_x',\n            this.props.branch.name\n          )}\n          modalHeader={translate('application_console.branches.delete')}\n          onConfirm={this.handleDelete}>\n          {({ onClick }) => (\n            <ActionsDropdown>\n              <ActionsDropdownItem onClick={this.handleUpdateClick}>\n                {translate('edit')}\n              </ActionsDropdownItem>\n              <ActionsDropdownItem destructive={true} onClick={onClick}>\n                {translate('delete')}\n              </ActionsDropdownItem>\n            </ActionsDropdown>\n          )}\n        </ConfirmButton>\n\n        {this.state.isUpdating && (\n          <CreateBranchForm\n            application={this.props.application}\n            branch={this.props.branch}\n            enabledProjectsKey={this.props.application.projects\n              .filter(p => p.enabled)\n              .map(p => p.key)}\n            onClose={this.handleCloseForm}\n            onUpdate={this.handleUpdate}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\nimport BranchRowActions from './BranchRowActions';\nimport { ApplicationBranch } from './utils';\n\nexport interface ApplicationProjectBranchProps {\n  application: Application;\n  branch: ApplicationBranch;\n  onUpdateBranches: (branches: Array<ApplicationBranch>) => void;\n}\n\nexport default function ApplicationProjectBranch(props: ApplicationProjectBranchProps) {\n  const { application, branch } = props;\n  return (\n    <tr>\n      <td>\n        <BranchIcon className=\"little-spacer-right\" />\n        {branch.name}\n        {branch.isMain && (\n          <span className=\"badge spacer-left\">\n            {translate('application_console.branches.main_branch')}\n          </span>\n        )}\n      </td>\n      <td className=\"thin nowrap\">\n        {!branch.isMain && (\n          <BranchRowActions\n            application={application}\n            branch={branch}\n            onUpdateBranches={props.onUpdateBranches}\n          />\n        )}\n      </td>\n    </tr>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\nimport ApplicationProjectBranch from './ApplicationProjectBranch';\nimport CreateBranchForm from './CreateBranchForm';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  application: Application;\n  onUpdateBranches: (branches: ApplicationBranch[]) => void;\n}\n\ninterface State {\n  creating: boolean;\n}\n\nexport default class ApplicationBranches extends React.PureComponent<Props, State> {\n  state: State = { creating: false };\n\n  handleCreate = (branch: ApplicationBranch) => {\n    this.props.onUpdateBranches([...this.props.application.branches, branch]);\n  };\n\n  handleCreateFormClose = () => {\n    this.setState({ creating: false });\n  };\n\n  handleCreateClick = () => {\n    this.setState({ creating: true });\n  };\n\n  canCreateBranches = () => {\n    return (\n      this.props.application.projects &&\n      this.props.application.projects.some(p => Boolean(p.enabled))\n    );\n  };\n\n  renderBranches(createEnable: boolean) {\n    const { application } = this.props;\n    if (!createEnable) {\n      return (\n        <div className=\"app-branches-list\">\n          <p className=\"text-center big-spacer-top\">\n            {translate('application_console.branches.no_branches')}\n          </p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"app-branches-list\">\n        <table className=\"data zebra\">\n          <tbody>\n            {application.branches.map(branch => (\n              <ApplicationProjectBranch\n                application={application}\n                branch={branch}\n                key={branch.name}\n                onUpdateBranches={this.props.onUpdateBranches}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    const { application } = this.props;\n    const createEnable = this.canCreateBranches();\n    return (\n      <div className=\"app-branches-console\">\n        <div className=\"boxed-group-actions\">\n          <Button disabled={!createEnable} onClick={this.handleCreateClick}>\n            {translate('application_console.branches.create')}\n          </Button>\n        </div>\n        <h2\n          className=\"text-limited big-spacer-top\"\n          title={translate('application_console.branches')}>\n          {translate('application_console.branches')}\n        </h2>\n        <p>{translate('application_console.branches.help')}</p>\n\n        {this.renderBranches(createEnable)}\n\n        {this.state.creating && (\n          <CreateBranchForm\n            application={application}\n            enabledProjectsKey={application.projects.map(p => p.key)}\n            onClose={this.handleCreateFormClose}\n            onCreate={this.handleCreate}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { find, without } from 'lodash';\nimport * as React from 'react';\nimport SelectList, {\n  SelectListFilter,\n  SelectListSearchParams\n} from 'sonar-ui-common/components/controls/SelectList';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport {\n  addProjectToApplication,\n  getApplicationProjects,\n  removeProjectFromApplication\n} from '../../api/application';\nimport { Application, ApplicationProject } from '../../types/application';\n\ninterface Props {\n  onAddProject?: (project: ApplicationProject) => void;\n  onRemoveProject?: (projectKey: string) => void;\n  application: Application;\n}\n\ninterface State {\n  disabledProjects: string[];\n  lastSearchParams: SelectListSearchParams & { applicationKey: string };\n  needToReload: boolean;\n  projects: Array<ApplicationProject>;\n  projectsTotalCount?: number;\n  selectedProjects: string[];\n}\n\nexport default class ApplicationProjects extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      disabledProjects: [],\n      lastSearchParams: {\n        applicationKey: props.application.key,\n        query: '',\n        filter: SelectListFilter.Selected\n      },\n      needToReload: false,\n      projects: [],\n      selectedProjects: []\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.application.key !== this.props.application.key) {\n      this.setState(\n        prevState => {\n          return {\n            lastSearchParams: {\n              ...prevState.lastSearchParams,\n              applicationKey: this.props.application.key\n            }\n          };\n        },\n        () => this.fetchProjects(this.state.lastSearchParams)\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  loadApplicationProjects = (searchParams: SelectListSearchParams) =>\n    getApplicationProjects({\n      application: this.state.lastSearchParams.applicationKey,\n      p: searchParams.page,\n      ps: searchParams.pageSize,\n      q: searchParams.query !== '' ? searchParams.query : undefined,\n      selected: searchParams.filter\n    });\n\n  fetchProjects = (searchParams: SelectListSearchParams) =>\n    this.loadApplicationProjects(searchParams).then(data => {\n      if (this.mounted) {\n        this.setState(prevState => {\n          const more = searchParams.page != null && searchParams.page > 1;\n\n          const { projects, selectedProjects, disabledProjects } = this.dealWithProjects(\n            data,\n            more,\n            prevState\n          );\n\n          return {\n            disabledProjects,\n            lastSearchParams: { ...prevState.lastSearchParams, ...searchParams },\n            needToReload: false,\n            projects,\n            projectsTotalCount: data.paging.total,\n            selectedProjects\n          };\n        });\n      }\n    });\n\n  dealWithProjects = (\n    data: { projects: Array<ApplicationProject>; paging: T.Paging },\n    more: boolean,\n    prevState: Readonly<State>\n  ) => {\n    const projects = more ? [...prevState.projects, ...data.projects] : data.projects;\n\n    const newSelectedProjects = data.projects\n      .filter(project => project.selected)\n      .map(project => project.key);\n    const selectedProjects = more\n      ? [...prevState.selectedProjects, ...newSelectedProjects]\n      : newSelectedProjects;\n\n    const disabledProjects = more ? [...prevState.disabledProjects] : [];\n\n    return {\n      disabledProjects,\n      projects,\n      selectedProjects\n    };\n  };\n\n  handleSelect = (projectKey: string) => {\n    return addProjectToApplication(this.props.application.key, projectKey).then(() => {\n      if (this.mounted) {\n        this.setState(state => {\n          const project = state.projects.find(p => p.key === projectKey);\n          if (project && this.props.onAddProject) {\n            this.props.onAddProject(project);\n          }\n          return {\n            needToReload: true,\n            selectedProjects: [...state.selectedProjects, projectKey]\n          };\n        });\n      }\n    });\n  };\n\n  handleUnselect = (projectKey: string) => {\n    return removeProjectFromApplication(this.props.application.key, projectKey).then(() => {\n      if (this.mounted) {\n        this.setState(state => {\n          if (this.props.onRemoveProject) {\n            this.props.onRemoveProject(projectKey);\n          }\n          return {\n            needToReload: true,\n            selectedProjects: without(state.selectedProjects, projectKey)\n          };\n        });\n      }\n    });\n  };\n\n  renderElement = (projectKey: string) => {\n    const project = find(this.state.projects, { key: projectKey });\n    if (project === undefined) {\n      return '';\n    }\n\n    return (\n      <div className=\"views-project-item display-flex-center\">\n        <QualifierIcon className=\"spacer-right\" qualifier=\"TRK\" />\n        <div>\n          <div title={project.name}>{project.name}</div>\n          <div className=\"note\">{project.key}</div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { projects, selectedProjects } = this.state;\n\n    return (\n      <SelectList\n        disabledElements={this.state.disabledProjects}\n        elements={projects.map(project => project.key)}\n        elementsTotalCount={this.state.projectsTotalCount}\n        needToReload={\n          this.state.needToReload &&\n          this.state.lastSearchParams &&\n          this.state.lastSearchParams.filter !== SelectListFilter.All\n        }\n        onSearch={this.fetchProjects}\n        onSelect={this.handleSelect}\n        onUnselect={this.handleUnselect}\n        renderElement={this.renderElement}\n        selectedElements={selectedProjects}\n        withPaging={true}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport SimpleModal from 'sonar-ui-common/components/controls/SimpleModal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\n\ninterface Props {\n  header: string;\n  onClose: () => void;\n  onEdit: (name: string, description: string) => Promise<void>;\n  application: Application;\n}\n\ninterface State {\n  description: string;\n  name: string;\n}\n\nexport default class EditForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      description: props.application.description || '',\n      name: props.application.name\n    };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ description: event.currentTarget.value });\n  };\n\n  handleFormSubmit = async () => {\n    await this.props.onEdit(this.state.name, this.state.description);\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <SimpleModal\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onSubmit={this.handleFormSubmit}\n        size=\"small\">\n        {({ onCloseClick, onFormSubmit, submitting }) => (\n          <form onSubmit={onFormSubmit}>\n            <div className=\"modal-head\">\n              <h2>{this.props.header}</h2>\n            </div>\n\n            <div className=\"modal-body\">\n              <div className=\"modal-field\">\n                <label htmlFor=\"view-edit-name\">{translate('name')}</label>\n                <input\n                  autoFocus={true}\n                  id=\"view-edit-name\"\n                  maxLength={100}\n                  name=\"name\"\n                  onChange={this.handleNameChange}\n                  size={50}\n                  type=\"text\"\n                  value={this.state.name}\n                />\n              </div>\n              <div className=\"modal-field\">\n                <label htmlFor=\"view-edit-description\">{translate('description')}</label>\n                <textarea\n                  id=\"view-edit-description\"\n                  name=\"description\"\n                  onChange={this.handleDescriptionChange}\n                  value={this.state.description}\n                />\n              </div>\n            </div>\n\n            <div className=\"modal-foot\">\n              <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n              <SubmitButton disabled={submitting || !this.state.name.length}>\n                {translate('save')}\n              </SubmitButton>\n              <ResetButtonLink onClick={onCloseClick}>{translate('cancel')}</ResetButtonLink>\n            </div>\n          </form>\n        )}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application, ApplicationProject } from '../../types/application';\nimport { Branch } from '../../types/branch-like';\nimport ApplicationBranches from './ApplicationBranches';\nimport ApplicationProjects from './ApplicationProjects';\nimport EditForm from './EditForm';\n\nexport interface ApplicationConsoleAppRendererProps {\n  loading: boolean;\n  application: Application;\n  onAddProject: (project: ApplicationProject) => void;\n  onRefresh: () => void;\n  onEdit: (name: string, description: string) => Promise<void>;\n  onRemoveProject: (projectKey: string) => void;\n  onUpdateBranches: (branches: Branch[]) => void;\n}\n\nexport default function ApplicationConsoleAppRenderer(props: ApplicationConsoleAppRendererProps) {\n  const [editing, setEditing] = React.useState(false);\n\n  const { application, loading } = props;\n\n  if (loading) {\n    return <i className=\"spinner spacer\" />;\n  }\n\n  return (\n    <div className=\"page page-limited\">\n      <div className=\"boxed-group\" id=\"view-details\">\n        <div className=\"boxed-group-actions\">\n          <Button\n            className=\"little-spacer-right\"\n            id=\"view-details-edit\"\n            onClick={() => setEditing(true)}>\n            {translate('edit')}\n          </Button>\n          <Button className=\"little-spacer-right\" onClick={props.onRefresh}>\n            {translate('application_console.recompute')}\n          </Button>\n        </div>\n\n        <header className=\"boxed-group-header\" id=\"view-details-header\">\n          <h2 className=\"text-limited\" title={application.name}>\n            {application.name}\n          </h2>\n        </header>\n\n        <div className=\"boxed-group-inner\" id=\"view-details-content\">\n          <div className=\"big-spacer-bottom\">\n            {application.description && (\n              <div className=\"little-spacer-bottom\">{application.description}</div>\n            )}\n            <div className=\"subtitle\">\n              {translate('key')}: {application.key}\n            </div>\n          </div>\n\n          <ApplicationProjects\n            onAddProject={props.onAddProject}\n            onRemoveProject={props.onRemoveProject}\n            application={application}\n          />\n\n          <ApplicationBranches\n            application={application}\n            onUpdateBranches={props.onUpdateBranches}\n          />\n        </div>\n\n        {editing && (\n          <EditForm\n            header={translate('portfolios.edit_application')}\n            onClose={() => setEditing(false)}\n            onEdit={props.onEdit}\n            application={application}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Location } from 'history';\nimport * as React from 'react';\nimport { InjectedRouter } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { editApplication, getApplicationDetails, refreshApplication } from '../../api/application';\nimport addGlobalSuccessMessage from '../../app/utils/addGlobalSuccessMessage';\nimport { Application, ApplicationProject } from '../../types/application';\nimport ApplicationConsoleAppRenderer from './ApplicationConsoleAppRenderer';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  component: { key: string };\n  location: Location;\n  router: Pick<InjectedRouter, 'replace'>;\n}\n\ninterface State {\n  application?: Application;\n  loading: boolean;\n}\n\nexport default class ApplicationConsoleApp extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchDetails();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.component.key !== this.props.component.key) {\n      this.fetchDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  updateApplicationState = (buildNewFields: (prevApp: Application) => Partial<Application>) => {\n    this.setState(state => {\n      if (state.application) {\n        return { application: { ...state.application, ...buildNewFields(state.application) } };\n      } else {\n        return null;\n      }\n    });\n  };\n\n  fetchDetails = async () => {\n    try {\n      const application = await getApplicationDetails(this.props.component.key);\n      if (this.mounted) {\n        this.setState({ application, loading: false });\n      }\n    } catch {\n      if (this.mounted) {\n        this.setState({ loading: false });\n      }\n    }\n  };\n\n  handleRefreshClick = async () => {\n    if (this.state.application) {\n      await refreshApplication(this.state.application.key);\n      addGlobalSuccessMessage(translate('application_console.refresh_started'));\n    }\n  };\n\n  handleEdit = async (name: string, description: string) => {\n    if (this.state.application) {\n      await editApplication(this.state.application.key, name, description);\n    }\n    if (this.mounted) {\n      this.updateApplicationState(() => ({ name, description }));\n    }\n  };\n\n  handleAddProject = (project: ApplicationProject) => {\n    this.updateApplicationState(prevApp => ({ projects: [...prevApp.projects, project] }));\n  };\n\n  handleRemoveProject = (projectKey: string) => {\n    this.updateApplicationState(prevApp => ({\n      projects: prevApp.projects.filter(p => p.key !== projectKey)\n    }));\n  };\n\n  handleUpdateBranches = (branches: ApplicationBranch[]) => {\n    this.updateApplicationState(() => ({ branches }));\n  };\n\n  render() {\n    const { application, loading } = this.state;\n    if (!application) {\n      // when application is not found\n      return null;\n    }\n\n    return (\n      <ApplicationConsoleAppRenderer\n        loading={loading}\n        application={application}\n        onAddProject={this.handleAddProject}\n        onEdit={this.handleEdit}\n        onRefresh={this.handleRefreshClick}\n        onRemoveProject={this.handleRemoveProject}\n        onUpdateBranches={this.handleUpdateBranches}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as globalMessages from '../../store/globalMessages';\nimport getStore from './getStore';\n\nexport default function addGlobalSuccessMessage(message: string): void {\n  const store = getStore();\n  store.dispatch(globalMessages.addGlobalSuccessMessage(message));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Application, ApplicationPeriod, ApplicationProject } from '../types/application';\nimport { Visibility } from '../types/component';\n\nexport function getApplicationLeak(\n  application: string,\n  branch?: string\n): Promise<ApplicationPeriod[]> {\n  return getJSON('/api/applications/show_leak', { application, branch }).then(\n    r => r.leaks,\n    throwGlobalError\n  );\n}\n\nexport function getApplicationDetails(application: string, branch?: string): Promise<Application> {\n  return getJSON('/api/applications/show', { application, branch }).then(\n    r => r.application,\n    throwGlobalError\n  );\n}\n\nexport function addApplicationBranch(data: {\n  application: string;\n  branch: string;\n  project: string[];\n  projectBranch: string[];\n}) {\n  return post('/api/applications/create_branch', data).catch(throwGlobalError);\n}\n\nexport function updateApplicationBranch(data: {\n  application: string;\n  branch: string;\n  name: string;\n  project: string[];\n  projectBranch: string[];\n}) {\n  return post('/api/applications/update_branch', data).catch(throwGlobalError);\n}\n\nexport function deleteApplicationBranch(application: string, branch: string) {\n  return post('/api/applications/delete_branch', { application, branch }).catch(throwGlobalError);\n}\n\nexport function getApplicationProjects(data: {\n  application: string;\n  p?: number;\n  ps?: number;\n  q?: string;\n  selected: string;\n}): Promise<{ paging: T.Paging; projects: ApplicationProject[] }> {\n  return getJSON('/api/applications/search_projects', data).catch(throwGlobalError);\n}\n\nexport function addProjectToApplication(application: string, project: string) {\n  return post('/api/applications/add_project', { application, project }).catch(throwGlobalError);\n}\n\nexport function removeProjectFromApplication(application: string, project: string) {\n  return post('/api/applications/remove_project', { application, project }).catch(throwGlobalError);\n}\n\nexport function refreshApplication(key: string) {\n  return post('/api/applications/refresh', { key }).catch(throwGlobalError);\n}\n\nexport function createApplication(\n  name: string,\n  description: string,\n  key: string | undefined,\n  visibility: string\n): Promise<{\n  application: {\n    description?: string;\n    key: string;\n    name: string;\n    visibility: Visibility;\n  };\n}> {\n  return postJSON('/api/applications/create', { description, key, name, visibility }).catch(\n    throwGlobalError\n  );\n}\n\nexport function deleteApplication(application: string) {\n  return post('/api/applications/delete', { application }).catch(throwGlobalError);\n}\n\nexport function editApplication(application: string, name: string, description: string) {\n  return post('/api/applications/update', { name, description, application }).catch(\n    throwGlobalError\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Branch, PullRequest } from '../types/branch-like';\n\nexport function getBranches(project: string): Promise<Branch[]> {\n  return getJSON('/api/project_branches/list', { project }).then(r => r.branches, throwGlobalError);\n}\n\nexport function getPullRequests(project: string): Promise<PullRequest[]> {\n  return getJSON('/api/project_pull_requests/list', { project }).then(\n    r => r.pullRequests,\n    throwGlobalError\n  );\n}\n\nexport function deleteBranch(data: { branch: string; project: string }) {\n  return post('/api/project_branches/delete', data).catch(throwGlobalError);\n}\n\nexport function deletePullRequest(data: { project: string; pullRequest: string }) {\n  return post('/api/project_pull_requests/delete', data).catch(throwGlobalError);\n}\n\nexport function renameBranch(project: string, name: string) {\n  return post('/api/project_branches/rename', { project, name }).catch(throwGlobalError);\n}\n\nexport function excludeBranchFromPurge(projectKey: string, branchName: string, excluded: boolean) {\n  return post('/api/project_branches/set_automatic_deletion_protection', {\n    project: projectKey,\n    branch: branchName,\n    value: excluded\n  }).catch(throwGlobalError);\n}\n"],"sourceRoot":""}