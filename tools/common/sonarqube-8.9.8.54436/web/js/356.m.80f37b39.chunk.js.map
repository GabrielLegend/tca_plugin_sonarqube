{"version":3,"sources":["webpack:///./src/main/js/apps/overview/pullRequests/AfterMergeEstimate.tsx","webpack:///./src/main/js/apps/overview/pullRequests/LargeQualityGateBadge.tsx","webpack:///./src/main/js/apps/overview/pullRequests/PullRequestOverview.tsx","webpack:///./node_modules/lodash/differenceBy.js"],"names":["className","measures","type","afterMergeMetric","measure","undefined","value","component","level","success","path","qualityGate","key","failed","overlay","defaultMessage","id","values","link","to","fill","transparentWhite","size","mounted","state","loading","conditionsHaveChanged","prevProps","prevConditions","conditions","newConditions","this","props","diff","filter","c","metric","length","fetchBranchStatusData","branchLike","fetchBranchStatus","fetchBranchData","setState","metricKeys","map","then","metrics","ignoredConditions","status","failedConditions","condition","Alert","display","variant","QualityGateConditions","collapsible","Bug","Vulnerability","SecurityHotspot","CodeSmell","IssueLabel","useDiffMetric","IssueRating","Coverage","Duplication","MeasurementLabel","mapDispatchToProps","baseDifference","baseFlatten","baseIteratee","baseRest","isArrayLikeObject","last","differenceBy","array","iteratee","module","exports"],"mappings":"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","file":"js/356.m.80f37b39.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { findMeasure } from '../../../helpers/measures';\nimport { getMeasurementAfterMergeMetricKey, MeasurementType } from '../utils';\n\nexport interface AfterMergeEstimateProps {\n  className?: string;\n  measures: T.MeasureEnhanced[];\n  type: MeasurementType;\n}\n\nexport function AfterMergeEstimate({ className, measures, type }: AfterMergeEstimateProps) {\n  const afterMergeMetric = getMeasurementAfterMergeMetricKey(type);\n\n  const measure = findMeasure(measures, afterMergeMetric);\n\n  if (!measure || measure.value === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(className, 'display-flex-center')}>\n      <span className=\"huge\">{formatMeasure(measure.value, 'PERCENT')}</span>\n      <span className=\"label flex-1 spacer-left text-right\">\n        {translate('component_measures.facet_category.overall_category.estimated')}\n      </span>\n    </div>\n  );\n}\n\nexport default React.memo(AfterMergeEstimate);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport HelpIcon from 'sonar-ui-common/components/icons/HelpIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getQualityGatesUrl, getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  component: T.Component;\n  level?: T.Status;\n}\n\nexport function LargeQualityGateBadge({ component, level }: Props) {\n  const success = level === 'OK';\n\n  const path =\n    component.qualityGate === undefined\n      ? getQualityGatesUrl()\n      : getQualityGateUrl(component.qualityGate.key);\n\n  return (\n    <div\n      className={classNames('overview-quality-gate-badge-large small', {\n        failed: !success,\n        success\n      })}>\n      <div className=\"display-flex-center\">\n        <span>{translate('overview.on_new_code_long')}</span>\n\n        <HelpTooltip\n          className=\"little-spacer-left\"\n          overlay={\n            <FormattedMessage\n              defaultMessage={translate('overview.quality_gate.conditions_on_new_code')}\n              id=\"overview.quality_gate.conditions_on_new_code\"\n              values={{\n                link: <Link to={path}>{translate('overview.quality_gate')}</Link>\n              }}\n            />\n          }>\n          <HelpIcon fill={colors.transparentWhite} size={12} />\n        </HelpTooltip>\n      </div>\n      {level !== undefined && (\n        <h3 className=\"huge-spacer-top huge\">{translate('metric.level', level)}</h3>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(LargeQualityGateBadge);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { differenceBy, uniq } from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { getMeasuresWithMetrics } from '../../../api/measures';\nimport { getBranchLikeQuery } from '../../../helpers/branch-like';\nimport { enhanceConditionWithMeasure, enhanceMeasuresWithMetrics } from '../../../helpers/measures';\nimport { fetchBranchStatus } from '../../../store/rootActions';\nimport { getBranchStatusByBranchLike, Store } from '../../../store/rootReducer';\nimport { BranchLike, PullRequest } from '../../../types/branch-like';\nimport { IssueType } from '../../../types/issues';\nimport { QualityGateStatusCondition } from '../../../types/quality-gates';\nimport IssueLabel from '../components/IssueLabel';\nimport IssueRating from '../components/IssueRating';\nimport MeasurementLabel from '../components/MeasurementLabel';\nimport QualityGateConditions from '../components/QualityGateConditions';\nimport '../styles.css';\nimport { MeasurementType, PR_METRICS } from '../utils';\nimport AfterMergeEstimate from './AfterMergeEstimate';\nimport LargeQualityGateBadge from './LargeQualityGateBadge';\n\ninterface StateProps {\n  conditions?: QualityGateStatusCondition[];\n  ignoredConditions?: boolean;\n  status?: T.Status;\n}\n\ninterface DispatchProps {\n  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => void;\n}\n\ninterface OwnProps {\n  branchLike: PullRequest;\n  component: T.Component;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\ninterface State {\n  loading: boolean;\n  measures: T.MeasureEnhanced[];\n}\n\nexport class PullRequestOverview extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false,\n    measures: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.props.conditions === undefined) {\n      this.fetchBranchStatusData();\n    } else {\n      this.fetchBranchData();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.conditionsHaveChanged(prevProps)) {\n      this.fetchBranchData();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  conditionsHaveChanged = (prevProps: Props) => {\n    const prevConditions = prevProps.conditions ?? [];\n    const newConditions = this.props.conditions ?? [];\n    const diff = differenceBy(\n      prevConditions.filter(c => c.level === 'ERROR'),\n      newConditions.filter(c => c.level === 'ERROR'),\n      c => c.metric\n    );\n\n    return (\n      (prevProps.conditions === undefined && this.props.conditions !== undefined) || diff.length > 0\n    );\n  };\n\n  fetchBranchStatusData = () => {\n    const {\n      branchLike,\n      component: { key }\n    } = this.props;\n    this.props.fetchBranchStatus(branchLike, key);\n  };\n\n  fetchBranchData = () => {\n    const {\n      branchLike,\n      component: { key },\n      conditions\n    } = this.props;\n\n    this.setState({ loading: true });\n\n    const metricKeys =\n      conditions !== undefined\n        ? // Also load metrics that apply to failing QG conditions.\n          uniq([...PR_METRICS, ...conditions.filter(c => c.level !== 'OK').map(c => c.metric)])\n        : PR_METRICS;\n\n    getMeasuresWithMetrics(key, metricKeys, getBranchLikeQuery(branchLike)).then(\n      ({ component, metrics }) => {\n        if (this.mounted && component.measures) {\n          this.setState({\n            loading: false,\n            measures: enhanceMeasuresWithMetrics(component.measures || [], metrics)\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike, component, conditions, ignoredConditions, status } = this.props;\n    const { loading, measures } = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"page page-limited\">\n          <i className=\"spinner\" />\n        </div>\n      );\n    }\n\n    if (conditions === undefined) {\n      return null;\n    }\n\n    const failedConditions = conditions\n      .filter(condition => condition.level === 'ERROR')\n      .map(c => enhanceConditionWithMeasure(c, measures))\n      .filter(isDefined);\n\n    return (\n      <div className=\"page page-limited\">\n        <div\n          className={classNames('pr-overview', {\n            'has-conditions': failedConditions.length > 0\n          })}>\n          {ignoredConditions && (\n            <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">\n              <span className=\"text-middle\">\n                {translate('overview.quality_gate.ignored_conditions')}\n              </span>\n              <HelpTooltip\n                className=\"spacer-left\"\n                overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}\n              />\n            </Alert>\n          )}\n          <div className=\"display-flex-row\">\n            <div className=\"big-spacer-right\">\n              <h2 className=\"overview-panel-title spacer-bottom small display-inline-flex-center\">\n                {translate('overview.quality_gate')}\n                <HelpTooltip\n                  className=\"little-spacer-left\"\n                  overlay={\n                    <div className=\"big-padded-top big-padded-bottom\">\n                      {translate('overview.quality_gate.help')}\n                    </div>\n                  }\n                />\n              </h2>\n              <LargeQualityGateBadge component={component} level={status} />\n            </div>\n\n            {failedConditions.length > 0 && (\n              <div className=\"pr-overview-failed-conditions big-spacer-right\">\n                <h2 className=\"overview-panel-title spacer-bottom small\">\n                  {translate('overview.failed_conditions')}\n                </h2>\n                <QualityGateConditions\n                  branchLike={branchLike}\n                  collapsible={true}\n                  component={component}\n                  failedConditions={failedConditions}\n                />\n              </div>\n            )}\n\n            <div className=\"flex-1\">\n              <h2 className=\"overview-panel-title spacer-bottom small\">\n                {translate('overview.measures')}\n              </h2>\n\n              <div className=\"overview-panel-content\">\n                {[\n                  IssueType.Bug,\n                  IssueType.Vulnerability,\n                  IssueType.SecurityHotspot,\n                  IssueType.CodeSmell\n                ].map((type: IssueType) => (\n                  <div className=\"overview-measures-row display-flex-row\" key={type}>\n                    <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                      <IssueLabel\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                    <div className=\"overview-panel-big-padded overview-measures-aside display-flex-center\">\n                      <IssueRating\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                  </div>\n                ))}\n\n                {[MeasurementType.Coverage, MeasurementType.Duplication].map(\n                  (type: MeasurementType) => (\n                    <div className=\"overview-measures-row display-flex-row\" key={type}>\n                      <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                        <MeasurementLabel\n                          branchLike={branchLike}\n                          component={component}\n                          measures={measures}\n                          type={type}\n                          useDiffMetric={true}\n                        />\n                      </div>\n\n                      <AfterMergeEstimate\n                        className=\"overview-panel-big-padded overview-measures-aside text-right overview-measures-emphasis\"\n                        measures={measures}\n                        type={type}\n                      />\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store, { branchLike, component }: Props) => {\n  const { conditions, ignoredConditions, status } = getBranchStatusByBranchLike(\n    state,\n    component.key,\n    branchLike\n  );\n  return { conditions, ignoredConditions, status };\n};\n\nconst mapDispatchToProps = { fetchBranchStatus: fetchBranchStatus as any };\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PullRequestOverview);\n","var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `iteratee` which\n * is invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n * // => [{ 'x': 2 }]\n */\nvar differenceBy = baseRest(function(array, values) {\n  var iteratee = last(values);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))\n    : [];\n});\n\nmodule.exports = differenceBy;\n"],"sourceRoot":""}