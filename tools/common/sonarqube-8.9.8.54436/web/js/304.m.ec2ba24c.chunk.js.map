{"version":3,"sources":["webpack:///./src/main/js/apps/projectBaseline/styles.css?25cb","webpack:///./src/main/js/apps/projectBaseline/styles.css","webpack:///./src/main/js/apps/projectBaseline/components/AppHeader.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingAnalysis.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingReferenceBranch.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchAnalysisListRenderer.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchAnalysisList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchBaselineSettingModal.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchListRow.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/ProjectBaselineSelector.tsx","webpack:///./src/main/js/apps/projectBaseline/components/App.tsx","webpack:///./src/main/js/apps/projectBaseline/components/AppContainer.ts","webpack:///./src/main/js/app/components/embed-docs-modal/Suggestions.tsx","webpack:///./src/main/js/components/activity-graph/utils.ts","webpack:///./src/main/js/types/project-activity.ts","webpack:///./src/main/js/components/icons/BranchLikeIcon.tsx","webpack:///./src/main/js/apps/projectActivity/utils.ts","webpack:///./src/main/js/app/components/ComponentContext.tsx","webpack:///./src/main/js/api/projectActivity.ts","webpack:///./src/main/js/apps/projectActivity/components/DefinitionChangeEventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/RichQualityGateEventInner.tsx","webpack:///./src/main/js/api/newCodePeriod.ts","webpack:///./src/main/js/apps/projectBaseline/utils.ts","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingDays.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingPreviousVersion.tsx","webpack:///./src/main/js/apps/projectActivity/components/EventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/ChangeEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/RemoveEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/Event.tsx","webpack:///./src/main/js/apps/projectActivity/components/Events.tsx"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","AppHeader","props","canAdmin","className","defaultMessage","id","values","link","to","BaselineSettingAnalysis","disabled","onSelect","selected","onClick","title","renderBranchOption","option","isInvalid","overlay","value","undefined","isMain","BaselineSettingReferenceBranch","branchList","referenceBranch","settingLevel","currentBranch","find","b","htmlFor","autofocus","defaultOptions","minimumQueryLength","onSearch","q","Promise","resolve","filter","includes","onChangeReferenceBranch","renderOption","BranchAnalysisListRenderer","analyses","loading","range","selectedAnalysisKey","byVersionByDay","category","hasFilteredData","length","Object","keys","byDay","autoBlur","clearable","onChange","handleRangeChange","label","searchable","onScroll","handleScroll","ref","registerScrollableNode","map","version","idx","days","key","first","sticky","shouldStick","registerBadgeNode","mouseEnterDelay","day","Number","date","long","analysis","args","isFirst","onSelectAnalysis","valueOf","formattedTime","dateTime","toISOString","events","Events","analysisKey","checked","onCheck","renderAnalysis","super","mounted","badges","state","scroll","e","currentTarget","this","updateScroll","scrollTop","setState","el","getAttribute","setAttribute","String","offsetTop","badge","fetchAnalyses","selectedNode","document","querySelector","scrollableNode","parent","bottomOffset","initial","branch","component","project","from","Date","then","result","a","scrollToSelected","branchToOption","name","handleSubmit","preventDefault","analysisDate","type","saving","onClose","effectiveValue","requestClose","handleSelectAnalysis","handleSelectDays","handleSelectReferenceBranch","handleSelectSetting","otherBranches","defaultBranch","getValueFromProps","newCodePeriod","header","currentSetting","currentSettingValue","isChanged","isValid","contentLabel","onRequestClose","size","onSubmit","role","BaselineSettingPreviousVersion","isDefault","BaselineSettingDays","onChangeDays","BranchListRow","existingBranches","inheritedSetting","settingWarning","branchInheritsItselfAsReference","referenceBranchDoesNotExist","BranchLikeIcon","branchLike","renderNewCodePeriodSetting","ActionsDropdown","onOpenEditModal","onResetToDefault","branches","updateBranchNewCodePeriod","newSetting","updated","slice","openEditModal","editedBranch","closeEditModal","resetToDefault","fetchBranches","branchLikes","branchSettings","newCodePeriods","ncp","inherited","branchesWithBaseline","branchKey","ProjectBaselineSelector","branchesEnabled","generalSetting","overrideGeneralSetting","onToggleSpecificSetting","setting","description","renderGeneralSetting","onSelectSetting","onSelectDays","onSelectReferenceBranch","invisible","Alert","variant","onCancel","DEFAULT_GENERAL_SETTING","resetSuccess","success","resetSetting","handleCancel","getUpdatedState","handleToggleSpecificSetting","fetchLeakPeriodSetting","sortAndFilterBranches","prevProps","params","defaultDays","Boolean","all","Suggestions","suggestions","Consumer","addSuggestions","removeSuggestions","SuggestionsInner","DEFAULT_GRAPH","issues","GRAPHS_METRICS_DISPLAYED","bugs","code_smells","vulnerabilities","coverage","lines_to_cover","uncovered_lines","duplications","ncloc","duplicated_lines","GRAPHS_METRICS","concat","reliability_rating","security_rating","sqale_rating","duplicated_lines_density","isCustomGraph","graph","custom","getGraphTypes","ignoreCustom","graphs","hasDataValues","serie","data","some","point","y","hasHistoryData","series","getSeriesMetricType","getDisplayedHistoryMetrics","customMetrics","getHistoryMetrics","splitSeriesInGraphs","maxGraph","maxSeries","generateSeries","measuresHistory","metrics","displayedMetrics","measure","indexOf","metric","uncoveredLines","linesToCover","history","x","translatedName","generateCoveredLinesMetric","Array","isArray","findMetric","saveActivityGraph","namespace","join","getActivityGraph","customGraphs","split","GraphType","EVENT_TYPES","APPLICATION_EVENT_TYPES","activityQueryChanged","prevQuery","nextQuery","datesQueryChanged","customMetricsChanged","historyQueryChanged","getAnalysesByVersionByDay","query","reduce","acc","currentVersion","versionEvent","event","newVersion","getTime","toString","matchFilters","isAfterFrom","isBeforeTo","hasSelectedCategoryEvents","parseQuery","urlQuery","parseGraph","selectedDate","serializeQuery","serializeUrlQuery","custom_metrics","selected_date","ComponentContext","getProjectActivity","catch","createEvent","r","deleteEvent","changeEvent","deleteAnalysis","isDefinitionChangeEvent","definitionChange","DefinitionChangeEventInner","expanded","stopPropagation","toggleProjectsList","renderProjectLink","renderBranch","mainBranch","changeType","message","newBranch","oldBranch","turned","projects","renderProjectChange","isRichQualityGateEvent","qualityGate","RichQualityGateEventInner","stillFailing","status","level","small","failing","getNewCodePeriod","setNewCodePeriod","resetNewCodePeriod","listBranchesNewCodePeriod","validateDays","parsed","parseInt","isNaN","getSettingValue","validateSetting","error","required","EventInner","changeInput","target","confirmButtonText","confirmDisable","onConfirm","autoFocus","RemoveEventForm","removeEventQuestion","isDestructive","changing","setChanging","deleting","setDeleting","isOther","isVersion","canChange","canDelete","onDelete","showActions","sortedEvents"],"mappings":"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","file":"js/304.m.ec2ba24c.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".project-baseline{padding:32px}.project-baseline-setting{display:flex;flex-direction:column;max-height:60vh;padding-top:2px}.project-baseline-selector .general-setting{margin-left:7px}.branch-baseline-selector>hr{margin:0 -32px 32px}.branch-baseline-setting-modal{min-height:450px;display:flex;flex-direction:column}.branch-analysis-list-wrapper{display:flex;flex-direction:column;overflow:hidden;position:relative;min-height:200px}.branch-analysis-list{overflow-y:auto;padding-left:12px;padding-right:15px;min-height:50px}.branch-analysis-list>ul{padding-top:18px}.branch-analysis-date{margin-bottom:16px;font-size:15px;font-weight:700}.branch-analysis-day{margin-top:8px;margin-bottom:24px}.branch-analysis{display:flex;justify-content:space-between;cursor:pointer;padding:8px;border-top:1px solid #e6e6e6;border-bottom:1px solid #e6e6e6}.branch-analysis+.branch-analysis{border-top:none}.branch-analysis:hover{background-color:#cae3f2}.branch-analysis>.project-activity-events{flex:1 0 50%}.branch-analysis-time{width:150px}.branch-analysis-version-badge{margin-left:-12px;padding-top:8px;padding-bottom:8px;background-color:#fff}.branch-analysis-version-badge.sticky+.branch-analysis-days-list{padding-top:36px}.branch-analysis-version-badge.first,.branch-analysis-version-badge.sticky{position:absolute;top:1px;left:13px;right:16px;padding-top:24px;z-index:1}.branch-analysis-version-badge .badge{max-width:385px;border-radius:0 2px 2px 0;font-weight:700;font-size:12px;letter-spacing:0;overflow:hidden;text-overflow:ellipsis}.branch-setting-warning{background-color:#fcf8e3!important}.project-activity-event-icon.VERSION{color:#4b9fd5}.project-activity-event-icon.QUALITY_GATE{color:#9139d4}.project-activity-event-icon.QUALITY_PROFILE{color:#ccc}.project-activity-event-icon.DEFINITION_CHANGE{color:#33a759}.project-activity-event-icon.OTHER{color:#442d1b}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface AppHeaderProps {\n  canAdmin: boolean;\n}\n\nexport default function AppHeader(props: AppHeaderProps) {\n  const { canAdmin } = props;\n\n  return (\n    <header className=\"page-header\">\n      <h1 className=\"page-title\">{translate('project_baseline.page')}</h1>\n      <p className=\"page-description\">\n        <FormattedMessage\n          defaultMessage={translate('project_baseline.page.description')}\n          id=\"project_baseline.page.description\"\n          values={{\n            link: (\n              <Link to=\"/documentation/project-administration/new-code-period/\">\n                {translate('project_baseline.page.description.link')}\n              </Link>\n            )\n          }}\n        />\n        <br />\n        {canAdmin && (\n          <FormattedMessage\n            defaultMessage={translate('project_baseline.page.description2')}\n            id=\"project_baseline.page.description2\"\n            values={{\n              link: (\n                <Link to=\"/admin/settings?category=new_code_period\">\n                  {translate('project_baseline.page.description2.link')}\n                </Link>\n              )\n            }}\n          />\n        )}\n      </p>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingAnalysis({ disabled, onSelect, selected }: Props) {\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('SPECIFIC_ANALYSIS')}\n      selected={selected}\n      title={translate('baseline.specific_analysis')}>\n      <p className=\"big-spacer-bottom\">{translate('baseline.specific_analysis.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport SearchSelect from 'sonar-ui-common/components/controls/SearchSelect';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport AlertErrorIcon from 'sonar-ui-common/components/icons/AlertErrorIcon';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\n\nexport interface BaselineSettingReferenceBranchProps {\n  branchList: BranchOption[];\n  className?: string;\n  configuredBranchName?: string;\n  disabled?: boolean;\n  onChangeReferenceBranch: (value: string) => void;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  referenceBranch: string;\n  selected: boolean;\n  settingLevel: 'project' | 'branch';\n}\n\nexport interface BranchOption {\n  disabled?: boolean;\n  isInvalid?: boolean;\n  isMain: boolean;\n  value: string;\n}\n\nfunction renderBranchOption(option: BranchOption) {\n  return option.isInvalid ? (\n    <Tooltip\n      overlay={translateWithParameters('baseline.reference_branch.does_not_exist', option.value)}>\n      <span>\n        {option.value} <AlertErrorIcon />\n      </span>\n    </Tooltip>\n  ) : (\n    <>\n      <span\n        title={\n          option.disabled ? translate('baseline.reference_branch.cannot_be_itself') : undefined\n        }>\n        {option.value}\n      </span>\n      {option.isMain && (\n        <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n      )}\n    </>\n  );\n}\n\nexport default function BaselineSettingReferenceBranch(props: BaselineSettingReferenceBranchProps) {\n  const { branchList, className, disabled, referenceBranch, selected, settingLevel } = props;\n\n  const currentBranch = branchList.find(b => b.value === referenceBranch) || {\n    value: referenceBranch,\n    isMain: false,\n    isInvalid: true\n  };\n\n  return (\n    <RadioCard\n      className={className}\n      disabled={disabled}\n      onClick={() => props.onSelect('REFERENCE_BRANCH')}\n      selected={selected}\n      title={translate('baseline.reference_branch')}>\n      <>\n        <p>{translate('baseline.reference_branch.description')}</p>\n        {selected && (\n          <>\n            {settingLevel === 'project' && (\n              <p className=\"spacer-top\">{translate('baseline.reference_branch.description2')}</p>\n            )}\n            <div className=\"big-spacer-top display-flex-column\">\n              <MandatoryFieldsExplanation className=\"spacer-bottom\" />\n              <label className=\"text-middle\" htmlFor=\"reference_branch\">\n                <strong>{translate('baseline.reference_branch.choose')}</strong>\n                <MandatoryFieldMarker />\n              </label>\n              <SearchSelect<BranchOption>\n                autofocus={false}\n                className=\"little-spacer-top spacer-bottom\"\n                defaultOptions={branchList}\n                minimumQueryLength={1}\n                onSearch={q => Promise.resolve(branchList.filter(b => b.value.includes(q)))}\n                onSelect={option => props.onChangeReferenceBranch(option.value)}\n                renderOption={renderBranchOption}\n                value={currentBranch}\n              />\n            </div>\n          </>\n        )}\n      </>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport DateFormatter from 'sonar-ui-common/components/intl/DateFormatter';\nimport TimeFormatter from 'sonar-ui-common/components/intl/TimeFormatter';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { parseDate, toShortNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport Events from '../../projectActivity/components/Events';\nimport { getAnalysesByVersionByDay } from '../../projectActivity/utils';\n\nexport interface BranchAnalysisListRendererProps {\n  analyses: T.ParsedAnalysis[];\n  handleRangeChange: ({ value }: { value: number }) => void;\n  handleScroll: (e: React.SyntheticEvent<HTMLDivElement>) => void;\n  loading: boolean;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  range: number;\n  registerBadgeNode: (version: string) => (el: HTMLDivElement) => void;\n  registerScrollableNode: (el: HTMLDivElement) => void;\n  selectedAnalysisKey: string;\n  shouldStick: (version: string) => boolean;\n}\n\nfunction renderAnalysis(args: {\n  analysis: T.ParsedAnalysis;\n  isFirst: boolean;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  selectedAnalysisKey: string;\n}) {\n  const { analysis, isFirst, onSelectAnalysis, selectedAnalysisKey } = args;\n  return (\n    <li\n      className={classNames('branch-analysis', {\n        selected: analysis.key === selectedAnalysisKey\n      })}\n      data-date={parseDate(analysis.date).valueOf()}\n      key={analysis.key}\n      onClick={() => onSelectAnalysis(analysis)}>\n      <div className=\"branch-analysis-time spacer-right\">\n        <TimeFormatter date={parseDate(analysis.date)} long={false}>\n          {formattedTime => (\n            <time className=\"text-middle\" dateTime={parseDate(analysis.date).toISOString()}>\n              {formattedTime}\n            </time>\n          )}\n        </TimeFormatter>\n      </div>\n\n      {analysis.events.length > 0 && (\n        <Events analysisKey={analysis.key} events={analysis.events} isFirst={isFirst} />\n      )}\n\n      <div className=\"analysis-selection-button\">\n        <Radio checked={analysis.key === selectedAnalysisKey} onCheck={() => {}} value=\"\" />\n      </div>\n    </li>\n  );\n}\n\nexport default function BranchAnalysisListRenderer(props: BranchAnalysisListRendererProps) {\n  const { analyses, loading, range, selectedAnalysisKey } = props;\n\n  const byVersionByDay = React.useMemo(\n    () =>\n      getAnalysesByVersionByDay(analyses, {\n        category: ''\n      }),\n    [analyses]\n  );\n\n  const hasFilteredData =\n    byVersionByDay.length > 1 ||\n    (byVersionByDay.length === 1 && Object.keys(byVersionByDay[0].byDay).length > 0);\n\n  return (\n    <>\n      <div className=\"spacer-bottom\">\n        {translate('baseline.analysis_from')}\n        <Select\n          autoBlur={true}\n          className=\"input-medium spacer-left\"\n          clearable={false}\n          onChange={props.handleRangeChange}\n          options={[\n            {\n              label: translate('baseline.branch_analyses.ranges.30days'),\n              value: 30\n            },\n            {\n              label: translate('baseline.branch_analyses.ranges.allTime'),\n              value: 0\n            }\n          ]}\n          searchable={false}\n          value={range}\n        />\n      </div>\n      <div className=\"branch-analysis-list-wrapper\">\n        <div\n          className=\"bordered branch-analysis-list\"\n          onScroll={props.handleScroll}\n          ref={props.registerScrollableNode}>\n          {loading && <DeferredSpinner className=\"big-spacer-top\" />}\n\n          {!loading && !hasFilteredData ? (\n            <div className=\"big-spacer-top big-spacer-bottom strong\">\n              {translate('baseline.no_analyses')}\n            </div>\n          ) : (\n            <ul>\n              {byVersionByDay.map((version, idx) => {\n                const days = Object.keys(version.byDay);\n                if (days.length <= 0) {\n                  return null;\n                }\n                return (\n                  <li key={version.key || 'noversion'}>\n                    {version.version && (\n                      <div\n                        className={classNames('branch-analysis-version-badge', {\n                          first: idx === 0,\n                          sticky: props.shouldStick(version.version)\n                        })}\n                        ref={props.registerBadgeNode(version.version)}>\n                        <Tooltip\n                          mouseEnterDelay={0.5}\n                          overlay={`${translate('version')} ${version.version}`}>\n                          <span className=\"badge\">{version.version}</span>\n                        </Tooltip>\n                      </div>\n                    )}\n                    <ul className=\"branch-analysis-days-list\">\n                      {days.map(day => (\n                        <li\n                          className=\"branch-analysis-day\"\n                          data-day={toShortNotSoISOString(Number(day))}\n                          key={day}>\n                          <div className=\"branch-analysis-date\">\n                            <DateFormatter date={Number(day)} long={true} />\n                          </div>\n                          <ul className=\"branch-analysis-analyses-list\">\n                            {version.byDay[day] != null &&\n                              version.byDay[day].map(analysis =>\n                                renderAnalysis({\n                                  analysis,\n                                  selectedAnalysisKey,\n                                  isFirst: analyses[0].key === analysis.key,\n                                  onSelectAnalysis: props.onSelectAnalysis\n                                })\n                              )}\n                          </ul>\n                        </li>\n                      ))}\n                    </ul>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { subDays } from 'date-fns';\nimport { throttle } from 'lodash';\nimport * as React from 'react';\nimport { parseDate, toShortNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { scrollToElement } from 'sonar-ui-common/helpers/scrolling';\nimport { getProjectActivity } from '../../../api/projectActivity';\nimport BranchAnalysisListRenderer from './BranchAnalysisListRenderer';\n\ninterface Props {\n  analysis: string;\n  branch: string;\n  component: string;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n}\n\ninterface State {\n  analyses: T.ParsedAnalysis[];\n  loading: boolean;\n  range: number;\n  scroll: number;\n}\n\nconst STICKY_BADGE_SCROLL_OFFSET = 10;\n\nexport default class BranchAnalysisList extends React.PureComponent<Props, State> {\n  mounted = false;\n  badges: T.Dict<HTMLDivElement> = {};\n  scrollableNode?: HTMLDivElement;\n  state: State = {\n    analyses: [],\n    loading: true,\n    range: 30,\n    scroll: 0\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.updateScroll = throttle(this.updateScroll, 20);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchAnalyses(true);\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  scrollToSelected() {\n    const selectedNode = document.querySelector('.branch-analysis.selected');\n    if (this.scrollableNode && selectedNode) {\n      scrollToElement(selectedNode, { parent: this.scrollableNode, bottomOffset: 40 });\n    }\n  }\n\n  fetchAnalyses(initial = false) {\n    const { analysis, branch, component } = this.props;\n    const { range } = this.state;\n    this.setState({ loading: true });\n\n    return getProjectActivity({\n      branch,\n      project: component,\n      from: range ? toShortNotSoISOString(subDays(new Date(), range)) : undefined\n    }).then((result: { analyses: T.Analysis[] }) => {\n      // If the selected analysis wasn't found in the default 30 days range, redo the search\n      if (initial && analysis && !result.analyses.find(a => a.key === analysis)) {\n        this.handleRangeChange({ value: 0 });\n        return;\n      }\n\n      this.setState(\n        {\n          analyses: result.analyses.map(analysis => ({\n            ...analysis,\n            date: parseDate(analysis.date)\n          })) as T.ParsedAnalysis[],\n          loading: false\n        },\n        () => {\n          this.scrollToSelected();\n        }\n      );\n    });\n  }\n\n  handleScroll = (e: React.SyntheticEvent<HTMLDivElement>) => {\n    if (e.currentTarget) {\n      this.updateScroll(e.currentTarget.scrollTop);\n    }\n  };\n\n  updateScroll = (scroll: number) => {\n    this.setState({ scroll });\n  };\n\n  registerBadgeNode = (version: string) => (el: HTMLDivElement) => {\n    if (el) {\n      if (!el.getAttribute('originOffsetTop')) {\n        el.setAttribute('originOffsetTop', String(el.offsetTop));\n      }\n      this.badges[version] = el;\n    }\n  };\n\n  shouldStick = (version: string) => {\n    const badge = this.badges[version];\n    return (\n      !!badge &&\n      Number(badge.getAttribute('originOffsetTop')) < this.state.scroll + STICKY_BADGE_SCROLL_OFFSET\n    );\n  };\n\n  handleRangeChange = ({ value }: { value: number }) => {\n    this.setState({ range: value }, () => this.fetchAnalyses());\n  };\n\n  render() {\n    const { analysis, onSelectAnalysis } = this.props;\n    const { analyses, loading, range } = this.state;\n\n    return (\n      <BranchAnalysisListRenderer\n        analyses={analyses}\n        handleRangeChange={this.handleRangeChange}\n        handleScroll={this.handleScroll}\n        loading={loading}\n        onSelectAnalysis={onSelectAnalysis}\n        range={range}\n        registerBadgeNode={this.registerBadgeNode}\n        registerScrollableNode={el => {\n          this.scrollableNode = el;\n        }}\n        selectedAnalysisKey={analysis}\n        shouldStick={this.shouldStick}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { toNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { setNewCodePeriod } from '../../../api/newCodePeriod';\nimport { Branch, BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport { getSettingValue, validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BaselineSettingReferenceBranch from './BaselineSettingReferenceBranch';\nimport BranchAnalysisList from './BranchAnalysisList';\n\ninterface Props {\n  branch: BranchWithNewCodePeriod;\n  branchList: Branch[];\n  component: string;\n  onClose: (branch?: string, newSetting?: T.NewCodePeriod) => void;\n}\n\ninterface State {\n  analysis: string;\n  analysisDate?: Date;\n  days: string;\n  referenceBranch: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n}\n\nexport default class BranchBaselineSettingModal extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    const otherBranches = props.branchList.filter(b => b.name !== props.branch.name);\n    const defaultBranch = otherBranches.length > 0 ? otherBranches[0].name : '';\n\n    this.state = {\n      analysis: this.getValueFromProps('SPECIFIC_ANALYSIS') || '',\n      days: this.getValueFromProps('NUMBER_OF_DAYS') || '30',\n      referenceBranch: this.getValueFromProps('REFERENCE_BRANCH') || defaultBranch,\n      saving: false,\n      selected: this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getValueFromProps(type: T.NewCodePeriodSettingType) {\n    return this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type === type\n      ? this.props.branch.newCodePeriod.value\n      : null;\n  }\n\n  branchToOption = (b: Branch) => ({\n    value: b.name,\n    isMain: b.isMain,\n    disabled: b.name === this.props.branch.name // cannot itself be used as a reference branch\n  });\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { branch, component } = this.props;\n    const { analysis, analysisDate, days, referenceBranch, selected: type } = this.state;\n\n    const value = getSettingValue({ type, analysis, days, referenceBranch });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component,\n        type,\n        value,\n        branch: branch.name\n      }).then(\n        () => {\n          this.setState({\n            saving: false\n          });\n          this.props.onClose(branch.name, {\n            type,\n            value,\n            effectiveValue: analysisDate && toNotSoISOString(analysisDate)\n          });\n        },\n        () => {\n          this.setState({\n            saving: false\n          });\n        }\n      );\n    }\n  };\n\n  requestClose = () => this.props.onClose();\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) =>\n    this.setState({ analysis: analysis.key, analysisDate: analysis.date });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleSelectReferenceBranch = (referenceBranch: string) => this.setState({ referenceBranch });\n\n  handleSelectSetting = (selected: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  render() {\n    const { branch, branchList } = this.props;\n    const { analysis, days, referenceBranch, saving, selected } = this.state;\n\n    const header = translateWithParameters('baseline.new_code_period_for_branch_x', branch.name);\n\n    const currentSetting = branch.newCodePeriod && branch.newCodePeriod.type;\n    const currentSettingValue = branch.newCodePeriod && branch.newCodePeriod.value;\n\n    const { isChanged, isValid } = validateSetting({\n      analysis,\n      currentSetting,\n      currentSettingValue,\n      days,\n      referenceBranch,\n      selected\n    });\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.requestClose} size=\"large\">\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body modal-container branch-baseline-setting-modal\">\n            <div className=\"display-flex-row huge-spacer-bottom\" role=\"radiogroup\">\n              <BaselineSettingPreviousVersion\n                isDefault={false}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'PREVIOUS_VERSION'}\n              />\n              <BaselineSettingDays\n                days={days}\n                isChanged={isChanged}\n                isValid={isValid}\n                onChangeDays={this.handleSelectDays}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'NUMBER_OF_DAYS'}\n              />\n              <BaselineSettingAnalysis\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'SPECIFIC_ANALYSIS'}\n              />\n              <BaselineSettingReferenceBranch\n                branchList={branchList.map(this.branchToOption)}\n                onChangeReferenceBranch={this.handleSelectReferenceBranch}\n                onSelect={this.handleSelectSetting}\n                referenceBranch={referenceBranch}\n                selected={selected === 'REFERENCE_BRANCH'}\n                settingLevel=\"branch\"\n              />\n            </div>\n            {selected === 'SPECIFIC_ANALYSIS' && (\n              <BranchAnalysisList\n                analysis={analysis}\n                branch={branch.name}\n                component={this.props.component}\n                onSelectAnalysis={this.handleSelectAnalysis}\n              />\n            )}\n          </div>\n          <footer className=\"modal-foot\">\n            <DeferredSpinner className=\"spacer-right\" loading={saving} />\n            <SubmitButton disabled={!isChanged || saving || !isValid}>\n              {translate('save')}\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport WarningIcon from 'sonar-ui-common/components/icons/WarningIcon';\nimport DateTimeFormatter from 'sonar-ui-common/components/intl/DateTimeFormatter';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport BranchLikeIcon from '../../../components/icons/BranchLikeIcon';\nimport { BranchWithNewCodePeriod } from '../../../types/branch-like';\n\nexport interface BranchListRowProps {\n  branch: BranchWithNewCodePeriod;\n  existingBranches: Array<string>;\n  inheritedSetting: T.NewCodePeriod;\n  onOpenEditModal: (branch: BranchWithNewCodePeriod) => void;\n  onResetToDefault: (branchName: string) => void;\n}\n\nfunction renderNewCodePeriodSetting(newCodePeriod: T.NewCodePeriod) {\n  switch (newCodePeriod.type) {\n    case 'SPECIFIC_ANALYSIS':\n      return (\n        <>\n          {`${translate('baseline.specific_analysis')}: `}\n          {newCodePeriod.effectiveValue ? (\n            <DateTimeFormatter date={newCodePeriod.effectiveValue} />\n          ) : (\n            '?'\n          )}\n        </>\n      );\n    case 'NUMBER_OF_DAYS':\n      return `${translate('baseline.number_days')}: ${newCodePeriod.value}`;\n    case 'PREVIOUS_VERSION':\n      return translate('baseline.previous_version');\n    case 'REFERENCE_BRANCH':\n      return `${translate('baseline.reference_branch')}: ${newCodePeriod.value}`;\n    default:\n      return newCodePeriod.type;\n  }\n}\n\nfunction branchInheritsItselfAsReference(\n  branch: BranchWithNewCodePeriod,\n  inheritedSetting: T.NewCodePeriod\n) {\n  return (\n    !branch.newCodePeriod &&\n    inheritedSetting.type === 'REFERENCE_BRANCH' &&\n    branch.name === inheritedSetting.value\n  );\n}\n\nfunction referenceBranchDoesNotExist(\n  branch: BranchWithNewCodePeriod,\n  existingBranches: Array<string>\n) {\n  return (\n    branch.newCodePeriod &&\n    branch.newCodePeriod.value &&\n    branch.newCodePeriod.type === 'REFERENCE_BRANCH' &&\n    !existingBranches.includes(branch.newCodePeriod.value)\n  );\n}\n\nexport default function BranchListRow(props: BranchListRowProps) {\n  const { branch, existingBranches, inheritedSetting } = props;\n\n  let settingWarning: string | undefined;\n  if (branchInheritsItselfAsReference(branch, inheritedSetting)) {\n    settingWarning = translateWithParameters(\n      'baseline.reference_branch.invalid_branch_setting',\n      branch.name\n    );\n  } else if (referenceBranchDoesNotExist(branch, existingBranches)) {\n    settingWarning = translateWithParameters(\n      'baseline.reference_branch.does_not_exist',\n      branch.newCodePeriod?.value || ''\n    );\n  }\n\n  return (\n    <tr className={settingWarning ? 'branch-setting-warning' : ''}>\n      <td className=\"nowrap\">\n        <BranchLikeIcon branchLike={branch} className=\"little-spacer-right\" />\n        {branch.name}\n        {branch.isMain && (\n          <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n        )}\n      </td>\n      <td className=\"huge-spacer-right nowrap\">\n        <Tooltip overlay={settingWarning}>\n          <span>\n            {settingWarning && <WarningIcon className=\"little-spacer-right\" />}\n            {branch.newCodePeriod\n              ? renderNewCodePeriodSetting(branch.newCodePeriod)\n              : translate('branch_list.default_setting')}\n          </span>\n        </Tooltip>\n      </td>\n      <td className=\"text-right\">\n        <ActionsDropdown>\n          <ActionsDropdownItem onClick={() => props.onOpenEditModal(branch)}>\n            {translate('edit')}\n          </ActionsDropdownItem>\n          {branch.newCodePeriod && (\n            <ActionsDropdownItem onClick={() => props.onResetToDefault(branch.name)}>\n              {translate('reset_to_default')}\n            </ActionsDropdownItem>\n          )}\n        </ActionsDropdown>\n      </td>\n    </tr>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { listBranchesNewCodePeriod, resetNewCodePeriod } from '../../../api/newCodePeriod';\nimport { isBranch, sortBranches } from '../../../helpers/branch-like';\nimport { Branch, BranchLike, BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport BranchBaselineSettingModal from './BranchBaselineSettingModal';\nimport BranchListRow from './BranchListRow';\n\ninterface Props {\n  branchList: Branch[];\n  component: T.Component;\n  inheritedSetting: T.NewCodePeriod;\n}\n\ninterface State {\n  branches: BranchWithNewCodePeriod[];\n  editedBranch?: BranchWithNewCodePeriod;\n  loading: boolean;\n}\n\nexport default class BranchList extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    branches: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranches();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  sortAndFilterBranches(branchLikes: BranchLike[] = []) {\n    return sortBranches(branchLikes.filter(isBranch));\n  }\n\n  fetchBranches() {\n    const project = this.props.component.key;\n    this.setState({ loading: true });\n\n    listBranchesNewCodePeriod({ project }).then(\n      branchSettings => {\n        const newCodePeriods = branchSettings.newCodePeriods\n          ? branchSettings.newCodePeriods.filter(ncp => !ncp.inherited)\n          : [];\n\n        const branchesWithBaseline = this.props.branchList.map(b => {\n          const newCodePeriod = newCodePeriods.find(ncp => ncp.branchKey === b.name);\n          if (!newCodePeriod) {\n            return b;\n          }\n          const { type = 'PREVIOUS_VERSION', value, effectiveValue } = newCodePeriod;\n          return {\n            ...b,\n            newCodePeriod: { type, value, effectiveValue }\n          };\n        });\n\n        this.setState({ branches: branchesWithBaseline, loading: false });\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  updateBranchNewCodePeriod = (branch: string, newSetting: T.NewCodePeriod | undefined) => {\n    const { branches } = this.state;\n\n    const updated = branches.find(b => b.name === branch);\n    if (updated) {\n      updated.newCodePeriod = newSetting;\n    }\n    return branches.slice(0);\n  };\n\n  openEditModal = (branch: BranchWithNewCodePeriod) => {\n    this.setState({ editedBranch: branch });\n  };\n\n  closeEditModal = (branch?: string, newSetting?: T.NewCodePeriod) => {\n    if (branch) {\n      this.setState({\n        branches: this.updateBranchNewCodePeriod(branch, newSetting),\n        editedBranch: undefined\n      });\n    } else {\n      this.setState({ editedBranch: undefined });\n    }\n  };\n\n  resetToDefault = (branch: string) => {\n    return resetNewCodePeriod({\n      project: this.props.component.key,\n      branch\n    }).then(() => {\n      this.setState({ branches: this.updateBranchNewCodePeriod(branch, undefined) });\n    });\n  };\n\n  render() {\n    const { branchList, inheritedSetting } = this.props;\n    const { branches, editedBranch, loading } = this.state;\n\n    if (branches.length < 1) {\n      return null;\n    }\n\n    if (loading) {\n      return <DeferredSpinner />;\n    }\n\n    return (\n      <>\n        <table className=\"data zebra\">\n          <thead>\n            <tr>\n              <th>{translate('branch_list.branch')}</th>\n              <th className=\"nowrap huge-spacer-right\">\n                {translate('branch_list.current_setting')}\n              </th>\n              <th className=\"thin nowrap\">{translate('branch_list.actions')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {branches.map(branch => (\n              <BranchListRow\n                branch={branch}\n                existingBranches={branchList.map(b => b.name)}\n                inheritedSetting={inheritedSetting}\n                key={branch.name}\n                onOpenEditModal={this.openEditModal}\n                onResetToDefault={this.resetToDefault}\n              />\n            ))}\n          </tbody>\n        </table>\n        {editedBranch && (\n          <BranchBaselineSettingModal\n            branch={editedBranch}\n            branchList={branchList}\n            component={this.props.component.key}\n            onClose={this.closeEditModal}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { Branch } from '../../../types/branch-like';\nimport { validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BaselineSettingReferenceBranch from './BaselineSettingReferenceBranch';\nimport BranchAnalysisList from './BranchAnalysisList';\n\nexport interface ProjectBaselineSelectorProps {\n  analysis?: string;\n  branch: Branch;\n  branchList: Branch[];\n  branchesEnabled?: boolean;\n  component: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting: T.NewCodePeriod;\n  onCancel: () => void;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  onSelectDays: (value: string) => void;\n  onSelectReferenceBranch: (value: string) => void;\n  onSelectSetting: (value?: T.NewCodePeriodSettingType) => void;\n  onSubmit: (e: React.SyntheticEvent<HTMLFormElement>) => void;\n  onToggleSpecificSetting: (selection: boolean) => void;\n  referenceBranch?: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  overrideGeneralSetting: boolean;\n}\n\nfunction renderGeneralSetting(generalSetting: T.NewCodePeriod) {\n  let setting: string;\n  let description: string;\n  if (generalSetting.type === 'NUMBER_OF_DAYS') {\n    setting = `${translate('baseline.number_days')} (${translateWithParameters(\n      'duration.days',\n      generalSetting.value || '?'\n    )})`;\n    description = translate('baseline.number_days.description');\n  } else {\n    setting = translate('baseline.previous_version');\n    description = translate('baseline.previous_version.description');\n  }\n\n  return (\n    <div className=\"general-setting\">\n      <strong>{setting}</strong>: {description}\n    </div>\n  );\n}\n\nfunction branchToOption(b: Branch) {\n  return { value: b.name, isMain: b.isMain };\n}\n\nexport default function ProjectBaselineSelector(props: ProjectBaselineSelectorProps) {\n  const {\n    analysis,\n    branch,\n    branchList,\n    branchesEnabled,\n    component,\n    currentSetting,\n    currentSettingValue,\n    days,\n    generalSetting,\n    overrideGeneralSetting,\n    referenceBranch,\n    saving,\n    selected\n  } = props;\n\n  const { isChanged, isValid } = validateSetting({\n    analysis,\n    currentSetting,\n    currentSettingValue,\n    days,\n    overrideGeneralSetting,\n    referenceBranch,\n    selected\n  });\n\n  return (\n    <form className=\"project-baseline-selector\" onSubmit={props.onSubmit}>\n      <div className=\"big-spacer-top spacer-bottom\" role=\"radiogroup\">\n        <Radio\n          checked={!overrideGeneralSetting}\n          className=\"big-spacer-bottom\"\n          onCheck={() => props.onToggleSpecificSetting(false)}\n          value=\"general\">\n          {translate('project_baseline.general_setting')}\n        </Radio>\n        <div className=\"big-spacer-left\">{renderGeneralSetting(generalSetting)}</div>\n\n        <Radio\n          checked={overrideGeneralSetting}\n          className=\"huge-spacer-top\"\n          onCheck={() => props.onToggleSpecificSetting(true)}\n          value=\"specific\">\n          {translate('project_baseline.specific_setting')}\n        </Radio>\n      </div>\n\n      <div className=\"big-spacer-left big-spacer-right project-baseline-setting\">\n        <div className=\"display-flex-row big-spacer-bottom\" role=\"radiogroup\">\n          <BaselineSettingPreviousVersion\n            disabled={!overrideGeneralSetting}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'PREVIOUS_VERSION'}\n          />\n          <BaselineSettingDays\n            days={days}\n            disabled={!overrideGeneralSetting}\n            isChanged={isChanged}\n            isValid={isValid}\n            onChangeDays={props.onSelectDays}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'NUMBER_OF_DAYS'}\n          />\n          {branchesEnabled ? (\n            <BaselineSettingReferenceBranch\n              branchList={branchList.map(branchToOption)}\n              disabled={!overrideGeneralSetting}\n              onChangeReferenceBranch={props.onSelectReferenceBranch}\n              onSelect={props.onSelectSetting}\n              referenceBranch={referenceBranch || ''}\n              selected={overrideGeneralSetting && selected === 'REFERENCE_BRANCH'}\n              settingLevel=\"project\"\n            />\n          ) : (\n            <BaselineSettingAnalysis\n              disabled={!overrideGeneralSetting}\n              onSelect={props.onSelectSetting}\n              selected={overrideGeneralSetting && selected === 'SPECIFIC_ANALYSIS'}\n            />\n          )}\n        </div>\n        {selected === 'SPECIFIC_ANALYSIS' && (\n          <BranchAnalysisList\n            analysis={analysis || ''}\n            branch={branch.name}\n            component={component}\n            onSelectAnalysis={props.onSelectAnalysis}\n          />\n        )}\n      </div>\n      <div className={classNames('big-spacer-top', { invisible: !isChanged })}>\n        <Alert variant=\"info\" className=\"spacer-bottom\">\n          {translate('baseline.next_analysis_notice')}\n        </Alert>\n        <DeferredSpinner className=\"spacer-right\" loading={saving} />\n        <SubmitButton disabled={saving || !isValid || !isChanged}>{translate('save')}</SubmitButton>\n        <ResetButtonLink className=\"spacer-left\" onClick={props.onCancel}>\n          {translate('cancel')}\n        </ResetButtonLink>\n      </div>\n    </form>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport AlertSuccessIcon from 'sonar-ui-common/components/icons/AlertSuccessIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getNewCodePeriod, resetNewCodePeriod, setNewCodePeriod } from '../../../api/newCodePeriod';\nimport Suggestions from '../../../app/components/embed-docs-modal/Suggestions';\nimport { isBranch, sortBranches } from '../../../helpers/branch-like';\nimport { Branch, BranchLike } from '../../../types/branch-like';\nimport '../styles.css';\nimport { getSettingValue } from '../utils';\nimport AppHeader from './AppHeader';\nimport BranchList from './BranchList';\nimport ProjectBaselineSelector from './ProjectBaselineSelector';\n\ninterface Props {\n  branchLike: Branch;\n  branchLikes: BranchLike[];\n  branchesEnabled?: boolean;\n  canAdmin?: boolean;\n  component: T.Component;\n}\n\ninterface State {\n  analysis?: string;\n  branchList: Branch[];\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting?: T.NewCodePeriod;\n  loading: boolean;\n  overrideGeneralSetting?: boolean;\n  referenceBranch?: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  success?: boolean;\n}\n\nconst DEFAULT_NUMBER_OF_DAYS = '30';\n\nconst DEFAULT_GENERAL_SETTING: { type: T.NewCodePeriodSettingType } = {\n  type: 'PREVIOUS_VERSION'\n};\n\nexport default class App extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    branchList: [],\n    days: DEFAULT_NUMBER_OF_DAYS,\n    loading: true,\n    saving: false\n  };\n\n  // We use debounce as we could have multiple save in less that 3sec.\n  resetSuccess = debounce(() => this.setState({ success: undefined }), 3000);\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchLeakPeriodSetting();\n    this.sortAndFilterBranches(this.props.branchLikes);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.branchLikes !== this.props.branchLikes) {\n      this.sortAndFilterBranches(this.props.branchLikes);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getUpdatedState(params: {\n    currentSetting?: T.NewCodePeriodSettingType;\n    currentSettingValue?: string;\n    generalSetting: T.NewCodePeriod;\n  }) {\n    const { currentSetting, currentSettingValue, generalSetting } = params;\n    const { referenceBranch } = this.state;\n\n    const defaultDays =\n      (generalSetting.type === 'NUMBER_OF_DAYS' && generalSetting.value) || DEFAULT_NUMBER_OF_DAYS;\n\n    return {\n      loading: false,\n      currentSetting,\n      currentSettingValue,\n      generalSetting,\n      selected: currentSetting || generalSetting.type,\n      overrideGeneralSetting: Boolean(currentSetting),\n      days: (currentSetting === 'NUMBER_OF_DAYS' && currentSettingValue) || defaultDays,\n      analysis: (currentSetting === 'SPECIFIC_ANALYSIS' && currentSettingValue) || '',\n      referenceBranch:\n        (currentSetting === 'REFERENCE_BRANCH' && currentSettingValue) || referenceBranch\n    };\n  }\n\n  sortAndFilterBranches(branchLikes: BranchLike[] = []) {\n    const branchList = sortBranches(branchLikes.filter(isBranch));\n    this.setState({ branchList, referenceBranch: branchList[0].name });\n  }\n\n  fetchLeakPeriodSetting() {\n    const { branchLike, branchesEnabled, component } = this.props;\n\n    this.setState({ loading: true });\n\n    Promise.all([\n      getNewCodePeriod(),\n      getNewCodePeriod({\n        branch: branchesEnabled ? undefined : branchLike.name,\n        project: component.key\n      })\n    ]).then(\n      ([generalSetting, setting]) => {\n        if (this.mounted) {\n          if (!generalSetting.type) {\n            generalSetting = DEFAULT_GENERAL_SETTING;\n          }\n          const currentSettingValue = setting.value;\n          const currentSetting = setting.inherited ? undefined : setting.type || 'PREVIOUS_VERSION';\n\n          this.setState(\n            this.getUpdatedState({\n              generalSetting,\n              currentSetting,\n              currentSettingValue\n            })\n          );\n        }\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  resetSetting = () => {\n    this.setState({ saving: true });\n    resetNewCodePeriod({ project: this.props.component.key }).then(\n      () => {\n        this.setState({\n          saving: false,\n          currentSetting: undefined,\n          selected: undefined,\n          success: true\n        });\n        this.resetSuccess();\n      },\n      () => {\n        this.setState({ saving: false });\n      }\n    );\n  };\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) => this.setState({ analysis: analysis.key });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleSelectReferenceBranch = (referenceBranch: string) => {\n    this.setState({ referenceBranch });\n  };\n\n  handleCancel = () =>\n    this.setState(\n      ({ generalSetting = DEFAULT_GENERAL_SETTING, currentSetting, currentSettingValue }) =>\n        this.getUpdatedState({ generalSetting, currentSetting, currentSettingValue })\n    );\n\n  handleSelectSetting = (selected?: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  handleToggleSpecificSetting = (overrideGeneralSetting: boolean) =>\n    this.setState({ overrideGeneralSetting });\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { component } = this.props;\n    const { analysis, days, selected: type, referenceBranch, overrideGeneralSetting } = this.state;\n\n    if (!overrideGeneralSetting) {\n      this.resetSetting();\n      return;\n    }\n\n    const value = getSettingValue({ type, analysis, days, referenceBranch });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component.key,\n        type,\n        value\n      }).then(\n        () => {\n          this.setState({\n            saving: false,\n            currentSetting: type,\n            currentSettingValue: value || undefined,\n            success: true\n          });\n          this.resetSuccess();\n        },\n        () => {\n          this.setState({ saving: false });\n        }\n      );\n    }\n  };\n\n  render() {\n    const { branchesEnabled, canAdmin, component, branchLike } = this.props;\n    const {\n      analysis,\n      branchList,\n      currentSetting,\n      days,\n      generalSetting,\n      loading,\n      currentSettingValue,\n      overrideGeneralSetting,\n      referenceBranch,\n      saving,\n      selected,\n      success\n    } = this.state;\n\n    return (\n      <>\n        <Suggestions suggestions=\"project_baseline\" />\n        <div className=\"page page-limited\">\n          <AppHeader canAdmin={!!canAdmin} />\n          {loading ? (\n            <DeferredSpinner />\n          ) : (\n            <div className=\"panel-white project-baseline\">\n              {branchesEnabled && <h2>{translate('project_baseline.default_setting')}</h2>}\n\n              {generalSetting && overrideGeneralSetting !== undefined && (\n                <ProjectBaselineSelector\n                  analysis={analysis}\n                  branch={branchLike}\n                  branchList={branchList}\n                  branchesEnabled={branchesEnabled}\n                  component={component.key}\n                  currentSetting={currentSetting}\n                  currentSettingValue={currentSettingValue}\n                  days={days}\n                  generalSetting={generalSetting}\n                  onCancel={this.handleCancel}\n                  onSelectAnalysis={this.handleSelectAnalysis}\n                  onSelectDays={this.handleSelectDays}\n                  onSelectReferenceBranch={this.handleSelectReferenceBranch}\n                  onSelectSetting={this.handleSelectSetting}\n                  onSubmit={this.handleSubmit}\n                  onToggleSpecificSetting={this.handleToggleSpecificSetting}\n                  overrideGeneralSetting={overrideGeneralSetting}\n                  referenceBranch={referenceBranch}\n                  saving={saving}\n                  selected={selected}\n                />\n              )}\n\n              <div className={classNames('spacer-top', { invisible: saving || !success })}>\n                <span className=\"text-success\">\n                  <AlertSuccessIcon className=\"spacer-right\" />\n                  {translate('settings.state.saved')}\n                </span>\n              </div>\n              {generalSetting && branchesEnabled && (\n                <div className=\"huge-spacer-top branch-baseline-selector\">\n                  <hr />\n                  <h2>{translate('project_baseline.configure_branches')}</h2>\n                  <BranchList\n                    branchList={branchList}\n                    component={component}\n                    inheritedSetting={\n                      currentSetting\n                        ? {\n                            type: currentSetting,\n                            value: currentSettingValue\n                          }\n                        : generalSetting\n                    }\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { connect } from 'react-redux';\nimport { getAppState, Store } from '../../../store/rootReducer';\nimport App from './App';\n\nconst mapStateToProps = (state: Store) => ({\n  branchesEnabled: getAppState(state).branchesEnabled,\n  canAdmin: getAppState(state).canAdmin\n});\n\nexport default connect(mapStateToProps)(App);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SuggestionsContext } from './SuggestionsContext';\n\ninterface Props {\n  suggestions: string;\n}\n\nexport default function Suggestions({ suggestions }: Props) {\n  return (\n    <SuggestionsContext.Consumer>\n      {({ addSuggestions, removeSuggestions }) => (\n        <SuggestionsInner\n          addSuggestions={addSuggestions}\n          removeSuggestions={removeSuggestions}\n          suggestions={suggestions}\n        />\n      )}\n    </SuggestionsContext.Consumer>\n  );\n}\n\ninterface SuggestionsInnerProps {\n  addSuggestions: (key: string) => void;\n  removeSuggestions: (key: string) => void;\n  suggestions: string;\n}\n\nclass SuggestionsInner extends React.PureComponent<SuggestionsInnerProps> {\n  componentDidMount() {\n    this.props.addSuggestions(this.props.suggestions);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.props.removeSuggestions(this.props.suggestions);\n      this.props.addSuggestions(prevProps.suggestions);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeSuggestions(this.props.suggestions);\n  }\n\n  render() {\n    return null;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { chunk, flatMap, groupBy, sortBy } from 'lodash';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { get, save } from 'sonar-ui-common/helpers/storage';\nimport { localizeMetric } from '../../helpers/measures';\nimport { MetricKey } from '../../types/metrics';\nimport { GraphType, MeasureHistory, Serie } from '../../types/project-activity';\n\nexport const DEFAULT_GRAPH = GraphType.issues;\n\nconst GRAPHS_METRICS_DISPLAYED: T.Dict<string[]> = {\n  [GraphType.issues]: [MetricKey.bugs, MetricKey.code_smells, MetricKey.vulnerabilities],\n  [GraphType.coverage]: [MetricKey.lines_to_cover, MetricKey.uncovered_lines],\n  [GraphType.duplications]: [MetricKey.ncloc, MetricKey.duplicated_lines]\n};\n\nconst GRAPHS_METRICS: T.Dict<string[]> = {\n  [GraphType.issues]: GRAPHS_METRICS_DISPLAYED[GraphType.issues].concat([\n    MetricKey.reliability_rating,\n    MetricKey.security_rating,\n    MetricKey.sqale_rating\n  ]),\n  [GraphType.coverage]: [...GRAPHS_METRICS_DISPLAYED[GraphType.coverage], MetricKey.coverage],\n  [GraphType.duplications]: [\n    ...GRAPHS_METRICS_DISPLAYED[GraphType.duplications],\n    MetricKey.duplicated_lines_density\n  ]\n};\n\nexport function isCustomGraph(graph: GraphType) {\n  return graph === GraphType.custom;\n}\n\nexport function getGraphTypes(ignoreCustom = false) {\n  const graphs = [GraphType.issues, GraphType.coverage, GraphType.duplications];\n  return ignoreCustom ? graphs : [...graphs, GraphType.custom];\n}\n\nexport function hasDataValues(serie: Serie) {\n  return serie.data.some(point => Boolean(point.y || point.y === 0));\n}\n\nexport function hasHistoryData(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1);\n}\n\nexport function getSeriesMetricType(series: Serie[]) {\n  return series.length > 0 ? series[0].type : 'INT';\n}\n\nexport function getDisplayedHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS_DISPLAYED[graph];\n}\n\nexport function getHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS[graph];\n}\n\nexport function hasHistoryDataValue(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1 && hasDataValues(serie));\n}\n\nexport function splitSeriesInGraphs(series: Serie[], maxGraph: number, maxSeries: number) {\n  return flatMap(\n    groupBy(series, serie => serie.type),\n    type => chunk(type, maxSeries)\n  ).slice(0, maxGraph);\n}\n\nexport function generateCoveredLinesMetric(\n  uncoveredLines: MeasureHistory,\n  measuresHistory: MeasureHistory[]\n) {\n  const linesToCover = measuresHistory.find(measure => measure.metric === MetricKey.lines_to_cover);\n  return {\n    data: linesToCover\n      ? uncoveredLines.history.map((analysis, idx) => ({\n          x: analysis.date,\n          y: Number(linesToCover.history[idx].value) - Number(analysis.value)\n        }))\n      : [],\n    name: 'covered_lines',\n    translatedName: translate('project_activity.custom_metric.covered_lines'),\n    type: 'INT'\n  };\n}\n\nexport function generateSeries(\n  measuresHistory: MeasureHistory[],\n  graph: GraphType,\n  metrics: T.Metric[] | T.Dict<T.Metric>,\n  displayedMetrics: string[]\n): Serie[] {\n  if (displayedMetrics.length <= 0 || measuresHistory === undefined) {\n    return [];\n  }\n  return sortBy(\n    measuresHistory\n      .filter(measure => displayedMetrics.indexOf(measure.metric) >= 0)\n      .map(measure => {\n        if (measure.metric === MetricKey.uncovered_lines && !isCustomGraph(graph)) {\n          return generateCoveredLinesMetric(measure, measuresHistory);\n        }\n        const metric = findMetric(measure.metric, metrics);\n        return {\n          data: measure.history.map(analysis => ({\n            x: analysis.date,\n            y: metric && metric.type === 'LEVEL' ? analysis.value : Number(analysis.value)\n          })),\n          name: measure.metric,\n          translatedName: metric ? getLocalizedMetricName(metric) : localizeMetric(measure.metric),\n          type: metric ? metric.type : 'INT'\n        };\n      }),\n    serie =>\n      displayedMetrics.indexOf(serie.name === 'covered_lines' ? 'uncovered_lines' : serie.name)\n  );\n}\n\nexport function saveActivityGraph(\n  namespace: string,\n  project: string,\n  graph: GraphType,\n  metrics: string[] = []\n) {\n  save(namespace, graph, project);\n  if (isCustomGraph(graph)) {\n    save(`${namespace}.custom`, metrics.join(','), project);\n  }\n}\n\nexport function getActivityGraph(\n  namespace: string,\n  project: string\n): { graph: GraphType; customGraphs: string[] } {\n  const customGraphs = get(`${namespace}.custom`, project);\n  return {\n    graph: (get(namespace, project) as GraphType) || DEFAULT_GRAPH,\n    customGraphs: customGraphs ? customGraphs.split(',') : []\n  };\n}\n\nfunction findMetric(key: string, metrics: T.Metric[] | T.Dict<T.Metric>) {\n  if (Array.isArray(metrics)) {\n    return metrics.find(metric => metric.key === key);\n  }\n  return metrics[key];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum GraphType {\n  issues = 'issues',\n  coverage = 'coverage',\n  duplications = 'duplications',\n  custom = 'custom'\n}\n\nexport interface HistoryItem {\n  date: Date;\n  value?: string;\n}\n\nexport interface MeasureHistory {\n  metric: string;\n  history: HistoryItem[];\n}\n\nexport interface Serie {\n  data: Point[];\n  name: string;\n  translatedName: string;\n  type: string;\n}\n\nexport interface Point {\n  x: Date;\n  y: number | string | undefined;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { IconProps } from 'sonar-ui-common/components/icons/Icon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { isPullRequest } from '../../helpers/branch-like';\nimport { BranchLike } from '../../types/branch-like';\n\nexport interface BranchLikeIconProps extends IconProps {\n  branchLike: BranchLike;\n}\n\nexport default function BranchLikeIcon({ branchLike, ...props }: BranchLikeIconProps) {\n  if (isPullRequest(branchLike)) {\n    return <PullRequestIcon {...props} />;\n  } else {\n    return <BranchIcon {...props} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as startOfDay from 'date-fns/start_of_day';\nimport { isEqual } from 'lodash';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\nimport {\n  cleanQuery,\n  parseAsArray,\n  parseAsDate,\n  parseAsString,\n  serializeDate,\n  serializeString,\n  serializeStringArray\n} from 'sonar-ui-common/helpers/query';\nimport { DEFAULT_GRAPH } from '../../components/activity-graph/utils';\nimport { GraphType } from '../../types/project-activity';\n\nexport interface Query {\n  category: string;\n  customMetrics: string[];\n  from?: Date;\n  graph: GraphType;\n  project: string;\n  selectedDate?: Date;\n  to?: Date;\n}\n\nexport const EVENT_TYPES = ['VERSION', 'QUALITY_GATE', 'QUALITY_PROFILE', 'OTHER'];\nexport const APPLICATION_EVENT_TYPES = ['QUALITY_GATE', 'DEFINITION_CHANGE', 'OTHER'];\n\nexport function activityQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.category !== nextQuery.category || datesQueryChanged(prevQuery, nextQuery);\n}\n\nexport function customMetricsChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.customMetrics, nextQuery.customMetrics);\n}\n\nexport function datesQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.from, nextQuery.from) || !isEqual(prevQuery.to, nextQuery.to);\n}\n\nexport function historyQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.graph !== nextQuery.graph;\n}\n\nexport function selectedDateQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.selectedDate, nextQuery.selectedDate);\n}\n\ninterface AnalysesByDay {\n  byDay: T.Dict<T.ParsedAnalysis[]>;\n  version: string | null;\n  key: string | null;\n}\n\nexport function getAnalysesByVersionByDay(\n  analyses: T.ParsedAnalysis[],\n  query: Pick<Query, 'category' | 'from' | 'to'>\n) {\n  return analyses.reduce<AnalysesByDay[]>((acc, analysis) => {\n    let currentVersion = acc[acc.length - 1];\n    const versionEvent = analysis.events.find(event => event.category === 'VERSION');\n    if (versionEvent) {\n      const newVersion = { version: versionEvent.name, key: versionEvent.key, byDay: {} };\n      if (!currentVersion || Object.keys(currentVersion.byDay).length > 0) {\n        acc.push(newVersion);\n      } else {\n        acc[acc.length - 1] = newVersion;\n      }\n      currentVersion = newVersion;\n    } else if (!currentVersion) {\n      // APPs don't have version events, so let's create a fake one\n      currentVersion = { version: null, key: null, byDay: {} };\n      acc.push(currentVersion);\n    }\n\n    const day = startOfDay(parseDate(analysis.date))\n      .getTime()\n      .toString();\n\n    let matchFilters = true;\n    if (query.category || query.from || query.to) {\n      const isAfterFrom = !query.from || analysis.date >= query.from;\n      const isBeforeTo = !query.to || analysis.date <= query.to;\n      const hasSelectedCategoryEvents =\n        !query.category || analysis.events.find(event => event.category === query.category) != null;\n      matchFilters = isAfterFrom && isBeforeTo && hasSelectedCategoryEvents;\n    }\n\n    if (matchFilters) {\n      if (!currentVersion.byDay[day]) {\n        currentVersion.byDay[day] = [];\n      }\n      currentVersion.byDay[day].push(analysis);\n    }\n    return acc;\n  }, []);\n}\n\nexport function parseQuery(urlQuery: T.RawQuery): Query {\n  return {\n    category: parseAsString(urlQuery['category']),\n    customMetrics: parseAsArray(urlQuery['custom_metrics'], parseAsString),\n    from: parseAsDate(urlQuery['from']),\n    graph: parseGraph(urlQuery['graph']),\n    project: parseAsString(urlQuery['id']),\n    to: parseAsDate(urlQuery['to']),\n    selectedDate: parseAsDate(urlQuery['selected_date'])\n  };\n}\n\nexport function serializeQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    from: serializeDate(query.from),\n    project: serializeString(query.project),\n    to: serializeDate(query.to)\n  });\n}\n\nexport function serializeUrlQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    custom_metrics: serializeStringArray(query.customMetrics),\n    from: serializeDate(query.from),\n    graph: serializeGraph(query.graph),\n    id: serializeString(query.project),\n    to: serializeDate(query.to),\n    selected_date: serializeDate(query.selectedDate)\n  });\n}\n\nfunction parseGraph(value?: string) {\n  const graph = parseAsString(value);\n  return Object.keys(GraphType).includes(graph) ? (graph as GraphType) : DEFAULT_GRAPH;\n}\n\nfunction serializeGraph(value?: GraphType) {\n  return value === DEFAULT_GRAPH ? undefined : value;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { BranchLike } from '../../types/branch-like';\n\ninterface ComponentContextType {\n  branchLike: BranchLike | undefined;\n  component: T.Component | undefined;\n}\n\nexport const ComponentContext = React.createContext<ComponentContextType>({\n  branchLike: undefined,\n  component: undefined\n});\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getProjectActivity(\n  data: {\n    project: string;\n    category?: string;\n    from?: string;\n    p?: number;\n    ps?: number;\n  } & BranchParameters\n): Promise<{ analyses: T.Analysis[]; paging: T.Paging }> {\n  return getJSON('/api/project_analyses/search', data).catch(throwGlobalError);\n}\n\ninterface CreateEventResponse {\n  analysis: string;\n  key: string;\n  name: string;\n  category: string;\n  description?: string;\n}\n\nexport function createEvent(\n  analysis: string,\n  name: string,\n  category?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { analysis, name };\n  if (category) {\n    data.category = category;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/create_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteEvent(event: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete_event', { event }).catch(throwGlobalError);\n}\n\nexport function changeEvent(\n  event: string,\n  name?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { event };\n  if (name) {\n    data.name = name;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/update_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteAnalysis(analysis: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete', { analysis }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { limitComponentName } from 'sonar-ui-common/helpers/path';\nimport { isMainBranch } from '../../../helpers/branch-like';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BranchLike } from '../../../types/branch-like';\n\nexport type DefinitionChangeEvent = T.AnalysisEvent &\n  Required<Pick<T.AnalysisEvent, 'definitionChange'>>;\n\nexport function isDefinitionChangeEvent(event: T.AnalysisEvent): event is DefinitionChangeEvent {\n  return event.category === 'DEFINITION_CHANGE' && event.definitionChange !== undefined;\n}\n\ninterface Props {\n  branchLike: BranchLike | undefined;\n  event: DefinitionChangeEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class DefinitionChangeEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  renderProjectLink = (project: { key: string; name: string }, branch: string | undefined) => (\n    <Link\n      onClick={this.stopPropagation}\n      title={project.name}\n      to={getProjectUrl(project.key, branch)}>\n      {limitComponentName(project.name, 28)}\n    </Link>\n  );\n\n  renderBranch = (branch = translate('branches.main_branch')) => (\n    <span className=\"nowrap\" title={branch}>\n      <BranchIcon className=\"little-spacer-left text-text-top\" />\n      {branch}\n    </span>\n  );\n\n  renderProjectChange(project: {\n    changeType: string;\n    key: string;\n    name: string;\n    branch?: string;\n    newBranch?: string;\n    oldBranch?: string;\n  }) {\n    const mainBranch = !this.props.branchLike || isMainBranch(this.props.branchLike);\n\n    if (project.changeType === 'ADDED') {\n      const message = mainBranch\n        ? 'event.definition_change.added'\n        : 'event.definition_change.branch_added';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'REMOVED') {\n      const message = mainBranch\n        ? 'event.definition_change.removed'\n        : 'event.definition_change.branch_removed';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'BRANCH_CHANGED') {\n      return (\n        <FormattedMessage\n          defaultMessage={translate('event.definition_change.branch_replaced')}\n          id=\"event.definition_change.branch_replaced\"\n          values={{\n            project: this.renderProjectLink(project, project.newBranch),\n            oldBranch: this.renderBranch(project.oldBranch),\n            newBranch: this.renderBranch(project.newBranch)\n          }}\n        />\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note\">{translate('event.category', event.category)}:</span>\n\n        <div>\n          <ResetButtonLink\n            className=\"project-activity-event-inner-more-link\"\n            onClick={this.toggleProjectsList}\n            stopPropagation={true}>\n            {expanded ? translate('hide') : translate('more')}\n            <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n          </ResetButtonLink>\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.definitionChange.projects.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                {this.renderProjectChange(project)}\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport Level from 'sonar-ui-common/components/ui/Level';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\n\nexport type RichQualityGateEvent = T.AnalysisEvent & Required<Pick<T.AnalysisEvent, 'qualityGate'>>;\n\nexport function isRichQualityGateEvent(event: T.AnalysisEvent): event is RichQualityGateEvent {\n  return event.category === 'QUALITY_GATE' && event.qualityGate !== undefined;\n}\n\ninterface Props {\n  event: RichQualityGateEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class RichQualityGateEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note spacer-right\">{translate('event.category', event.category)}:</span>\n        {event.qualityGate.stillFailing ? (\n          <FormattedMessage\n            defaultMessage={translate('event.quality_gate.still_x')}\n            id=\"event.quality_gate.still_x\"\n            values={{ status: <Level level={event.qualityGate.status} small={true} /> }}\n          />\n        ) : (\n          <Level level={event.qualityGate.status} small={true} />\n        )}\n\n        <div>\n          {event.qualityGate.failing.length > 0 && (\n            <ResetButtonLink\n              className=\"project-activity-event-inner-more-link\"\n              onClick={this.toggleProjectsList}\n              stopPropagation={true}>\n              {expanded ? translate('hide') : translate('more')}\n              <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n            </ResetButtonLink>\n          )}\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.qualityGate.failing.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                <Level\n                  aria-label={translate('quality_gates.status')}\n                  className=\"spacer-right\"\n                  level={event.qualityGate.status}\n                  small={true}\n                />\n                <div className=\"flex-1 text-ellipsis\">\n                  <Link\n                    onClick={this.stopPropagation}\n                    title={project.name}\n                    to={getProjectUrl(project.key, project.branch)}>\n                    <span aria-label={translateWithParameters('project_x', project.name)}>\n                      {project.name}\n                    </span>\n                  </Link>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getNewCodePeriod(data?: {\n  project?: string;\n  branch?: string;\n}): Promise<T.Omit<T.NewCodePeriod, 'effectiveValue'>> {\n  return getJSON('/api/new_code_periods/show', data).catch(throwGlobalError);\n}\n\nexport function setNewCodePeriod(data: {\n  project?: string;\n  branch?: string;\n  type: T.NewCodePeriodSettingType;\n  value?: string;\n}): Promise<void> {\n  return post('/api/new_code_periods/set', data).catch(throwGlobalError);\n}\n\nexport function resetNewCodePeriod(data: { project?: string; branch?: string }): Promise<void> {\n  return post('/api/new_code_periods/unset', data).catch(throwGlobalError);\n}\n\nexport function listBranchesNewCodePeriod(data: {\n  project: string;\n}): Promise<{ newCodePeriods: T.NewCodePeriodBranch[] }> {\n  return getJSON('/api/new_code_periods/list', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport function validateDays(days: string) {\n  const parsed = parseInt(days, 10);\n\n  return !(days.length < 1 || isNaN(parsed) || parsed < 1 || String(parsed) !== days);\n}\n\nexport function getSettingValue({\n  analysis,\n  days,\n  referenceBranch,\n  type\n}: {\n  analysis?: string;\n  days?: string;\n  referenceBranch?: string;\n  type?: T.NewCodePeriodSettingType;\n}) {\n  switch (type) {\n    case 'NUMBER_OF_DAYS':\n      return days;\n    case 'REFERENCE_BRANCH':\n      return referenceBranch;\n    case 'SPECIFIC_ANALYSIS':\n      return analysis;\n    default:\n      return undefined;\n  }\n}\n\nexport function validateSetting(state: {\n  analysis?: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  overrideGeneralSetting?: boolean;\n  referenceBranch?: string;\n  selected?: T.NewCodePeriodSettingType;\n}) {\n  const {\n    analysis = '',\n    currentSetting,\n    currentSettingValue,\n    days,\n    overrideGeneralSetting,\n    referenceBranch = '',\n    selected\n  } = state;\n\n  let isChanged;\n  if (!currentSetting && overrideGeneralSetting !== undefined) {\n    isChanged = overrideGeneralSetting;\n  } else {\n    isChanged =\n      overrideGeneralSetting === false ||\n      selected !== currentSetting ||\n      (selected === 'NUMBER_OF_DAYS' && days !== currentSettingValue) ||\n      (selected === 'SPECIFIC_ANALYSIS' && analysis !== currentSettingValue) ||\n      (selected === 'REFERENCE_BRANCH' && referenceBranch !== currentSettingValue);\n  }\n\n  const isValid =\n    overrideGeneralSetting === false ||\n    selected === 'PREVIOUS_VERSION' ||\n    (selected === 'SPECIFIC_ANALYSIS' && analysis.length > 0) ||\n    (selected === 'NUMBER_OF_DAYS' && validateDays(days)) ||\n    (selected === 'REFERENCE_BRANCH' && referenceBranch.length > 0);\n\n  return { isChanged, isValid };\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  className?: string;\n  days: string;\n  disabled?: boolean;\n  isChanged: boolean;\n  isValid: boolean;\n  onChangeDays: (value: string) => void;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingDays(props: Props) {\n  const { className, days, disabled, isChanged, isValid, onChangeDays, onSelect, selected } = props;\n  return (\n    <RadioCard\n      className={className}\n      disabled={disabled}\n      onClick={() => onSelect('NUMBER_OF_DAYS')}\n      selected={selected}\n      title={translate('baseline.number_days')}>\n      <>\n        <p className=\"big-spacer-bottom\">{translate('baseline.number_days.description')}</p>\n        {selected && (\n          <>\n            <MandatoryFieldsExplanation />\n\n            <ValidationInput\n              error={undefined}\n              id=\"baseline_number_of_days\"\n              isInvalid={isChanged && !isValid}\n              isValid={isChanged && isValid}\n              label={translate('baseline.specify_days')}\n              required={true}>\n              <input onChange={e => onChangeDays(e.currentTarget.value)} type=\"text\" value={days} />\n            </ValidationInput>\n          </>\n        )}\n      </>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  isDefault?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingPreviousVersion(props: Props) {\n  const { disabled, isDefault, onSelect, selected } = props;\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('PREVIOUS_VERSION')}\n      selected={selected}\n      title={\n        translate('baseline.previous_version') + (isDefault ? ` (${translate('default')})` : '')\n      }>\n      <p>{translate('baseline.previous_version.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ComponentContext } from '../../../app/components/ComponentContext';\nimport { DefinitionChangeEventInner, isDefinitionChangeEvent } from './DefinitionChangeEventInner';\nimport { isRichQualityGateEvent, RichQualityGateEventInner } from './RichQualityGateEventInner';\n\nexport interface EventInnerProps {\n  event: T.AnalysisEvent;\n}\n\nexport default function EventInner({ event }: EventInnerProps) {\n  if (isRichQualityGateEvent(event)) {\n    return <RichQualityGateEventInner event={event} />;\n  } else if (isDefinitionChangeEvent(event)) {\n    return (\n      <ComponentContext.Consumer>\n        {({ branchLike }) => <DefinitionChangeEventInner branchLike={branchLike} event={event} />}\n      </ComponentContext.Consumer>\n    );\n  } else {\n    const content = (\n      <span className=\"text-middle\">\n        <span className=\"note little-spacer-right\">\n          {translate('event.category', event.category)}:\n        </span>\n        <strong className=\"spacer-right\">{event.name}</strong>\n      </span>\n    );\n    return event.description ? <Tooltip overlay={event.description}>{content}</Tooltip> : content;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  changeEvent: (event: string, name: string) => Promise<void>;\n  event: T.AnalysisEvent;\n  header: string;\n  onClose: () => void;\n}\n\ninterface State {\n  name: string;\n}\n\nexport default class ChangeEventForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.event.name };\n  }\n\n  changeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value });\n  };\n\n  handleSubmit = () => {\n    return this.props.changeEvent(this.props.event.key, this.state.name);\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('change_verb')}\n        confirmDisable={!name || name === this.props.event.name}\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onConfirm={this.handleSubmit}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label>{translate('name')}</label>\n          <input autoFocus={true} onChange={this.changeInput} type=\"text\" value={name} />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface RemoveEventFormProps {\n  analysisKey: string;\n  event: T.AnalysisEvent;\n  header: string;\n  removeEventQuestion: string;\n  onClose: () => void;\n  onConfirm: (analysis: string, event: string) => Promise<void>;\n}\n\nexport default function RemoveEventForm(props: RemoveEventFormProps) {\n  const { analysisKey, event, header, removeEventQuestion } = props;\n  return (\n    <ConfirmModal\n      confirmButtonText={translate('delete')}\n      header={header}\n      isDestructive={true}\n      onClose={props.onClose}\n      onConfirm={() => props.onConfirm(analysisKey, event.key)}>\n      {removeEventQuestion}\n    </ConfirmModal>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { DeleteButton, EditButton } from 'sonar-ui-common/components/controls/buttons';\nimport ProjectEventIcon from 'sonar-ui-common/components/icons/ProjectEventIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport EventInner from './EventInner';\nimport ChangeEventForm from './forms/ChangeEventForm';\nimport RemoveEventForm from './forms/RemoveEventForm';\n\nexport interface EventProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  event: T.AnalysisEvent;\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysisKey: string, event: string) => Promise<void>;\n}\n\nexport function Event(props: EventProps) {\n  const { analysisKey, event, canAdmin, isFirst } = props;\n\n  const [changing, setChanging] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n\n  const isOther = event.category === 'OTHER';\n  const isVersion = event.category === 'VERSION';\n  const canChange = (isOther || isVersion) && props.onChange;\n  const canDelete = (isOther || (isVersion && !isFirst)) && props.onDelete;\n  const showActions = canAdmin && (canChange || canDelete);\n\n  return (\n    <div className=\"project-activity-event\">\n      <ProjectEventIcon\n        className={classNames(\n          'project-activity-event-icon little-spacer-right text-middle',\n          event.category\n        )}\n      />\n\n      <EventInner event={event} />\n\n      {showActions && (\n        <span className=\"nowrap\">\n          {canChange && (\n            <EditButton\n              aria-label={translate('project_activity.events.tooltip.edit')}\n              className=\"button-small\"\n              data-test=\"project-activity__edit-event\"\n              onClick={() => setChanging(true)}\n              stopPropagation={true}\n            />\n          )}\n          {canDelete && (\n            <DeleteButton\n              aria-label={translate('project_activity.events.tooltip.delete')}\n              className=\"button-small\"\n              data-test=\"project-activity__delete-event\"\n              onClick={() => setDeleting(true)}\n              stopPropagation={true}\n            />\n          )}\n        </span>\n      )}\n\n      {changing && props.onChange && (\n        <ChangeEventForm\n          changeEvent={props.onChange}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.change_version')\n              : translate('project_activity.change_custom_event')\n          }\n          onClose={() => setChanging(false)}\n        />\n      )}\n\n      {deleting && props.onDelete && (\n        <RemoveEventForm\n          analysisKey={analysisKey}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.remove_version')\n              : translate('project_activity.remove_custom_event')\n          }\n          onClose={() => setDeleting(false)}\n          onConfirm={props.onDelete}\n          removeEventQuestion={translate(\n            `project_activity.${isVersion ? 'remove_version' : 'remove_custom_event'}.question`\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(Event);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport Event from './Event';\n\nexport interface EventsProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  events: T.AnalysisEvent[];\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysis: string, event: string) => Promise<void>;\n}\n\nexport function Events(props: EventsProps) {\n  const { analysisKey, canAdmin, events, isFirst } = props;\n\n  const sortedEvents = sortBy(\n    events,\n    // versions last\n    event => (event.category === 'VERSION' ? 1 : 0),\n    // then the rest sorted by category\n    'category'\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      {sortedEvents.map(event => (\n        <Event\n          analysisKey={analysisKey}\n          canAdmin={canAdmin}\n          event={event}\n          isFirst={isFirst}\n          key={event.key}\n          onChange={props.onChange}\n          onDelete={props.onDelete}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(Events);\n"],"sourceRoot":""}