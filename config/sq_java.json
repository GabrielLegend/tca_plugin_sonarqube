[
  {
    "name": "tca_plugin_sonarqube_java",
    "display_name": "SonarQubeJava",
    "description": "Java static analyzer(need compile)",
    "license": "LGPL-3.0",
    "task_processes": [
      "analyze",
      "datahandle"
    ],
    "scan_app": "codelint",
    "scm_url": "https://github.com/GabrielLegend/tca_plugin_sonarqube.git",
    "run_cmd": "python src/sq_java.py",
    "envs": "python_version = 3",
    "build_flag": true,
    "checkrule_set": [
      {
        "real_name": "common-jsp:FailedUnitTests",
        "display_name": "CommonJspFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-jsp:DuplicatedBlocks",
        "display_name": "CommonJspDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-jsp:InsufficientCommentDensity",
        "display_name": "CommonJspInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-jsp:SkippedUnitTests",
        "display_name": "CommonJspSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-jsp:InsufficientBranchCoverage",
        "display_name": "CommonJspInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-jsp:InsufficientLineCoverage",
        "display_name": "CommonJspInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-java:FailedUnitTests",
        "display_name": "CommonJavaFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-java:SkippedUnitTests",
        "display_name": "CommonJavaSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-java:DuplicatedBlocks",
        "display_name": "CommonJavaDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-java:InsufficientCommentDensity",
        "display_name": "CommonJavaInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-java:InsufficientLineCoverage",
        "display_name": "CommonJavaInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-java:InsufficientBranchCoverage",
        "display_name": "CommonJavaInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "java:S2225",
        "display_name": "JavaS2225",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"toString()\" and \"clone()\" methods should not return null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `toString()` or `clone()` on an object should always return a string or an object. Returning `null`\ninstead contravenes the method's implicit contract.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE CWE-476](http://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "java:S5612",
        "display_name": "JavaS5612",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lambdas should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.\n",
        "disable": false
      },
      {
        "real_name": "java:S5854",
        "display_name": "JavaS5854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Regexes containing characters subject to normalization should use the CANON_EQ flag",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCharacters like `'é'` can be expressed either as a single code point or as a cluster of the letter `'e'` and a combining\naccent mark. Without the `CANON_EQ` flag, a regex will only match a string in which the characters are expressed in the same way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1258",
        "display_name": "JavaS1258",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes and enums with private members should have a constructor",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNon-abstract classes and enums with non-`static`, `private` members should explicitly initialize those members, either in a\nconstructor or with a default value.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Class implementing a Builder Pattern (name ending with \"Builder\"). \n  <li> [Java EE](https://docs.oracle.com/javaee/7/tutorial/index.html) class annotated with:\n    <ul>\n      -  [ManagedBean](https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html) \n      -  [MessageDriven](https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html) \n      -  [Singleton](https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html) \n      -  [Stateful](https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html) \n      -  [Stateless](https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html) \n      -  [WebService](https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html) \n      -  [WebFilter](https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html) \n      -  [WebServlet](https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html) \n    \n      <li> [Plexus Component Annotations](https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html)\n      </li>\n      -  [Maven Mojo](https://maven.apache.org/developers/mojo-api-specification.html) \n    \n      -  [Resource](https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html) \n      -  [EJB](https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html) \n      -  [Inject](https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html) \n      <li> <a\n      href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowired</a> </li>\n    ",
        "disable": false
      },
      {
        "real_name": "java:S5853",
        "display_name": "JavaS5853",
        "severity": "info",
        "category": "convention",
        "rule_title": "Consecutive AssertJ \"assertThat\" statements should be chained",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertJ assertions methods targeting the same object can be chained instead of using multiple `assertThat`. It avoids duplication and\nincreases the clarity of the code.\n\nThis rule raises an issue when multiples `assertThat` target the same tested value.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3436",
        "display_name": "JavaS3436",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Value-based classes should not be used for locking",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the documentation,\n\n> \n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n\n\nThis is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n`struct`s in other languages) that will come in future versions of Java.\n\n> \n  Instances of a value-based class ... \n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of\n    returned instances; </li>\n  </ul>\n\n\nThis means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.\n\nUnder Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.\n\nThis rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the `java.time`\npackage except `Clock`; the date classes for alternate calendars, `HijrahDate`, `JapaneseDate`,\n`MinguoDate`, `ThaiBuddhistDate`; and the optional classes: `Optional`, `OptionalDouble`,\n`OptionalLong`, `OptionalInt`.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [Value-based classes](https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S2226",
        "display_name": "JavaS2226",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Servlets should not have mutable instance fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected\nbehavior at runtime, all servlet fields should then be either `static` and/or `final`, or simply removed.\n\nWith Struts 1.X, the same constraint exists on `org.apache.struts.action.Action`.\n\n## Noncompliant Code Example\n\nor \n\n## Exceptions\n\n  <li> Fields annotated with `@javax.inject.Inject`, `@javax.ejb.EJB`,\n  `@org.springframework.beans.factory.annotation.Autowired`, `@javax.annotation.Resource` </li>\n  -  Fields initialized in `init()` or `init(ServletConfig config)` methods \n\n## See\n\n  -  [CERT, MSC11-J.](https://wiki.sei.cmu.edu/confluence/x/2TZGBQ) - Do not let session information leak within a servlet \n",
        "disable": false
      },
      {
        "real_name": "java:S2589",
        "display_name": "JavaS2589",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Boolean expressions should not be gratuitous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570) - Expression is Always False \n",
        "disable": false
      },
      {
        "real_name": "java:S5977",
        "display_name": "JavaS5977",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Tests should use fixed data instead of randomized data",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTests should always:\n\n  -  Make sure that production code behaves as expected, including edge cases. \n  -  Be easy to debug, i.e. understandable and reproducible. \n\nUsing random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.\n\nThere is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as <a\nhref=\"https://github.com/jlink/jqwik\">jqwik</a>.\n\nThis rule raises an issue when `new Random()` or `UUID.randomUUID()` are called in test code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n  -  [Jqwik test engine](https://jqwik.net/) \n",
        "disable": false
      },
      {
        "real_name": "java:S1135",
        "display_name": "JavaS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "java:S5856",
        "display_name": "JavaS5856",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Regular expressions should be syntactically valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRegular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.\n\nTo avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.\n\nTo match a literal string, rather than a regular expression, either all special characters should be escaped or the `Pattern.LITERAL`\nflag or methods that don't use regular expressions should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5976",
        "display_name": "JavaS5976",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Similar tests should be grouped in a single Parameterized test",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc...).\n\nThe right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.\n\nThis rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.\n\n## Noncompliant Code Example\n\nwith JUnit 5\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> [JUnit 5 documentation - Parameterized tests](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests)\n  </li>\n  -  [Writing Parameterized Tests With JUnit 4](https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/) \n  -  [TestNG documentation - Parameters](https://testng.org/doc/documentation-main.html#parameters) \n",
        "disable": false
      },
      {
        "real_name": "java:S4524",
        "display_name": "JavaS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nlast one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1134",
        "display_name": "JavaS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "java:S5855",
        "display_name": "JavaS5855",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Regex alternatives should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\n\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it's a sign that this regex\ndoes not match what it was intended to match and should be reworked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1133",
        "display_name": "JavaS1133",
        "severity": "info",
        "category": "convention",
        "rule_title": "Deprecated code should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2221",
        "display_name": "JavaS2221",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Exception\" should not be caught when not required by called methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCatching `Exception` seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the `catch` clause.\n\nThis rule raises an issue if `Exception` is caught when it is not explicitly thrown by a method in the `try` block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor if runtime exceptions should not be caught:\n\n## See\n\n  -  [MITRE, CWE-396](http://cwe.mitre.org/data/definitions/396.html) - Declaration of Catch for Generic Exception \n",
        "disable": false
      },
      {
        "real_name": "java:S5850",
        "display_name": "JavaS5850",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Alternatives in regular expressions should be grouped when used with anchors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn regular expressions, anchors (`^`, `$`, `\\A`, `\\Z` and `\\z`) have higher precedence than\nthe `|` operator. So in a regular expression like `^alt1|alt2|alt3$`, `alt1` would be anchored to the beginning,\n`alt3` to the end and `alt2` wouldn't be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.\n\nIn cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\nor, if you do want the anchors to only apply to `a` and `c` respectively:\n",
        "disable": false
      },
      {
        "real_name": "java:S1132",
        "display_name": "JavaS1132",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings literals should be placed on the left side when checking for equality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is preferable to place string literals on the left-hand side of an `equals()` or `equalsIgnoreCase()` method call.\n\nThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5970",
        "display_name": "JavaS5970",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Spring's ModelAndViewAssert assertions should be used instead of other assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring's `ModelAndViewAssert` assertions class, instead of manually testing MVC's\nproperties.\n\n&nbsp;\n\nThis rule raises an issue when&nbsp;Spring's `ModelAndViewAssert` assertions should be used instead of manual testing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\">ModelAndViewAssert Javadoc</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3553",
        "display_name": "JavaS3553",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Optional\" should not be used for parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Java language authors have been quite frank that `Optional` was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. \n\nAnd for that, it's valuable but using `Optional` on the input side increases the work you have to do in the method without really\nincreasing the value. With an `Optional` parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have `Optional` parameters.\n\nThe rule also checks for Guava's `Optional`, as it was the inspiration for the JDK `Optional`. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK `Optional`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2222",
        "display_name": "JavaS2222",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Locks should be released",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a lock is acquired and released within a method, then it must be released along all execution paths of that method.\n\nFailing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-459](https://cwe.mitre.org/data/definitions/459.html) - Incomplete Cleanup \n",
        "disable": false
      },
      {
        "real_name": "java:S5973",
        "display_name": "JavaS5973",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Tests should be stable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can't completely trust these tests, they might fail for many different\nreasons and you don't know if any of them will happen in production.\n\nSome tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.\n\nThis rule raises an issue when the annotation `org.testng.annotations.Test` is given a `successPercentage` argument with a\nvalue lower than `100`.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [TestNG documentation - Annotations](https://testng.org/doc/documentation-main.html#annotations) \n  <li> <a href=\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\">Test Flakiness -\n  Methods for identifying and dealing with flaky tests</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3551",
        "display_name": "JavaS3551",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Overrides should match their parent class methods in synchronization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `@Overrides` of `synchronized` methods are not themselves `synchronized`, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, TSM00-J](https://wiki.sei.cmu.edu/confluence/x/gzdGBQ) - Do not override thread-safe methods with methods that are not\n  thread-safe </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5852",
        "display_name": "JavaS5852",
        "severity": "error",
        "category": "security",
        "rule_title": "Using slow regular expressions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the regular expression engines use `backtracking` to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called `catastrophic backtracking` situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n`catastrophic backtracking` and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).\n\nThis rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.\n\nNote that, due to improvements to the matching algorithm, some cases of exponential runtime complexity have become impossible when run using JDK 9\nor later. In such cases, an issue will only be reported if the project's target Java version is 8 or earlier.\n\n## Ask Yourself Whether\n\n  -  The input is user-controlled. \n  -  The input size is not restricted to a small number of characters. \n  -  There is no timeout in place to limit the regex evaluation time. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nTo avoid `catastrophic backtracking` situations, make sure that none of the following conditions apply to your regular expression.\n\nIn all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using `String.matches`), the end of the\nregex counts as a pattern that can fail because it will only succeed when the end of the string is reached.\n\n  <li> If you have a non-possessive repetition `r*` or `r*?`, such that the regex `r` could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  `r` contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there's only\n  one way to match it).\n    <ul>\n      <li> When using JDK 9 or later an optimization applies when the repetition is greedy and the entire regex does not contain any back references.\n      In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of alternations or optional parts).\n      </li>\n    \nIn order to rewrite your regular expression without these patterns, consider the following strategies:\n\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like `{1,5}` instead of `+`\n  for instance. </li>\n  <li> Refactor `nested quantifiers` to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation `(ba+)+` doesn't cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one `b` char per repetition of the group. </li>\n  -  Optimize regular expressions with `possessive quantifiers` and `atomic grouping`. \n  <li> Use negated character classes instead of `.` to exclude separators where applicable. For example the quadratic regex\n  `.*_.*` can be made linear by changing it to `[^_]*_.*` </li>\n\nSometimes it's not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:\n\n  -  Solve the problem without regular expressions \n  <li> Use an alternative non-backtracking regex implementations such as Google's [RE2](https://github.com/google/re2) or <a\n  href=\"https://github.com/google/re2j\">RE2/J</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace `str.split(\"\\\\s*,\\\\s*\")` with `str.split(\",\")` and\n  then trimming the spaces from the strings as a second step. </li>\n  <li> When using `Matcher.find()`, it is often possible to make the regex infallible by making all the parts that could fail optional,\n  which will prevent backtracking. Of course this means that you'll accept more strings than intended, but this can be handled by using capturing\n  groups to check whether the optional parts were matched or not and then ignoring the match if they weren't. For example the regex `x*y`\n  could be replaced with `x*(y)?` and then the call to `matcher.find()` could be replaced with <code>matcher.find() &amp;&amp;\n  matcher.group(1) != null</code>. </li>\n\n## Sensitive Code Example\n\nThe first regex evaluation will never end in `JDK` &lt;= 9 and the second regex evaluation will never end in any versions of the\n`JDK`:\n\n## Compliant Solution\n\nPossessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n  <li> [owasp.org](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> [stackstatus.net](https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016) - Outage Postmortem - July 20, 2016\n  </li>\n  <li> [regular-expressions.info](https://www.regular-expressions.info/catastrophic.html) - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1130",
        "display_name": "JavaS1130",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"throws\" declarations should not be superfluous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn exception in a `throws` declaration in Java is superfluous if it is:\n\n  -  listed multiple times \n  -  a subclass of another listed exception \n  -  completely unnecessary because the declared exception type cannot actually be thrown \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule will not raise any issue for exceptions that cannot be thrown from the method body:\n\n  -  in overriding and implementation methods \n  -  in interface `default` methods \n  -  in non-private methods that only `throw`, have empty bodies, or a single return statement. \n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc </li>\n\nAlso, the rule won't raise issues on `RuntimeException`, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method's users, and can even be considered as good practice.\n",
        "disable": false
      },
      {
        "real_name": "java:S2583",
        "display_name": "JavaS2583",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Conditionally executed code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConditional expressions which are always `true` or `false` can lead to dead code. Such code is always buggy and should never\nbe used in production.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule will not raise an issue in either of these cases:\n\n  -  When the condition is a single `final boolean` \n\n  -  When the condition is literally `true` or `false`. \n\nIn these cases it is obvious the code is as intended.\n\n## See\n\n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3439",
        "display_name": "JavaS3439",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"DefaultMessageListenerContainer\" instances should not drop messages during restarts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`DefaultMessageListenerContainer` is implemented as a JMS poller. While the Spring container is shutting itself down, as each\nin-progress JMS `Consumer.receive()` call completes, any non-`null` return value will be a JMS message that the DMLC will\n**discard** due to the shutdown in progress. That will result in the received message never being processed. \n\nTo prevent message loss during restart operations, set `acceptMessagesWhileStopping` to `true` so that such messages will be\nprocessed before shut down.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5979",
        "display_name": "JavaS5979",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Annotated Mockito objects should be initialized",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nObjects annotated with Mockito annotations `@Mock`,&nbsp;`@Spy`,&nbsp;`@Captor`,&nbsp;or `@InjectMocks`\nneed to be initialized explicitly.\n\nThere are several ways to do this:\n\n  -  Call `MockitoAnnotations.openMocks(this)` or&nbsp;`MockitoAnnotations.initMocks(this)`&nbsp;in a setup method \n  -  Annotate test class with&nbsp;`@RunWith(MockitoJUnitRunner.class)`&nbsp;(JUnit 4) \n  -  Annotate test class with&nbsp;`@ExtendWith(MockitoExtension.class)`&nbsp;(JUnit 5 Jupiter) \n  -  Use&nbsp;`@Rule public MockitoRule rule = MockitoJUnit.rule();` \n\nTest using uninitialized mocks will fail.\n\nNote that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via `Mockito.mock()` or\n`Mockito.spy()`.\n\nThis rule raises an issue when a test class uses uninitialized mocks.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Mockito documentation - MockitoAnnotations](https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html) \n  -  [Mockito documentation - MockitoRule ](https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S2229",
        "display_name": "JavaS2229",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Methods should not call same-class methods with incompatible \"@Transactional\" values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using Spring proxies, calling a method in the same class (e.g. `this.aMethod()`) with an incompatible `@Transactional`\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. \n\nTherefore, certain calls should never be made within the same class:\n      |From      |To    \n      | non-`@Transactional`       | MANDATORY, NESTED, REQUIRED, REQUIRES_NEW     \n      | MANDATORY       | NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW     \n      | NESTED       | NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW     \n      | NEVER       | MANDATORY, NESTED, REQUIRED, REQUIRES_NEW     \n      | NOT_SUPPORTED       | MANDATORY, NESTED, REQUIRED, REQUIRES_NEW     \n      | REQUIRED or `@Transactional`       | NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW     \n      | REQUIRES_NEW       | NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW     \n      | SUPPORTS       | MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW     \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2109",
        "display_name": "JavaS2109",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Reflection should not be used to check non-runtime annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe writer of an annotation can set one of three retention policies for it:\n\n  <li> `RetentionPolicy.SOURCE` - these annotations are dropped during compilation, E.G. `@Override`,\n  `@SuppressWarnings`. </li>\n  <li> `RetentionPolicy.CLASS` - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  -  `RetentionPolicy.RUNTIME` - these annotations are present in the class file and loaded into the JVM. \n\nOnly annotations that have been given a `RUNTIME` retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.\n\nThis rule checks that reflection is not used to detect annotations that do not have `RUNTIME` retention.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S5857",
        "display_name": "JavaS5857",
        "severity": "info",
        "category": "convention",
        "rule_title": "Character classes should be preferred over reluctant quantifiers in regular expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to [catastrophic backtracking](https://www.regular-expressions.info/catastrophic.html).\nParticularly when using `.*?` or `.+?` to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example `&lt;.+?&gt;`\nshould be replaced with `&lt;[^&gt;]++&gt;`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThis rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:\n",
        "disable": false
      },
      {
        "real_name": "java:S3437",
        "display_name": "JavaS3437",
        "severity": "info",
        "category": "convention",
        "rule_title": "Value-based objects should not be serialized",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the documentation,\n\n> \n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n\n\nFor example (credit to Brian Goetz), imagine Foo is a value-based class:\n\nSerialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:\n\nSerialization promises that on deserialization of `arr`, elements 0 and 1 **will** be aliased.\n\nWhile these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.\n\nThis rule raises an issue when a `Serializable` class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the `java.time` package except `Clock`; the\ndate classes for alternate calendars: `HijrahDate`, `JapaneseDate`, `MinguoDate`, `ThaiBuddhistDate`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Value-based classes](https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S3438",
        "display_name": "JavaS3438",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse of a Spring `SingleConnectionFactory` without enabling the `reconnectOnException` setting will prevent automatic\nconnection recovery when the connection goes bad. \n\nThat's because the `reconnectOnException` property defaults to `false`. As a result, even if the code that uses this\nconnection factory (Spring's `DefaultMessageListenerContainer` or your own code) has reconnect logic, that code won't work because the\n`SingleConnectionFactory` will act like a single-connection pool by preventing connection `close` calls from actually closing\nanything. As a result, subsequent factory `create` operations will just hand back the original broken `Connection`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S5738",
        "display_name": "JavaS5738",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"@Deprecated\" code marked for removal should never be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava 9 introduced a flag for the `@Deprecated` annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using `forRemoval=true` as annotation parameter. The javadoc of the annotation explicitly\nmention the following: \n\n> \n  If true, it means that this API element is earmarked for removal in a future release.\n  If false, the API element is deprecated, but there is currently no intention to remove it in a future release.\n\n\nWhile usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-477](http://cwe.mitre.org/data/definitions/477.html) - Use of Obsolete Functions \n  -  [CERT, MET02-J.](https://wiki.sei.cmu.edu/confluence/x/6TdGBQ) - Do not use deprecated or obsolete classes or methods \n  -  RSPEC-1874 for standard deprecation use \n",
        "disable": false
      },
      {
        "real_name": "java:S864",
        "display_name": "JavaS864",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Limited dependence should be placed on operator precedence",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. \n\nThis rule raises issues when `&amp;&amp;` and `||` are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:\n      |       |`+`, `-`, `*`, `/`, `%`      |`&lt;&lt;`, `&gt;&gt;`, `&gt;&gt;&gt;`      |`&amp;`      |`^`      | `|`     \n      |`+`, `-`, `*`, `/`, `%`      |       |x      |x      |x      |x    \n      |`&lt;&lt;`, `&gt;&gt;`, `&gt;&gt;&gt;`      |x      |       |x      |x      |x    \n      |`&amp;`      |x      |x      |       |x      |x    \n      |`^`      |x      |x      |x      |       |x    \n      | `|`       |x      |x      |x      |x      |     \n\nThis rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP00-C.](https://wiki.sei.cmu.edu/confluence/x/YdYxBQ) - Use parentheses for precedence of operation \n  -  [CERT, EXP53-J.](https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ) - Use parentheses for precedence of operation \n  -  [MITRE, CWE-783](http://cwe.mitre.org/data/definitions/783.html) - Operator Precedence Logic Error \n",
        "disable": false
      },
      {
        "real_name": "java:S2236",
        "display_name": "JavaS2236",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe methods `wait(...)`, `notify()` and `notifyAll()` are available on a `Thread` instance, but only\nbecause all classes in Java extend `Object` and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a `Thread`:\n\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (`BLOCKED`, `WAITING`, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2115",
        "display_name": "JavaS2115",
        "severity": "error",
        "category": "security",
        "rule_title": "A secure password should be used when connecting to a database",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen relying on the password authentication mode for the database connection, a secure password should be chosen.\n\nThis rule raises an issue when an empty password is used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html) - Broken\n  Authentication </li>\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [MITRE, CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n",
        "disable": false
      },
      {
        "real_name": "java:S1147",
        "display_name": "JavaS1147",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exit methods should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `System.exit(int status)` or `Rutime.getRuntime().exit(int status)` calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling `Runtime.getRuntime().halt(int)` does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.\n\nEach of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThese methods are ignored inside `main`.\n\n## See\n\n  -  [MITRE, CWE-382](http://cwe.mitre.org/data/definitions/382.html) - Use of System.exit() \n  -  [CERT, ERR09-J.](https://wiki.sei.cmu.edu/confluence/x/7zZGBQ) - Do not allow untrusted code to terminate the JVM \n",
        "disable": false
      },
      {
        "real_name": "java:S2116",
        "display_name": "JavaS2116",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"hashCode\" and \"toString\" should not be called on array instances",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile `hashCode` and `toString` are available on arrays, they are largely useless. `hashCode` returns the array's\n\"identity hash code\", and `toString` returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static `Arrays` method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2479",
        "display_name": "JavaS2479",
        "severity": "error",
        "category": "convention",
        "rule_title": "Whitespace and control characters in literals should be explicit",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNon-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII `\\n,\\t,`... or Unicode `U+000D, U+0009,`...).\n\nThis rule raises an issue when the following characters are seen in a literal string:\n\n  -  [ASCII control character](https://en.wikipedia.org/wiki/ASCII#Control_characters). (character index &lt; 32 or = 127) \n  -  Unicode [whitespace characters](https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace). \n  -  Unicode [C0 control characters](https://en.wikipedia.org/wiki/C0_and_C1_control_codes) \n  -  Unicode characters `U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029` \n\nNo issue will be raised on the simple space character. Unicode `U+0020`, ASCII 32.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nText Blocks string literals (java 13 three double-quote marks) can contain tabulations to allow indentation using tabulations.\n",
        "disable": false
      },
      {
        "real_name": "java:S2234",
        "display_name": "JavaS2234",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameters should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5867",
        "display_name": "JavaS5867",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unicode-aware versions of character classes should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using POSIX classes like `\\p{Alpha}` without the `UNICODE_CHARACTER_CLASS` flag or when using hard-coded character\nclasses like `\"[a-zA-Z]\"`, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won't\nbe matched. This may cause code to incorrectly handle input containing such letters.\n\nTo correctly handle non-ASCII input, it is recommended to use Unicode classes like `\\p{IsAlphabetic}`. When using POSIX classes, Unicode\nsupport should be enabled by either passing `Pattern.UNICODE_CHARACTER_CLASS` as a flag to `Pattern.compile` or by using\n`(?U)` inside the regex.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5866",
        "display_name": "JavaS5866",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Case insensitive Unicode regular expressions should enable the “UNICODE_CASE” flag",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy default case insensitivity only affects letters in the ASCII range. This can be changed by either passing `Pattern.UNICODE_CASE` or\n`Pattern.UNICODE_CHARACTER_CLASS` as an argument to `Pattern.compile` or using `(?u)` or `(?U)` within the\nregex.\n\nIf not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2114",
        "display_name": "JavaS2114",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collections should not be passed as arguments to their own methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. \n\nFurther, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1144",
        "display_name": "JavaS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" methods should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n\nNote that this rule does not take reflection into account, which means that issues will be raised on `private` methods that are only\naccessed using the reflection API.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise any issue on annotated methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S2235",
        "display_name": "JavaS2235",
        "severity": "error",
        "category": "convention",
        "rule_title": "IllegalMonitorStateException should not be caught",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to Oracle Javadoc:\n\n> \n  <p>`IllegalMonitorStateException` is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n\n\nIn other words, this exception can be thrown only in case of bad design because `Object.wait(...)`, `Object.notify()` and\n`Object.notifyAll()` methods should never be called on an object whose monitor is not held. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2232",
        "display_name": "JavaS2232",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"ResultSet.isLast()\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons to avoid `ResultSet.isLast()`. First, support for this method is optional for `TYPE_FORWARD_ONLY`\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the `ResultSet` is empty, so some drivers may return the opposite of what is expected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2111",
        "display_name": "JavaS2111",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"BigDecimal(double)\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause of floating point imprecision, you're unlikely to get the value you expect from the `BigDecimal(double)` constructor. \n\nFrom [the JavaDocs](http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)):\n\n> \n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n\n\nInstead, you should use `BigDecimal.valueOf`, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a `String` argument.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, NUM10-J.](https://wiki.sei.cmu.edu/confluence/x/kzdGBQ) - Do not construct BigDecimal objects from floating-point literals\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2112",
        "display_name": "JavaS2112",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `equals` and `hashCode` methods of `java.net.URL` both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. `URI` on the other hand\nmakes no such calls and should be used instead unless the specific `URL` functionality is required.\n\nIn general it is better to use the `URI` class until access to the resource is actually needed, at which point you can just convert the\n`URI` to a `URL` using `URI.toURL()`.\n\nThis rule checks for uses of `URL` 's in `Map` and `Set` , and for explicit calls to the `equals` and\n`hashCode` methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5860",
        "display_name": "JavaS5860",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Names of regular expressions named groups should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhy use named groups only to never use any of them later on in the code?\n\nThis rule raises issues every time named groups are:\n\n  -  defined but never called anywhere in the code through their name; \n  -  defined but called elsewhere in the code by their number instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr, using dedicated variables instead of group names:\n",
        "disable": false
      },
      {
        "real_name": "java:S1143",
        "display_name": "JavaS1143",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Jump statements should not occur in \"finally\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `return`, `break`, `throw`, and so on from a `finally` block suppresses the propagation of any\nunhandled `Throwable` which was thrown in the `try` or `catch` block.\n\nThis rule raises an issue when a jump statement (`break`, `continue`, `return`, `throw`, and\n`goto`) would force control flow to leave a `finally` block. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-584](http://cwe.mitre.org/data/definitions/584.html) - Return Inside Finally Block \n  -  [CERT, ERR04-J.](https://wiki.sei.cmu.edu/confluence/x/BTdGBQ) - Do not complete abruptly from a finally block \n",
        "disable": false
      },
      {
        "real_name": "java:S1264",
        "display_name": "JavaS1264",
        "severity": "info",
        "category": "convention",
        "rule_title": "A \"while\" loop should be used instead of a \"for\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the condition expression is defined in a `for` loop, and the initialization and increment expressions are missing, a\n`while` loop should be used instead to increase readability. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2230",
        "display_name": "JavaS2230",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-public methods should not be \"@Transactional\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a non-public method `@Transactional` is both useless and misleading because Spring doesn't \"see\" non-`public`\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.\n\nTherefore marking a `private` method, for instance, `@Transactional` can only result in a runtime error or exception if the\nmethod is actually written to be `@Transactional`.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S5863",
        "display_name": "JavaS5863",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Assertions should not compare an object to itself",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertions comparing an object to itself are more likely to be bugs due to developer's carelessness.\n\nThis rule raises an issue when the actual expression matches the expected expression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIn a unit test validating the `equals(...)` and `hashCode()` methods, it's legitimate to compare an object to itself. This\nrule does not raise an issue for `isEqualTo`, `assertEquals` or `hasSameHashCodeAs` when the unit test name contains\n(case insensitive): `equal`, `hash_?code`, `object_?method`. For example, in tests with the following names:\n`test_equals`, `testEqual`, `test_hashCode`, `test_hash_code`, `test_object_methods`.\n",
        "disable": false
      },
      {
        "real_name": "java:S1142",
        "display_name": "JavaS1142",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have too many return statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "java:S1141",
        "display_name": "JavaS1141",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Try-catch blocks should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNesting `try`/`catch` blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.\n",
        "disable": false
      },
      {
        "real_name": "java:S2110",
        "display_name": "JavaS2110",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Invalid \"Date\" values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhether the valid value ranges for `Date` fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.\n\nThis rule checks for bad values used in conjunction with `java.util.Date`, `java.sql.Date`, and\n`java.util.Calendar`. Specifically, values outside of the valid ranges:\n      |Field      |Valid    \n      |month      |0-11    \n      |date (day)      |0-31    \n      |hour      |0-23    \n      |minute      |0-60    \n      |second      |0-61    \n\nNote that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S881",
        "display_name": "JavaS881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n\n  -  It can significantly impair the readability of the code. \n  -  It introduces additional side effects into a statement, with the potential for undefined behavior. \n  -  It is safer to use these operators in isolation from any other arithmetic operators. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nThe following sequence is clearer and therefore safer:\n\n## See\n\n  -  [CERT, EXP30-C.](https://wiki.sei.cmu.edu/confluence/x/StYxBQ) - Do not depend on the order of evaluation for side effects \n  -  [CERT, EXP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/IXw-BQ) - Do not depend on the order of evaluation for side effects \n  <li> [CERT, EXP05-J.](https://wiki.sei.cmu.edu/confluence/x/NDdGBQ) - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2119",
        "display_name": "JavaS2119",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"Random\" objects should be reused",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Random` object each time a random value is needed is inefficient and may produce numbers which are not random depending\non the JDK. For better efficiency and randomness, create a single `Random`, then store, and reuse it.\n\nThe `Random()` constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be\nrandom or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.\n\nThis rule finds cases where a new `Random` is created each time a method is invoked and assigned to a local random variable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nA class which uses a `Random` in its constructor or in a static `main` function and nowhere else will be ignored by this\nrule.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5869",
        "display_name": "JavaS5869",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Character classes in regular expressions should not contain the same character twice",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.\n\nThus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like `[0-99]` to match numbers of up to two digits, when in fact it is equivalent to `[0-9]`.\nAnother common cause is forgetting to escape the '`-`' character, creating an unintended range that overlaps with other characters in the\ncharacter class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3329",
        "display_name": "JavaS3329",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher Block Chaining IV's should be unpredictable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is used to randomize the encryption, ie under a given\nkey the same plaintext doesn't always produce the same ciphertext. The IV doesn't need to be secret but should be unpredictable to avoid\n\"Chosen-Plaintext Attack\".\n\nTo generate Initialization Vectors, NIST recommends to use a secure random number generator.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-329](http://cwe.mitre.org/data/definitions/329) - CWE-329: Not Using an Unpredictable IV with CBC Mode \n  -  [MITRE, CWE-330](http://cwe.mitre.org/data/definitions/330) - Use of Insufficiently Random Values \n  <li> [NIST, SP-800-38A](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf) - Recommendation for Block Cipher\n  Modes of Operation </li>\n  -  Derived from FindSecBugs rule [STATIC_IV](https://find-sec-bugs.github.io/bugs.htm#STATIC_IV) \n",
        "disable": false
      },
      {
        "real_name": "java:S5868",
        "display_name": "JavaS5868",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Unicode Grapheme Clusters should be avoided inside regex character classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen placing Unicode [Grapheme Clusters](https://unicode.org/glossary/#grapheme_cluster) (characters which require to be encoded in\nmultiple [Code Points](https://unicode.org/glossary/#code_point)) inside a character class of a regular expression, this will likely lead\nto unintended behavior.\n\nFor instance, the grapheme cluster `c̈` requires two code points: one for `'c'`, followed by one for the **umlaut**\nmodifier `'\\u{0308}'`. If placed within a character class, such as `[c̈]`, the regex will consider the character class being the\nenumeration `[c\\u{0308}]` instead. It will, therefore, match every `'c'` and every **umlaut** that isn't expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.\n\nThis rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1149",
        "display_name": "JavaS1149",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEarly classes of the Java API, such as `Vector`, `Hashtable` and `StringBuffer`, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\n\nIt is better to use their new unsynchronized replacements:\n\n  -  `ArrayList` or `LinkedList` instead of `Vector` \n  -  `Deque` instead of `Stack` \n  -  `HashMap` instead of `Hashtable` \n  -  `StringBuilder` instead of `StringBuffer` \n\nEven when used in synchronized context, you should think twice before using it, since it's usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nUse of those synchronized classes is ignored in the signatures of overriding methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S2118",
        "display_name": "JavaS2118",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-serializable classes should not be written",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that `implements Serializable` or one that extends such a class can successfully be serialized (or de-serialized). \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2445",
        "display_name": "JavaS2445",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Blocks should be synchronized on \"private final\" fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSynchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-`final`\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.\n\nThe story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-412](http://cwe.mitre.org/data/definitions/412.html) - Unrestricted Externally Accessible Lock \n  -  [MITRE, CWE-413](http://cwe.mitre.org/data/definitions/413) - Improper Resource Locking \n  <li> [CERT, LCK00-J.](https://wiki.sei.cmu.edu/confluence/x/djdGBQ) - Use private final lock objects to synchronize classes that may\n  interact with untrusted code </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2203",
        "display_name": "JavaS2203",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"collect\" should be used with \"Streams\" instead of \"list::add\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile you can use either `forEach(list::add)` or `collect` with a `Stream`, `collect` is by far the\nbetter choice because it's automatically thread-safe and parallellizable. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3655",
        "display_name": "JavaS3655",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Optional value should only be accessed after calling isPresent()",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Optional` value can hold either a value or not. The value held in the `Optional` can be accessed using the\n`get()` method, but it will throw a \n\n`NoSuchElementException` if there is no value present. To avoid the exception, calling the `isPresent()` or <code>!\nisEmpty()</code> method should always be done before any call to `get()`.\n\nAlternatively, note that other methods such as `orElse(...)`, `orElseGet(...)` or `orElseThrow(...)` can be used\nto specify what to do with an empty `Optional`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  -  [MITRE, CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n",
        "disable": false
      },
      {
        "real_name": "java:S3776",
        "display_name": "JavaS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of methods should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S3414",
        "display_name": "JavaS3414",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Tests should be kept in a dedicated source directory",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.\n\nThis rule raises an issue when test classes are found in projects containing non-test-related code.\n",
        "disable": false
      },
      {
        "real_name": "java:S5831",
        "display_name": "JavaS5831",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "AssertJ configuration should be applied",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `org.assertj.core.configuration.Configuration` will be effective only once you call `Configuration.apply()` or\n`Configuration.applyAndDisplay()`.\n\nThis rule raises an issue when configurations are set without the appropriate call to apply them.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [AssertJ configuration documentation](https://assertj.github.io/doc/#assertj-configuration) \n",
        "disable": false
      },
      {
        "real_name": "java:S1114",
        "display_name": "JavaS1114",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding the `Object.finalize()` method must be done with caution to dispose some system resources.\n\nCalling the `super.finalize()` at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-568](http://cwe.mitre.org/data/definitions/568.html) - finalize() Method Without super.finalize() \n  -  [CERT, MET12-J.](https://wiki.sei.cmu.edu/confluence/x/4jZGBQ) - Do not use finalizers \n",
        "disable": false
      },
      {
        "real_name": "java:S2325",
        "display_name": "JavaS2325",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"private\" and \"final\" methods that don't access instance data should be \"static\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNon-overridable methods (`private` or `final`) that don't access instance data can be `static` to prevent any\nmisunderstanding about the contract of the method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen `java.io.Serializable` is implemented the following three methods are excluded by the rule:\n\n  -  `private void writeObject(java.io.ObjectOutputStream out) throws IOException;` \n  -  `private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;` \n  -  `private void readObjectNoData() throws ObjectStreamException;` \n",
        "disable": false
      },
      {
        "real_name": "java:S1598",
        "display_name": "JavaS1598",
        "severity": "error",
        "category": "convention",
        "rule_title": "Package declaration should match source file directory",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at `\"src/org/bar/Foo.java\"` should have a package of `\"org.bar\"`. \n\nUnfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.\n\nSimilarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of `org.foo.bar` that is placed in `org/foo.bar` will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n`org/foo/bar` folder. `foo.bar` is therefore not a proper folder name for sources.\n",
        "disable": false
      },
      {
        "real_name": "java:S2446",
        "display_name": "JavaS2446",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"notifyAll\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`notify` and `notifyAll` both wake up sleeping threads, but `notify` only rouses one, while `notifyAll`\nrouses all of them. Since `notify` might not wake up the right thread, `notifyAll` should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, THI02-J.](https://wiki.sei.cmu.edu/confluence/x/MTdGBQ) - Notify all waiting threads rather than a single thread \n",
        "disable": false
      },
      {
        "real_name": "java:S1113",
        "display_name": "JavaS1113",
        "severity": "error",
        "category": "convention",
        "rule_title": "The Object.finalize() method should not be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `Object.finalize()` method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, MET12-J.](https://wiki.sei.cmu.edu/confluence/x/4jZGBQ) - Do not use finalizers \n",
        "disable": false
      },
      {
        "real_name": "java:S2204",
        "display_name": "JavaS2204",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`AtomicInteger`, and `AtomicLong` extend `Number`, but they're distinct from `Integer` and\n`Long` and should be handled differently. `AtomicInteger` and `AtomicLong` are designed to support lock-free,\nthread-safe programming on single variables. As such, an `AtomicInteger` will only ever be \"equal\" to itself. Instead, you should\n`.get()` the value and make comparisons on it.\n\nThis applies to all the atomic, seeming-primitive wrapper classes: `AtomicInteger`, `AtomicLong`, and\n`AtomicBoolean`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2201",
        "display_name": "JavaS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.\n\nTo prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:\n\n  -  `java.lang.String` \n  -  `java.lang.Boolean` \n  -  `java.lang.Integer` \n  -  `java.lang.Double` \n  -  `java.lang.Float` \n  -  `java.lang.Byte` \n  -  `java.lang.Character` \n  -  `java.lang.Short` \n  -  `java.lang.StackTraceElement` \n  -  `java.time.DayOfWeek` \n  -  `java.time.Duration` \n  -  `java.time.Instant` \n  -  `java.time.LocalDate` \n  -  `java.time.LocalDateTime` \n  -  `java.time.LocalTime` \n  -  `java.time.Month` \n  -  `java.time.MonthDay` \n  -  `java.time.OffsetDateTime` \n  -  `java.time.OffsetTime` \n  -  `java.time.Period` \n  -  `java.time.Year` \n  -  `java.time.YearMonth` \n  -  `java.time.ZonedDateTime` \n  -  `java.math.BigInteger` \n  -  `java.math.BigDecimal` \n  -  `java.util.Optional` \n\nAs well as methods of the following classes:\n\n  <li> `java.util.Collection`:\n    <ul>\n      -  `size()` \n      -  `isEmpty()` \n      -  `contains(...)` \n      -  `containsAll(...)` \n      -  `iterator()` \n      -  `toArray()` \n    \n      -  `size()` \n      -  `isEmpty()` \n      -  `containsKey(...)` \n      -  `containsValue(...)` \n      -  `get(...)` \n      -  `getOrDefault(...)` \n      -  `keySet()` \n      -  `entrySet()` \n      -  `values()` \n    \n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will not raise an issue when both these conditions are met:\n\n  -  The method call is in a `try` block with an associated `catch` clause. \n  -  The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is `String.getBytes(Charset)`. \n\n## See\n\n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "java:S2444",
        "display_name": "JavaS2444",
        "severity": "error",
        "category": "convention",
        "rule_title": "Lazy initialization of \"static\" fields should be \"synchronized\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn a multi-threaded situation, un-`synchronized` lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be `synchronized`.\n\nSimilarly, updates of such fields should also be `synchronized`.\n\nThis rule raises an issue whenever a lazy static initialization is done on a class with at least one `synchronized` method, indicating\nintended usage in multi-threaded applications.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5833",
        "display_name": "JavaS5833",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "AssertJ methods setting the assertion context should come before an assertion",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDescribing, setting error message or adding a comparator in [AssertJ](https://assertj.github.io/doc/) must be done before calling the\nassertion, otherwise, settings will not be taken into account.\n\nThis rule raises an issue when one of the method (with all similar methods):\n\n  -  `as` \n  -  `describedAs` \n  -  `withFailMessage` \n  -  `overridingErrorMessage` \n  -  `usingComparator` \n  -  `usingElementComparator` \n  -  `extracting` \n  -  `filteredOn` \n\nis called without calling an AssertJ assertion afterward.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [AssertJ incorrect usage documentation](https://assertj.github.io/doc/#calling-as-after-the-assertion) \n",
        "disable": false
      },
      {
        "real_name": "java:S1596",
        "display_name": "JavaS1596",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince the introduction of generics in Java 5, the use of generic types such as `List&lt;String&gt;` is recommended over the use of raw\nones such as `List`. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old `EMPTY_...`\nfields of the `Collections` class return raw types, whereas the newer `empty...()` methods return generic ones.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4502",
        "display_name": "JavaS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Sensitive Code Example\n\n[Spring Security](https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html) provides by default a\nprotection against CSRF attacks which can be disabled:\n\n## Compliant Solution\n\n[Spring Security](https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html) CSRF protection is\nenabled by default, do not disable it:\n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "java:S1111",
        "display_name": "JavaS1111",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The Object.finalize() method should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. \n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-586](http://cwe.mitre.org/data/definitions/586.html) - Explicit Call to Finalize() \n  -  [CERT, MET12-J.](https://wiki.sei.cmu.edu/confluence/x/4jZGBQ) - Do not use finalizers \n",
        "disable": false
      },
      {
        "real_name": "java:S2441",
        "display_name": "JavaS2441",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-serializable objects should not be stored in \"HttpSession\" objects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you have no intention of writting an `HttpSession` object to file, then storing non-`serializable` objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.\n\nThe point is, that even though `HttpSession` does not `extend Serializable`, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. \n\n## Noncompliant Code Example\n\n## See\n\n  <li> [MITRE, CWE-579](http://cwe.mitre.org/data/definitions/579.html) - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1110",
        "display_name": "JavaS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2442",
        "display_name": "JavaS2442",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Lock\" objects should not be \"synchronized\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`java.util.concurrent.locks.Lock` offers far more powerful and flexible locking operations than are available with\n`synchronized` blocks. So synchronizing on a `Lock` throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using `tryLock()` and `unlock()`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, LCK03-J.](https://wiki.sei.cmu.edu/confluence/x/qjdGBQ) - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2200",
        "display_name": "JavaS2200",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"compareTo\" results should not be checked for specific values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile most `compareTo` methods return -1, 0, or 1, some do not, and testing the result of a `compareTo` against a specific\nvalue other than 0 could result in false negatives.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2681",
        "display_name": "JavaS2681",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiline blocks should be enclosed in curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCurly braces can be omitted from a one-line block, such as with an `if` statement or `for` loop, but doing so can be\nmisleading and induce bugs.\n\nThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\n\nNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-483](http://cwe.mitre.org/data/definitions/483.html) - Incorrect Block Delimitation \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "java:S2440",
        "display_name": "JavaS2440",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes with only \"static\" methods should not be instantiated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`static` methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n`static` methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See Also\n\n  -  {rule:java:S1118} - Utility classes should not have public constructors \n",
        "disable": false
      },
      {
        "real_name": "java:NoSonar",
        "display_name": "JavaNosonar",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"NOSONAR\" comments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny issue to quality rule can be deactivated with the `NOSONAR` marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.\n\nThis rule raises an issue when `NOSONAR` is used.\n",
        "disable": false
      },
      {
        "real_name": "java:S3419",
        "display_name": "JavaS3419",
        "severity": "info",
        "category": "convention",
        "rule_title": "Group ids should follow a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's `groupId` does not match\nthe provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression: `(com|org)(\\.[a-z][a-z-0-9]*)+`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2209",
        "display_name": "JavaS2209",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"static\" members should be accessed statically",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is **possible** to access `static` members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1119",
        "display_name": "JavaS1119",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Labels should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLabels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2208",
        "display_name": "JavaS2208",
        "severity": "error",
        "category": "convention",
        "rule_title": "Wildcard imports should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBlindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nStatic imports are ignored by this rule. E.G.\n",
        "disable": false
      },
      {
        "real_name": "java:S1118",
        "display_name": "JavaS1118",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Utility classes should not have public constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUtility classes, which are collections of `static` members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.\n\nJava adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen class contains `public static void main(String[] args)` method it is not considered as utility class and will be ignored by this\nrule.\n",
        "disable": false
      },
      {
        "real_name": "java:S3415",
        "display_name": "JavaS3415",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assertion arguments should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe standard assertions library methods such as `org.junit.Assert.assertEquals`, and `org.junit.Assert.assertSame` expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it's the other way around, the argument of\n`org.assertj.core.api.Assertions.assertThat` is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing. \n\nThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\n\nSupported frameworks:\n\n  -  JUnit4 \n  -  JUnit5 \n  -  [AssertJ](https://assertj.github.io/doc/) \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5838",
        "display_name": "JavaS5838",
        "severity": "info",
        "category": "convention",
        "rule_title": "Chained AssertJ assertions should be simplified to the corresponding dedicated assertion",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.\n\nThis rule reports an issue when an assertion can be simplified to a dedicated one.\n\nThe array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.\n      |Original      |Dedicated    \n      |&nbsp;Related to Object      |&nbsp;    \n      |`assertThat(getObject()).isEqualTo(null)`      |`assertThat(getObject()).isNull()`    \n      |`assertThat(getBoolean()).isEqualTo(true)`      |`assertThat(getBoolean()).isTrue()`    \n      |`assertThat(getBoolean()).isEqualTo(false)`      |`assertThat(getBoolean()).isFalse()`    \n      |`assertThat(x.equals(y)).isTrue()`      |`assertThat(x).isEqualTo(y)`    \n      |`assertThat(x == y).isTrue()`      |`assertThat(x).isSameAs(y)`    \n      |`assertThat(x == null).isTrue()`      |`assertThat(x).isNull()`    \n      |`assertThat(x.toString()).isEqualTo(y)`      |`assertThat(x).hasToString(y)`    \n      |`assertThat(x.hashCode()).isEqualTo(y.hashCode())`      |`assertThat(x).hasSameHashCodeAs(y));`    \n      |`assertThat(getObject() instanceof MyClass).isTrue()`      |`assertThat(getObject()).isInstanceOf(MyClass.class)`    \n      |Related to `Comparable`      |&nbsp;    \n      |`assertThat(x.compareTo(y)).isZero()`      |`assertThat(x).isEqualByComparingTo(y)`    \n      |`assertThat(x &gt;= y).isGreaterThanOrEqualTo(0)`      |`assertThat(x).isGreaterThanOrEqualTo(y)`    \n      |`assertThat(x &gt; y).isPositive()`      |`assertThat(x).isGreaterThan(y)`    \n      |`assertThat(x &lt;= y).isNotPositive()`      |`assertThat(x).isLessThanOrEqualTo(y)`    \n      |`assertThat(x &lt; y).isTrue()`      |`assertThat(x).isLessThan(y)`    \n      |Related to `String`      |&nbsp;    \n      |`assertThat(getString().isEmpty()).isTrue()`      |`assertThat(getString()).isEmpty()`    \n      |`assertThat(``getString``()).hasSize(0)`      |`assertThat(``getString``()).isEmpty()`    \n      |`assertThat(getString().equals(expected)).isTrue()`      |`assertThat(getString()).isEqualTo(expected)`    \n      |`assertThat(getString().equalsIgnoreCase(expected)).isTrue()`      |`assertThat(getString()).isEqualToIgnoringCase(expected)`    \n      |`assertThat(getString().contains(expected)).isTrue()`      |`assertThat(getString()).contains(expected)`    \n      |`assertThat(getString().startsWith(expected)).isTrue()`      |`assertThat(getString()).startsWith(expected)`    \n      |`assertThat(getString().endsWith(expected)).isTrue()`      |`assertThat(getString()).endsWith(expected)`    \n      |`assertThat(getString().matches(expected)).isTrue()`      |`assertThat(getString()).matches(expected)`    \n      |`assertThat(getString().trim()).isEmpty()`      |`assertThat(getString()).isBlank()`    \n      |`assertThat(getString().length()).isEqualTo(length)`      |`assertThat(getString()).hasSize(length)`    \n      |`assertThat(getString().length()).hasSize(expected.length())`      |`assertThat(getString()).hasSameSizeAs(expected)`    \n      |&nbsp;Related to `File`      |&nbsp;    \n      |`assertThat(getFile()).hasSize(0)`      |`assertThat(getFile()).isEmpty()`    \n      |`assertThat(getFile().length()).isZero()`      |`assertThat(getFile()).isEmpty()`    \n      |`assertThat(getFile().length()).isEqualTo(length)`      |`assertThat(getFile()).hasSize(length)`    \n      |`assertThat(getFile().canRead()).isTrue()`      |`assertThat(getFile()).canRead()`    \n      |`assertThat(getFile().canWrite()).isTrue()`      |`assertThat(getFile()).canWrite()`    \n      |`assertThat(getFile().exists()).isTrue()`      |`assertThat(getFile()).exists()`    \n      |`assertThat(getFile().getName()).isEqualTo(name)`      |`assertThat(getFile()).hasName(name)`    \n      |`assertThat(getFile().getParent()).isEqualTo(pathname)`      |`assertThat(getFile()).hasParent(pathname)`    \n      |`assertThat(getFile().getParentFile()).isNull()`      |`assertThat(getFile()).hasNoParent()`    \n      |`assertThat(getFile().isAbsolute()).isTrue()`      |`assertThat(getFile()).isAbsolute()`    \n      |`assertThat(getFile().isAbsolute()).isFalse()`      |`assertThat(getFile()).isRelative()`    \n      |`assertThat(getFile().isDirectory()).isTrue()`      |`assertThat(getFile()).isDirectory()`    \n      |`assertThat(getFile().isFile()).isTrue()`      |`assertThat(getFile()).isFile()`    \n      |`assertThat(getFile().list()).isEmpty()`      |`assertThat(getFile()).isEmptyDirectory()`    \n      |&nbsp;Related to `Path`      |&nbsp;    \n      |`assertThat(getPath().startsWith(path)).isTrue()`      |`assertThat(getPath()).startsWithRaw(path)`    \n      |`assertThat(getPath().endsWith(path)).isTrue()`      |`assertThat(getPath()).endsWithRaw(path)`    \n      |`assertThat(getPath().getParent()).isEqualTo(name)`      |`assertThat(getPath()).hasParentRaw(name)`    \n      |`assertThat(getPath().getParent()).isNull()`      |`assertThat(getPath()).hasNoParentRaw()`    \n      |`assertThat(getPath().isAbsolute()).isTrue()`      |`assertThat(getPath()).isAbsolute()`    \n      |`assertThat(getPath().isAbsolute()).isFalse()`      |`assertThat(getPath()).isRelative()`    \n      |&nbsp;Related to `Array`      |&nbsp;    \n      |`assertThat(getArray().length).isZero()`      |`assertThat(getArray()).isEmpty()`    \n      |`assertThat(getArray().length).isEqualTo(length)`      |`assertThat(getArray()).hasSize(length)`    \n      |`assertThat(getArray().length).isEqualTo(anotherArray.length)`      |`assertThat(getArray()).hasSameSizeAs(getAnotherArray())`    \n      |`assertThat(getArray().length).isLessThanOrEqualTo(expression)`      |`assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)`    \n      |`assertThat(getArray().length).isLessThan(expression)`      |`assertThat(getArray()).hasSizeLessThan(expression)`    \n      |`assertThat(getArray().length).isGreaterThan(expression)`      |`assertThat(getArray()).hasSizeGreaterThan(expression)`    \n      |`assertThat(getArray().length).isGreaterThanOrEqualTo(expression)`      |`assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)`    \n      |&nbsp;Related to `Collection`      |&nbsp;    \n      |`assertThat(getCollection().isEmpty()).isTrue()`      |`assertThat(getCollection()).isEmpty()`    \n      |`assertThat(getCollection().size()).isZero()`      |`assertThat(getCollection()).isEmpty()`    \n      |`assertThat(getCollection().contains(something)).isTrue()`      |`assertThat(getCollection()).contains(something)`    \n      |`assertThat(getCollection().containsAll(otherCollection)).isTrue()`      |`assertThat(getCollection()).containsAll(otherCollection)`    \n      |&nbsp;Related to `Map`      |&nbsp;    \n      |`assertThat(getMap().size()).isEqualTo(otherMap().size()`      |`assertThat(getMap()).hasSameSizeAs(otherMap())`    \n      |`assertThat(getMap().containsKey(key)).isTrue()`      |`assertThat(getMap()).containsKey(key)`    \n      |`assertThat(getMap().keySet()).contains(key)`      |`assertThat(getMap()).containsKey(key)`    \n      |`assertThat(getMap().keySet()).containsOnlyKey(key)`      |`assertThat(getMap()).containsOnlyKey(key)`    \n      |`assertThat(getMap().containsValue(value)).isTrue()`      |`assertThat(getMap()).containsValue(value)`    \n      |`assertThat(getMap().values()).contains(value)`      |`assertThat(getMap()).containsValue(``value``)`    \n      |`assertThat(getMap().get(key)).isEqualTo(value)`      |`assertThat(getMap()).containsEntry(key, value)`    \n      |Related to `Optional`      |&nbsp;    \n      |`assertThat(getOptional().isPresent()).isTrue()`      |`assertThat(getOptional()).isPresent()`    \n      |`assertThat(getOptional().get()).isEqualTo(something)`      |`assertThat(getOptional()).contains(something)`    \n      |`assertThat(getOptional().get()).isSameAs(something)`      |`assertThat(getOptional()).containsSame(something)`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2326",
        "display_name": "JavaS2326",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused type parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nType parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2689",
        "display_name": "JavaS2689",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Files opened in append mode should not be used with ObjectOutputStream",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`ObjectOutputStream`s are used with serialization, and the first thing an `ObjectOutputStream` writes is the serialization\nstream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an `ObjectOutputStream`\nconstructor and the serialization stream header will be added to the end of the file before your object is then also appended.\n\nWhen you're trying to read your object(s) back from the file, only the first one will be read successfully, and a\n`StreamCorruptedException` will be thrown after that.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1117",
        "display_name": "JavaS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Local variables should not shadow class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2447",
        "display_name": "JavaS2447",
        "severity": "error",
        "category": "convention",
        "rule_title": "Null should not be returned from a \"Boolean\" method",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile `null` is technically a valid `Boolean` value, that fact, and the distinction between `Boolean` and\n`boolean` is easy to forget. So returning `null` from a `Boolean` method is likely to cause problems with callers'\ncode.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE CWE-476](http://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "java:S4507",
        "display_name": "JavaS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\n`Throwable.printStackTrace(...)` prints a Throwable and its stack trace to `System.Err` (by default) which is not easily\nparseable and can expose sensitive information:\n\n<a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with `debug` to `true` enable debugging support:\n\n## Compliant Solution\n\nLoggers should be used (instead of `printStackTrace`) to print throwables:\n\n<a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with `debug` to `false` disable debugging support:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "java:S3658",
        "display_name": "JavaS3658",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unit tests should throw exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n`try`-`catch` structure to detect failure. Instead, you can simply move the exception type to the method signature. \n\nThis rule raises an issue when there is a fail assertion inside a `catch` block.\n\nSupported frameworks:\n\n  -  JUnit3 \n  -  JUnit4 \n  -  JUnit5 \n  -  Fest assert \n  -  AssertJ \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5958",
        "display_name": "JavaS5958",
        "severity": "warning",
        "category": "convention",
        "rule_title": "AssertJ \"assertThatThrownBy\" should not be used alone",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnlike similar AssertJ methods testing exceptions (`assertThatCode()`, `assertThatExceptionOfType()`, ...), the\n`assertThatThrownBy()` method can be used alone, failing if the code did not raise any exception.\n\nStill, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.\n\nThis rule raises an issue when `assertThatThrownBy` is used, without testing the exception further.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1479",
        "display_name": "JavaS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of `case` clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\n\n## Exceptions\n\nThis rule ignores `switch`es over `Enum`s and empty, fall-through cases.\n",
        "disable": false
      },
      {
        "real_name": "java:S3416",
        "display_name": "JavaS3416",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loggers should be named for their enclosing classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is convention to name each class's logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.\n\nThis rule raises an issue when a logger is not named for its enclosing class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1116",
        "display_name": "JavaS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty statements should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty statements, i.e. `;`, are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2698",
        "display_name": "JavaS2698",
        "severity": "info",
        "category": "convention",
        "rule_title": "Test assertions should include messages",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAdding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou'll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1126",
        "display_name": "JavaS1126",
        "severity": "info",
        "category": "convention",
        "rule_title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturn of boolean literal statements wrapped into `if-then-else` ones should be simplified.\n\nSimilarly, method invocations wrapped into `if-then-else` differing only from boolean literals should be simplified into a single\ninvocation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4512",
        "display_name": "JavaS4512",
        "severity": "error",
        "category": "security",
        "rule_title": "Setting JavaBean properties is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSetting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:\n\n  -  [CVE-2014-0114](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114) \n\nJavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.\n\nThis rule raises an issue when:\n\n  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is\n  called </li>\n\n## Ask Yourself Whether\n\n  -  the new property values might have been tampered with or provided by an untrusted source. \n  -  sensitive properties can be modified, for example: `class.classLoader` \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSanitize all values used as JavaBean properties.\n\nDon't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.\n\n## Sensitive Code Example\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-15](http://cwe.mitre.org/data/definitions/15.html) - External Control of System or Configuration Setting \n  -  [CERT, MSC61-J.](https://wiki.sei.cmu.edu/confluence/x/hDdGBQ) - Do not use insecure or weak cryptographic algorithms \n  -  Derived from FindSecBugs rule [BEAN_PROPERTY_INJECTION](https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION) \n",
        "disable": false
      },
      {
        "real_name": "java:S5843",
        "display_name": "JavaS5843",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Regular expressions should not be too complicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.\n\nThe complexity of a regular expression is determined as follows:\n\nEach of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:\n\n  -  `|` - when multiple `|` operators are used together, the subsequent ones only increase the complexity by 1 \n  <li> `&amp;&amp;` (inside character classes) - when multiple `&amp;&amp;` operators are used together, the subsequent ones\n  only increase the complexity by 1 </li>\n  -  Quantifiers (`*`, `+`, `?`, `{n,m}`, `{n,}` or `{n}`) \n  -  Non-capturing groups that set flags (such as `(?i:some_pattern)` or `(?i)some_pattern`) \n  -  Lookahead and lookbehind assertions \n\nAdditionally, each use of the following features increase the complexity by 1 regardless of nesting:\n\n  -  character classes \n  -  back references \n\nIf a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nRegular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n`static final` fields, all of which can be combined using the '`+`' operator.\n\nWhen a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.\n",
        "disable": false
      },
      {
        "real_name": "java:S2699",
        "display_name": "JavaS2699",
        "severity": "error",
        "category": "convention",
        "rule_title": "Tests should include assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.\n\nThis rule raises an exception when no assertions from any of the following known frameworks are found in a test:\n\n  -  AssertJ \n  -  Awaitility \n  -  EasyMock \n  -  Eclipse Vert.x \n  -  Fest 1.x and 2.x \n  -  Hamcrest \n  -  JMock \n  -  JMockit \n  -  JUnit \n  -  Mockito \n  -  Rest-assured 2.x, 3.x and 4.x \n  -  RxJava 1.x and 2.x \n  -  Selenide \n  -  Spring's `org.springframework.test.web.servlet.ResultActions.andExpect()` \n  -  Truth Framework \n  -  WireMock \n\nFurthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n`&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;`, where `MethodName` can end with the wildcard character. For constructors,\nthe pattern should be `&lt;FullyQualifiedClassName&gt;#&lt;init&gt;`.\n\nExample:&nbsp;`com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nExample when `com.company.CompareToTester#compare*` is used as parameter to the rule.\n",
        "disable": false
      },
      {
        "real_name": "java:S1488",
        "display_name": "JavaS1488",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variables should not be declared and then immediately returned or thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring a variable only to immediately return or throw it is a bad practice.\n\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5842",
        "display_name": "JavaS5842",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Regex repetition pattern's body should not match the empty String",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA regex should never include a repetitive pattern whose body would match the empty String. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1125",
        "display_name": "JavaS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3422",
        "display_name": "JavaS3422",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Dependencies should not have \"system\" scope",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`system` dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4635",
        "display_name": "JavaS4635",
        "severity": "error",
        "category": "convention",
        "rule_title": "String offset-based methods should be preferred for finding substrings from offsets",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLooking for a given substring starting from a specified offset can be achieved by such code: `str.substring(beginIndex).indexOf(char1)`.\nThis works well, but it creates a new `String` for each call to the `substring` method. When this is done in a loop, a lot of\n`Strings` are created for nothing, which can lead to performance problems if `str` is large.\n\nTo avoid performance problems, `String.substring(beginIndex)` should not be chained with the following methods:\n\n  -  `indexOf(int ch)` \n  -  `indexOf(String str)` \n  -  `lastIndexOf(int ch)` \n  -  `lastIndexOf(String str)` \n  -  `startsWith(String prefix)` \n\nFor each of these methods, another method with an additional parameter is available to specify an offset.\n\nUsing these methods gives the same result while avoiding the creation of additional `String` instances.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5845",
        "display_name": "JavaS5845",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Assertions comparing incompatible types should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the\ndeveloper loses time trying to fix his code logic before noticing wrong assertions.\n\nDissimilar types are:\n\n  -  comparing a primitive with null \n  -  comparing an object with an unrelated primitive (E.G. a string with an int) \n  -  comparing unrelated classes \n  -  comparing an array to a non-array \n  -  comparing two arrays of dissimilar types \n\nThis rule also raises issues for unrelated `class` and `interface` or unrelated `interface` types in negative\nassertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test\nfailure to inform the developer about this unusual comparison.\n\nSupported test frameworks:\n\n  -  JUnit4 \n  -  JUnit5 \n  -  AssertJ \n\n## Noncompliant Code Example\n\n## See\n\n  -  {rule:java:S2159} - Silly equality checks should not be made \n",
        "disable": false
      },
      {
        "real_name": "java:S2696",
        "display_name": "JavaS2696",
        "severity": "error",
        "category": "convention",
        "rule_title": "Instance methods should not write to \"static\" fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCorrectly updating a `static` field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, `static` fields are only updated from `synchronized static`\nmethods.\n\nThis rule raises an issue each time a `static` field is updated from a non-static method.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1124",
        "display_name": "JavaS1124",
        "severity": "info",
        "category": "convention",
        "rule_title": "Modifiers should be declared in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Java Language Specification recommends listing modifiers in the following order:\n\n  1.  Annotations \n  1.  public \n  1.  protected \n  1.  private \n  1.  abstract \n  1.  static \n  1.  final \n  1.  transient \n  1.  volatile \n  1.  synchronized \n  1.  native \n  1.  strictfp \n\nNot following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2333",
        "display_name": "JavaS2333",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant modifiers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe methods declared in an `interface` are `public` and `abstract` by default. Any variables are automatically\n`public static final`. Finally, `class` and `interface` are automatically `public static`. There is no\nneed to explicitly declare them so.\n\nSince annotations are implicitly interfaces, the same holds true for them as well.\n\nSimilarly, the `final` modifier is redundant on any method of a `final` class, `private` is redundant on the\nconstructor of an `Enum`, and `static` is redundant for `interface` nested into a `class` or\n`enum`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3423",
        "display_name": "JavaS3423",
        "severity": "info",
        "category": "convention",
        "rule_title": "pom elements should be in the recommended order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:\n\n  1.  &lt;modelVersion/&gt; \n  1.  &lt;parent/&gt; \n  1.  &lt;groupId/&gt; \n  1.  &lt;artifactId/&gt; \n  1.  &lt;version/&gt; \n  1.  &lt;packaging/&gt; \n  1.  &lt;name/&gt; \n  1.  &lt;description/&gt; \n  1.  &lt;url/&gt; \n  1.  &lt;inceptionYear/&gt; \n  1.  &lt;organization/&gt; \n  1.  &lt;licenses/&gt; \n  1.  &lt;developers/&gt; \n  1.  &lt;contributors/&gt; \n  1.  &lt;mailingLists/&gt; \n  1.  &lt;prerequisites/&gt; \n  1.  &lt;modules/&gt; \n  1.  &lt;scm/&gt; \n  1.  &lt;issueManagement/&gt; \n  1.  &lt;ciManagement/&gt; \n  1.  &lt;distributionManagement/&gt; \n  1.  &lt;properties/&gt; \n  1.  &lt;dependencyManagement/&gt; \n  1.  &lt;dependencies/&gt; \n  1.  &lt;repositories/&gt; \n  1.  &lt;pluginRepositories/&gt; \n  1.  &lt;build/&gt; \n  1.  &lt;reporting/&gt; \n  1.  &lt;profiles/&gt; \n\nNot following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.\n\n## See\n\n  -  [POM Code Convention](https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention) \n",
        "disable": false
      },
      {
        "real_name": "java:S1123",
        "display_name": "JavaS1123",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Deprecated elements should have both the annotation and the Javadoc tag",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeprecation should be marked with both the `@Deprecated` annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. \n\nFurther, Java 9 adds two additional arguments to the annotation:\n\n  -  `since` allows you to describe when the deprecation took place \n  -  `forRemoval`, indicates whether the deprecated element will be removed at some future date \n\nIf your compile level is Java 9 or higher, you should be using one or both of these arguments.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.\n",
        "disable": false
      },
      {
        "real_name": "java:S1244",
        "display_name": "JavaS1244",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Floating point numbers should not be tested for equality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFloating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a `float` or a `double` through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.\n\nEven simple floating point assignments are not simple:\n\n(Results will vary based on compiler and compiler settings);\n\nTherefore, the use of the equality (`==`) and inequality (`!=`) operators on `float` or `double` values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling `Numbers` such as `BigDecimal` which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (`NaN` and `Infinity`\nfor instance).\n\nThis rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nSince `NaN` is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n`NaN` and is therefore ignored. Though using `Double.isNaN` method should be preferred instead, as intent is more explicit.\n",
        "disable": false
      },
      {
        "real_name": "java:S3420",
        "display_name": "JavaS3420",
        "severity": "info",
        "category": "convention",
        "rule_title": "Artifact ids should follow a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's `artifactId` does not match the\nprovided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression: `[a-z][a-z-0-9]+`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2694",
        "display_name": "JavaS2694",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inner classes which do not reference their owning classes should be \"static\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. \n\nIf the reference to the outer class isn't used, it is more efficient to make the inner class `static` (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. \n\nHowever, while a nested/`static` class would be more efficient, it's worth noting that there are semantic differences between an inner\nclass and a nested one:\n\n  -  an inner class can only be instantiated within the context of an instance of the outer class. \n  -  a nested (`static`) class can be instantiated independently of the outer class. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3421",
        "display_name": "JavaS3421",
        "severity": "info",
        "category": "convention",
        "rule_title": "Deprecated \"${pom}\" properties should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.\n\nThis rule raises an issue when `${pom.*}` properties are used in a pom.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S5960",
        "display_name": "JavaS5960",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Assertions should not be used in production code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertions are intended to be used in **test** code, but not in **production** code. It is confusing, and might lead to\n`ClassNotFoundException` when the build tools only provide the required dependency in test scope.\n\nIn addition, assertions will throw a sub-class of `Error`: `AssertionError`, which should be avoided in production code.\n\nThis rule raises an issue when any assertion intended to be used in test is used in production code.\n\nSupported frameworks:\n\n  -  JUnit \n  -  FestAssert \n  -  AssertJ \n\nNote: this does not apply for `assert` from Java itself or if the source code package name is related to tests (contains:\n`test` or `assert` or `junit`).\n",
        "disable": false
      },
      {
        "real_name": "java:S2211",
        "display_name": "JavaS2211",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Types should be used in lambdas",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.\n",
        "disable": false
      },
      {
        "real_name": "java:S2695",
        "display_name": "JavaS2695",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe parameters in a `PreparedStatement` are numbered from 1, not 0, so using any \"set\" method of a `PreparedStatement` with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, `ResultSet` indices also start at 1,\nrather than 0\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1121",
        "display_name": "JavaS1121",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be made from within sub-expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAssignments in `while` statement conditions, and assignments enclosed in relational expressions are ignored.\n\nChained assignments, including compound assignments, are ignored.\n\n## See\n\n  -  [MITRE, CWE-481](http://cwe.mitre.org/data/definitions/481.html) - Assigning instead of Comparing \n  -  [CERT, EXP45-C.](https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ) - Do not perform assignments in selection statements \n  -  [CERT, EXP51-J.](https://wiki.sei.cmu.edu/confluence/x/ITZGBQ) - Do not perform assignments in conditional expressions \n",
        "disable": false
      },
      {
        "real_name": "java:S5841",
        "display_name": "JavaS5841",
        "severity": "info",
        "category": "correctness",
        "rule_title": "AssertJ assertions \"allMatch\" and \"doesNotContains\" should also test for emptiness",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertJ assertions `allMatch` and `doesNotContains` on an empty list always&nbsp;returns true whatever the content of the\npredicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding\n`isEmpty()`/`isNotEmpty()` in addition to calling the assertion, or by testing the list's content further. It will justify the\nuseless predicate to improve clarity or increase the reliability of the test.\n\nThis rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the\ncontent.\n\nTargetted methods:\n\n  -  `allMatch` \n  -  `allSatisfy` \n  -  `doesNotContain` \n  -  `doesNotContainSequence` \n  -  `doesNotContainSubsequence` \n  -  `doesNotContainAnyElementsOf` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2692",
        "display_name": "JavaS2692",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"indexOf\" checks should not be for positive numbers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost checks against an `indexOf` value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a `String` or a `List`, consider\nusing the `contains` method instead.\n\nThis rule raises an issue when an `indexOf` value retrieved either from a `String` or a `List` is tested against\n`&gt;0`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1120",
        "display_name": "JavaS1120",
        "severity": "info",
        "category": "convention",
        "rule_title": "Source code should be indented consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. \n\nThis rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.\n\n## Noncompliant Code Example\n\nWith an indent size of 2:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5961",
        "display_name": "JavaS5961",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Test methods should not contain too many assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.\n\nWhile it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.\n\nThis rule will report any test method containing more than a given number of assertion.\n\n## Noncompliant Code Example\n\nWith a parameter of 2.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2693",
        "display_name": "JavaS2693",
        "severity": "error",
        "category": "convention",
        "rule_title": "Threads should not be started in constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe problem with invoking `Thread.start()` in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.\n\nThis rule raises an issue any time `start` is invoked in the constructor of a non-`final` class.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, TSM02-J.](https://wiki.sei.cmu.edu/confluence/x/FDdGBQ) - Do not use background threads during class initialization \n",
        "disable": false
      },
      {
        "real_name": "java:S5967",
        "display_name": "JavaS5967",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Tests method should not be annotated with competing annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAnnotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing\ntests or unwanted side-effects.\n\nThis rule reports an issue when a test method is annotated with more than one of the following competing annotation:\n\n  -  @Test \n  -  @RepeatedTest \n  -  @ParameterizedTest \n  -  @TestFactory \n  -  @TestTemplate \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5846",
        "display_name": "JavaS5846",
        "severity": "error",
        "category": "convention",
        "rule_title": "Empty lines should not be tested with regex MULTILINE flag",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOne way to test for empty lines is to use the regex `\"^$\"`, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\">Pattern (Line Terminators)</a> states the\nfollowing:\n\n> \n  <p>By default, the regular expressions ^ and `$` ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If `MULTILINE` mode is activated then ^ matches at the beginning of input and after any line terminator\n  **except at the end of input**. When in `MULTILINE` mode `$` matches just before a line terminator or the end of\n  the input sequence.</p>\n\n\nAs emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.\n\nTherefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.\n\nThis rule is raising an issue every time a pattern that can match the empty string is used with `MULTILINE` flag and without calling\n`isEmpty()` on the string.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1128",
        "display_name": "JavaS1128",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unnecessary imports should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. \n\nUnused and useless imports should not occur if that is the case. \n\nLeaving them in reduces the code's readability, since their presence can be confusing.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nImports for types mentioned in comments, such as Javadocs, are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S3305",
        "display_name": "JavaS3305",
        "severity": "error",
        "category": "convention",
        "rule_title": "Factory method injection should be used in \"@Configuration\" classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `@Autowired` is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single `@Bean` method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.\n",
        "disable": false
      },
      {
        "real_name": "java:S4517",
        "display_name": "JavaS4517",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "InputSteam.read() implementation should not return a signed byte",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java documentation, any implementation of the `InputSteam.read()` method is supposed to read the next byte of data from\nthe input stream. The value byte must be an `int` in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.\n\nBut in Java, the `byte` primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an `InputSteam.read()` method should never directly return a `byte`\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5969",
        "display_name": "JavaS5969",
        "severity": "error",
        "category": "convention",
        "rule_title": "Mocking all non-private methods of a class should be avoided",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.\n\nYou should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.\n\nThis rule reports an issue when every member of a given class are mocked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S1481",
        "display_name": "JavaS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3306",
        "display_name": "JavaS3306",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Constructor injection should be used instead of field injection",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nField injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a `NullPointerException`\nwaiting to happen unless all your class constructors are `private`. That's because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the\nfield injection.\n\nInstead `@Inject` should be moved to the constructor and the fields required as constructor parameters.\n\nThis rule raises an issue when classes with non-`private` constructors (including the default constructor) use field injection.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5777",
        "display_name": "JavaS5777",
        "severity": "info",
        "category": "convention",
        "rule_title": "Exception testing via JUnit @Test annotation should be avoided",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen testing exception via `@Test` annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.\n\nYou should consider moving any assertions into a separate test method where possible, or using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead.\n\nAlternatively, you could use [try-catch idiom](https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom) for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n\n  -  For JUnit &lt; 4.13, use the [try-catch idiom](https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom): \n\n## See\n\n  -  [JUnit exception testing documentation](https://github.com/junit-team/junit4/wiki/Exception-testing) \n",
        "disable": false
      },
      {
        "real_name": "java:S2148",
        "display_name": "JavaS2148",
        "severity": "info",
        "category": "convention",
        "rule_title": "Underscores should be used to make large numbers readable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBeginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.\n\nThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\n      |Base      | Minimum digits    \n      |binary      | 9     \n      |octal      | 9     \n      |decimal      | 6     \n      |hexadecimal      | 9     \n\nIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3358",
        "display_name": "JavaS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ternary operators should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5413",
        "display_name": "JavaS5413",
        "severity": "warning",
        "category": "convention",
        "rule_title": "'List.remove()' should not be used in ascending 'for' loops",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `List.remove()` is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nYou can either adjust the loop index to account for the change in the size of the list\n\nOr preferably it's probably better to rely on Java 8's `removeIf` method\n\n&nbsp;\n\n## Exceptions\n\nThe descending loop doesn't have this issue, because the index will be correct when we loop in descending order\n\n&nbsp;\n",
        "disable": false
      },
      {
        "real_name": "java:S5776",
        "display_name": "JavaS5776",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exception testing via JUnit ExpectedException rule should not be mixed with other assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen testing exception via `org.junit.rules.ExpectedException` any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(...)\" invocation, only the code\nthrowing the expected exception should be after \"expect(...)\".\n\nYou should consider using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead, it's available\nsince JUnit 4.13 and it allows additional subsequent assertions.\n\nAlternatively, you could use [try-catch idiom](https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom) for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n\n  -  For JUnit &lt; 4.13, use the [try-catch idiom](https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom): \n\n## See\n\n  -  [JUnit exception testing documentation](https://github.com/junit-team/junit4/wiki/Exception-testing) \n",
        "disable": false
      },
      {
        "real_name": "java:S2388",
        "display_name": "JavaS2388",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inner class calls to super class methods should be unambiguous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using `super.`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5779",
        "display_name": "JavaS5779",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Assertion methods should not be used within the try block of a try-catch catching an Error",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertion methods&nbsp;are throwing a \"`java.lang.AssertionError`\". If this call is done within the try block of a try-catch cathing a\nsimilar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JUnit 4 exception testing documentation](https://github.com/junit-team/junit4/wiki/Exception-testing) \n",
        "disable": false
      },
      {
        "real_name": "java:S3599",
        "display_name": "JavaS3599",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Double Brace Initialization should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. \n\nFor collections, use `Arrays.asList` instead, or explicitly add each item directly to the collection.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5778",
        "display_name": "JavaS5778",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Only one method invocation is expected when testing runtime exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.\n\nIt increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JUnit exception testing documentation](https://github.com/junit-team/junit4/wiki/Exception-testing) \n",
        "disable": false
      },
      {
        "real_name": "java:S2147",
        "display_name": "JavaS2147",
        "severity": "info",
        "category": "convention",
        "rule_title": "Catches should be combined",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple `catch` blocks have the same code, they\nshould be combined for better readability.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2386",
        "display_name": "JavaS2386",
        "severity": "info",
        "category": "convention",
        "rule_title": "Mutable fields should not be \"public static\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to have a mutable object as the `public` (by default), `static` member of an `interface`.\nSuch variables should be moved into classes and their visibility lowered. \n\nSimilarly, mutable `static` members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field `final` if appropriate. \n\nNote that making a mutable field, such as an array, `final` will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).\n\nThis rule raises issues for `public static` array, `Collection`, `Date`, and `awt.Point` members.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-582](http://cwe.mitre.org/data/definitions/582.html) - Array Declared Public, Final, and Static \n  -  [MITRE, CWE-607](http://cwe.mitre.org/data/definitions/607.html) - Public Static Final Field References Mutable Object \n  -  [CERT, OBJ01-J.](https://wiki.sei.cmu.edu/confluence/x/LjdGBQ) - Limit accessibility of fields \n  -  [CERT, OBJ13-J.](https://wiki.sei.cmu.edu/confluence/x/VzZGBQ) - Ensure that references to mutable objects are not exposed \n",
        "disable": false
      },
      {
        "real_name": "java:S3355",
        "display_name": "JavaS3355",
        "severity": "error",
        "category": "security",
        "rule_title": "Defined filters should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEvery filter defined in `web.xml` file should be used in a `&lt;filter-mapping&gt;` element. Otherwise such filters are not\ninvoked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4684",
        "display_name": "JavaS4684",
        "severity": "error",
        "category": "security",
        "rule_title": "Persistent entities should not be used as arguments of \"@RequestMapping\" methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOn one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with\n`@RequestMapping`. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the\n`@RequestMapping` annotated methods. \n\nOn the other end, persistent objects (`@Entity` or `@Document`) are linked to the underlying database and updated\nautomatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.\n\nThese two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with\n`@RequestMapping`, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.\n\nFor this reason, using `@Entity` or `@Document` objects as arguments of methods annotated with `@RequestMapping`\nshould be avoided.\n\nIn addition to `@RequestMapping`, this rule also considers the annotations introduced in Spring Framework 4.3: `@GetMapping`,\n`@PostMapping`, `@PutMapping`, `@DeleteMapping`, `@PatchMapping`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported when the parameter is annotated with `@PathVariable` from Spring Framework, since the lookup will be done via id,\nthe object cannot be forged on client side.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [MITRE, CWE-915](https://cwe.mitre.org/data/definitions/915.html) - Improperly Controlled Modification of Dynamically-Determined\n  Object Attributes </li>\n  <li> <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security Vulnerabilities in the Spring\n  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1176",
        "display_name": "JavaS1176",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Public types, methods and fields (API) should be documented with Javadoc",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTry to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.\n\nOn top of a main description for each member of a public API, the following Javadoc elements are required to be described:\n\n  -  Parameters, using `@param parameterName`. \n  -  Thrown exceptions, using `@throws exceptionName`. \n  -  Method return values, using `@return`. \n  -  Generic types, using `@param &lt;T&gt;`. \n\nFurthermore the following guidelines should be followed:\n\n  -  At least 1 line of description. \n  -  All parameters documented with `@param`, and names should match. \n  -  All checked exceptions documented with `@throws` \n  -  `@return` present and documented when not `void`. \n  -  Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. \n\nThe following public methods and constructors are not taken into account by this rule:\n\n  -  Getters and setters. \n  -  Methods overriding another method (usually decorated with `@Override`). \n  -  Empty constructors. \n  -  Static constants. \n\nFor the parameters of the rule, the following rules are applied:\n\n  -  `?` matches a single character \n  -  `*` matches zero or more characters \n  -  `**` matches zero or more packages \n\nExamples:\n\n  -  `java.internal.InternalClass` will match only `InternalClass` class. \n  -  `java.internal.*` will match any member of `java.internal` package. \n  -  `java.internal.**` same as above, but including sub-packages. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1175",
        "display_name": "JavaS1175",
        "severity": "error",
        "category": "correctness",
        "rule_title": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Object.finalize()` is called by the Garbage Collector at some point after the object becomes unreferenced.\n\nIn general, overloading `Object.finalize()` is a bad idea because:\n\n  -  The overload may not be called by the Garbage Collector. \n  -  Users are not expected to call `Object.finalize()` and will get confused. \n\nBut beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override `Object.finalize()`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2387",
        "display_name": "JavaS2387",
        "severity": "error",
        "category": "convention",
        "rule_title": "Child class fields should not shadow parent class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores same-name fields that are `static` in both the parent and child classes. This rule ignores `private` parent\nclass fields, but in all other such cases, the child class field should be renamed.\n",
        "disable": false
      },
      {
        "real_name": "java:S2384",
        "display_name": "JavaS2384",
        "severity": "info",
        "category": "convention",
        "rule_title": "Mutable members should not be stored or returned directly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.\n\nInstead use an unmodifiable `Collection` (via `Collections.unmodifiableCollection`,\n`Collections.unmodifiableList`, ...) or make a copy of the mutable object, and store or return the copy instead.\n\nThis rule checks that arrays, collections and Dates are not stored or returned directly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-374](http://cwe.mitre.org/data/definitions/374) - Passing Mutable Objects to an Untrusted Method \n  -  [MITRE, CWE-375](http://cwe.mitre.org/data/definitions/375) - Returning a Mutable Object to an Untrusted Caller \n  -  [CERT, OBJ05-J.](https://wiki.sei.cmu.edu/confluence/x/OTdGBQ) - Do not return references to private mutable class members \n  <li> [CERT, OBJ06-J.](https://wiki.sei.cmu.edu/confluence/x/HTdGBQ) - Defensively copy mutable inputs and mutable internal components\n  </li>\n  -  [CERT, OBJ13-J.](https://wiki.sei.cmu.edu/confluence/x/VzZGBQ) - Ensure that references to mutable objects are not exposed \n",
        "disable": false
      },
      {
        "real_name": "java:S1174",
        "display_name": "JavaS1174",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Object.finalize()\" should remain protected (versus public) when overriding",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe contract of the `Object.finalize()` method is clear: only the Garbage Collector is supposed to call this method.\n\nMaking this method public is misleading, because it implies that any caller can use it.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-583](http://cwe.mitre.org/data/definitions/583.html) - finalize() Method Declared Public \n  -  [CERT, MET12-J.](https://wiki.sei.cmu.edu/confluence/x/4jZGBQ) - Do not use finalizers \n",
        "disable": false
      },
      {
        "real_name": "java:S2142",
        "display_name": "JavaS2142",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"InterruptedException\" should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`InterruptedExceptions` should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the `InterruptedException` clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, `InterruptedExceptions` should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling `Thread.interrupt()` even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.\n\nSimilarly, the `ThreadDeath` exception should also be propagated. According to its JavaDoc:\n\n> \n  If `ThreadDeath` is caught by a method, it is important that it be rethrown so that the thread actually dies.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-391](http://cwe.mitre.org/data/definitions/391.html) - Unchecked Error Condition \n  -  [Dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1) \n",
        "disable": false
      },
      {
        "real_name": "java:S2143",
        "display_name": "JavaS2143",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"java.time\" classes should be used for dates and times",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe old, much-derided `Date` and `Calendar` classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. `JodaTime` has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:\n      |Class      |Use for    \n      |LocalDate      |a date, without time of day, offset, or zone    \n      |LocalTime      |the time of day, without date, offset, or zone    \n      |LocalDateTime      |the date and time, without offset, or zone    \n      |OffsetDate      |a date with an offset such as +02:00, without time of day, or zone    \n      |OffsetTime      |the time of day with an offset such as +02:00, without date, or zone    \n      |OffsetDateTime      |the date and time with an offset such as +02:00, without a zone    \n      |ZonedDateTime      |the date and time with a time zone and offset    \n      |YearMonth      |a year and month    \n      |MonthDay      |month and day    \n      |Year/MonthOfDay/DayOfWeek/...      |classes for the important fields    \n      |DateTimeFields      |stores a map of field-value pairs which may be invalid    \n      |Calendrical      |access to the low-level API    \n      |Period      |a descriptive amount of time, such as \"2 months and 3 days\"    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4201",
        "display_name": "JavaS4201",
        "severity": "info",
        "category": "convention",
        "rule_title": "Null checks should not be used with \"instanceof\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no need to null test in conjunction with an `instanceof` test. `null` is not an `instanceof` anything, so\na null check is redundant.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4449",
        "display_name": "JavaS4449",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nullness of parameters should be guaranteed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using null-related annotations at global scope level, for instance using `javax.annotation.ParametersAreNonnullByDefault` (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-`null`. It is equivalent to annotating every parameter in every method with non-null annotations (such as `@Nonnull`).\n\nThe rule raises an issue every time a parameter could be `null` for a method invocation, where the method is annotated as forbidding\nnull parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nTwo solutions are possible: \n\n  -  The signature of the method is correct, and null check should be done prior to the call. \n  -  The signature of the method is not coherent and should be annotated to allow null values being passed as parameter \n\nor \n",
        "disable": false
      },
      {
        "real_name": "java:S5411",
        "display_name": "JavaS5411",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boxed \"Boolean\" should be avoided in boolean expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen boxed type `java.lang.Boolean` is used as an expression it will throw `NullPointerException` if the value is\n`null` as defined in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8\nUnboxing Conversion</a>.\n\nIt is safer to avoid such conversion altogether and handle the `null` value explicitly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Java Language Specification §5.1.8 Unboxing Conversion](https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8)\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2140",
        "display_name": "JavaS2140",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no need to multiply the output of `Random`'s `nextDouble` method to get a random integer. Use the\n`nextInt` method instead.\n\nThis rule raises an issue when the return value of any of `Random`'s methods that return a floating point value is converted to an\ninteger.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5659",
        "display_name": "JavaS5659",
        "severity": "error",
        "category": "security",
        "rule_title": "JWT should be signed and verified with strong cipher algorithms",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.\n\n  -  Don't use `none` algorithm to sign or verify the validity of a token. \n  -  Don't use a token without verifying its signature before. \n\n## Noncompliant Code Example\n\nUsing [jwtk/Java JWT](https://github.com/jwtk/jjwt) library (to verify a signed token (containing a JWS) don't use the\n`parse` method as it doesn't throw an exception if an unsigned token is provided):\n\nUsing [auth0/Java JWT](https://github.com/auth0/java-jwt) library:\n\n## Compliant Solution\n\nUsing [Java JWT](https://github.com/jwtk/jjwt) library (to verify a signed token (containing a JWS) use the `parseClaimsJws`\nmethod that will throw an exception if an unsigned token is provided):\n\nUsing [auth0/Java JWT](https://github.com/auth0/java-jwt) library. I\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-347](https://cwe.mitre.org/data/definitions/347.html) - Improper Verification of Cryptographic Signature \n",
        "disable": false
      },
      {
        "real_name": "java:S1172",
        "display_name": "JavaS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused method parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule will not raise issues for unused parameters:\n\n  -  that are annotated with `@javax.enterprise.event.Observes` \n  -  in overrides and implementation methods \n  -  in interface `default` methods \n  -  in non-private methods that only `throw` or that have empty bodies \n  <li> in annotated methods, unless the annotation is `@SuppressWarning(\"unchecked\")` or `@SuppressWarning(\"rawtypes\")`, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2141",
        "display_name": "JavaS2141",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes that don't define \"hashCode()\" should not be used in hashes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause `Object` implements `hashCode`, any Java class can be put into a hash structure. However, classes that define\n`equals(Object)` but not `hashCode()` aren't truly hash-able because instances that are equivalent according to the\n`equals` method can return different hashes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4682",
        "display_name": "JavaS4682",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy definition, primitive types are not Objects and so they can't be `null`. Adding `@CheckForNull` or `@Nullable`\non primitive types adds confusion and is useless.\n\nThis rule raises an issue when `@CheckForNull` or `@Nullable` is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1171",
        "display_name": "JavaS1171",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Only static class initializers should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNon-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor using Java 9 `Map.of`:\n\nor using Guava:\n",
        "disable": false
      },
      {
        "real_name": "java:S1170",
        "display_name": "JavaS1170",
        "severity": "info",
        "category": "convention",
        "rule_title": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMaking a `public` constant just `final` as opposed to `static final` leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.\n\nFurther, when a non-`public`, `final` field isn't also `static`, it implies that different instances can have\ndifferent values. However, initializing a non-`static final` field in its declaration forces every instance to have the same value. So such\nfields should either be made `static` or initialized in the constructor.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:\n\n> \n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n\n",
        "disable": false
      },
      {
        "real_name": "java:S2260",
        "display_name": "JavaS2260",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Java parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "java:S2159",
        "display_name": "JavaS2159",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Silly equality checks should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nComparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:\n\n  -  comparing an object with null \n  -  comparing an object with an unrelated primitive (E.G. a string with an int) \n  -  comparing unrelated classes \n  -  comparing an unrelated `class` and `interface` \n  -  comparing unrelated `interface` types \n  -  comparing an array to a non-array \n  -  comparing two arrays \n\nSpecifically in the case of arrays, since arrays don't override `Object.equals()`, calling `equals` on two arrays is the same\nas comparing their addresses. This means that `array1.equals(array2)` is equivalent to `array1==array2`.\n\nHowever, some developers might expect `Array.equals(Object obj)` to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the `==` operator or `Arrays.equals(array1, array2)` should always be\nused with arrays.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, EXP02-J.](https://wiki.sei.cmu.edu/confluence/x/5zdGBQ) - Do not use the Object.equals() method to compare two arrays \n",
        "disable": false
      },
      {
        "real_name": "java:S2039",
        "display_name": "JavaS2039",
        "severity": "info",
        "category": "convention",
        "rule_title": "Member variable visibility should be specified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFailing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMembers annotated with `@VisibleForTesting` annotation are ignored, as it indicates that visibility has been purposely relaxed to make\nthe code testable.\n",
        "disable": false
      },
      {
        "real_name": "java:S5669",
        "display_name": "JavaS5669",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Vararg method arguments should not be confusing",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing single `null` or primitive array argument to the variable arity method may not work as expected. In the case of\n`null`, it is not passed as array with single element, but the argument itself is `null`. In the case of a primitive array, if\nthe formal parameter is `Object...`, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2157",
        "display_name": "JavaS2157",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Cloneables\" should implement \"clone\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSimply implementing `Cloneable` without also overriding `Object.clone()` does not necessarily make the class cloneable. While\nthe `Cloneable` interface does not include a `clone` method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM `clone` will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding `clone`, any cloned instances will potentially share members with the source instance.\n\nRemoving the `Cloneable` implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1068",
        "display_name": "JavaS1068",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" fields should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `private` field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.\n\nNote that this rule does not take reflection into account, which means that issues will be raised on `private` fields that are only\naccessed using the reflection API.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe Java serialization runtime associates with each serializable class a version number, called `serialVersionUID`, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.\n\nA serializable class can declare its own `serialVersionUID` explicitly by declaring a field named `serialVersionUID` that\nmust be static, final, and of type long. By definition those `serialVersionUID` fields should not be reported by this rule:\n\nMoreover, this rule doesn't raise any issue on annotated fields.\n",
        "disable": false
      },
      {
        "real_name": "java:S5547",
        "display_name": "JavaS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [CERT, MSC61-J.](https://wiki.sei.cmu.edu/confluence/x/hDdGBQ) - Do not use insecure or weak cryptographic algorithms \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2276",
        "display_name": "JavaS2276",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf `Thread.sleep(...)` is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call `wait(...)` on the monitor object to\ntemporarily release the lock and allow other threads to run.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, LCK09-J.](https://wiki.sei.cmu.edu/confluence/x/YTdGBQ) - Do not perform operations that can block while holding a lock \n",
        "disable": false
      },
      {
        "real_name": "java:S5663",
        "display_name": "JavaS5663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Simple string literal should be used for single line strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 378: Text Blocks](https://openjdk.java.net/jeps/378) \n  <li> [Programmer's Guide To Text Blocks](https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html), by Jim Laskey and Stuart\n  Marks </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1067",
        "display_name": "JavaS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported inside `equals` methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.\n",
        "disable": false
      },
      {
        "real_name": "java:S5542",
        "display_name": "JavaS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\n      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. </li>\n      <li> The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block always gets\n      encrypted to the same ciphertext block. This mode should not be used. </li>\n    \n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [CERT, MSC61-J.](https://wiki.sei.cmu.edu/confluence/x/hDdGBQ) - Do not use insecure or weak cryptographic algorithms \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S1188",
        "display_name": "JavaS1188",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Anonymous classes should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAnonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.\n",
        "disable": false
      },
      {
        "real_name": "java:S5783",
        "display_name": "JavaS5783",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Only one method invocation is expected when testing checked exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.\n\nWhen two of the methods can raise the same **checked** exception, not respecting this good practice is a bug, since it is not possible\nto know what is really tested.\n\nYou should make sure that only one method can raise the expected checked exception in the tested code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3366",
        "display_name": "JavaS3366",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"this\" should not be exposed from constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn single-threaded environments, the use of `this` in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\n\nThe classic example is a class with a `static` list of its instances. If the constructor stores `this` in the list, another\nthread could access the object before it's fully-formed. Even when the storage of `this` is the last instruction in the constructor,\nthere's still a danger if the class is not `final`. In that case, the initialization of subclasses won't be complete before\n`this` is exposed.\n\nThis rule raises an issue when `this` is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule ignores instances of assigning `this` directly to a `static` field of the same class because that case is covered\nby {rule:java:S3010} .\n\n## See\n\n  <li> [CERT, TSM01-J.](https://wiki.sei.cmu.edu/confluence/x/iDdGBQ) - Do not let the this reference escape during object construction\n  </li>\n  -  [CERT, TSM03-J.](https://wiki.sei.cmu.edu/confluence/x/vzdGBQ) - Do not publish partially initialized objects \n",
        "disable": false
      },
      {
        "real_name": "java:S1066",
        "display_name": "JavaS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2156",
        "display_name": "JavaS2156",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"final\" classes should not have \"protected\" members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe difference between `private` and `protected` visibility is that child classes can see and use `protected`\nmembers, but they cannot see `private` ones. Since a `final` class will have no children, marking the members of a\n`final` class `protected` is confusingly pointless.\n\nNote that the `protected` members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMembers annotated with&nbsp;`@VisibleForTesting` annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.\n",
        "disable": false
      },
      {
        "real_name": "java:S2274",
        "display_name": "JavaS2274",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the documentation of the Java `Condition` interface:\n\n> \n  <p>When waiting upon a `Condition`, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n\n\nThe same advice is also found for the `Object.wait(...)` method:\n\n> \n  waits should always occur in loops, like this one:\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT THI03-J.](https://wiki.sei.cmu.edu/confluence/x/EzdGBQ) - Always invoke wait() and await() methods inside a loop \n",
        "disable": false
      },
      {
        "real_name": "java:S5786",
        "display_name": "JavaS5786",
        "severity": "info",
        "category": "convention",
        "rule_title": "JUnit5 test classes and methods should have default package visibility",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be `public`.\n\nIn this context, JUnit5 test classes can have any visibility but `private`, however, it is recommended to use the default package\nvisibility, which improves readability of code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not raise an issue about `private` visibility, because `private` test methods and classes are systematically\nignored by JUnit5, without a proper warning. It's not a `Code Smell` but a `Bug` handled by the rule {rule:java:S5810} .\n\n## See\n\n  -  [JUnit 5 Test Classes and Methods](https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods) \n",
        "disable": false
      },
      {
        "real_name": "java:S1065",
        "display_name": "JavaS1065",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused labels should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.\n\nThis will improve maintainability as developers will not wonder what this label is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5665",
        "display_name": "JavaS5665",
        "severity": "info",
        "category": "convention",
        "rule_title": "Escape sequences should not be used in text blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of escape sequences is mostly unnecessary in text blocks.\n\n## Noncompliant Code Example\n\n`\\n` can be replaced by simply introducing the newline, `\\\"\\\"\\\"` it is sufficient to escape only the first qoute.\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 378: Text Blocks](https://openjdk.java.net/jeps/378) \n  <li> [Programmer's Guide To Text Blocks](https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html), by Jim Laskey and Stuart\n  Marks </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2153",
        "display_name": "JavaS2153",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Boxing and unboxing should not be immediately reversed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoxing is the process of putting a primitive value into an analogous object, such as creating an `Integer` to hold an `int`\nvalue. Unboxing is the process of retrieving the primitive value from such an object.\n\nSince the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3242",
        "display_name": "JavaS3242",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method parameters should be declared with base types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nParameters in non-public methods are not checked, because such methods are not intended to be generally reusable. `java.lang.String`\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.\n",
        "disable": false
      },
      {
        "real_name": "java:S1186",
        "display_name": "JavaS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an `UnsupportedOperationException` should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nDefault (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.\n",
        "disable": false
      },
      {
        "real_name": "java:S5785",
        "display_name": "JavaS5785",
        "severity": "warning",
        "category": "convention",
        "rule_title": "JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting equality or nullness with JUnit's `assertTrue()` or `assertFalse()` should be simplified to the corresponding\ndedicated assertion.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5301",
        "display_name": "JavaS5301",
        "severity": "info",
        "category": "security",
        "rule_title": "\"ActiveMQConnectionFactory\" should not be vulnerable to malicious code deserialization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nActiveMQ can send/receive JMS Object messages (named ObjectMessage in ActiveMQ context) to comply with JMS specification. Internally, ActiveMQ\nrelies on Java serialization mechanism for marshaling/unmashaling of the message payload. Deserialization based on data supplied by the user could\nlead to remote code execution attacks, where the structure of the serialized data is changed to modify the behavior of the object being\nunserialized.\n\nTo limit the risk to be victim of such attack, ActiveMQ 5.12.2+ enforces developers to explicitly whitelist packages that can be exchanged using\nObjectMessages.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n  -  [MITRE, CWE-502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data \n  -  [ActiveMQ ObjectMessage Security Advisory](https://activemq.apache.org/objectmessage.html) \n  -  [CVE-2015-5254](https://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt) \n",
        "disable": false
      },
      {
        "real_name": "java:S5664",
        "display_name": "JavaS5664",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Whitespace for text block indent should be consistent",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEither use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 378: Text Blocks](https://openjdk.java.net/jeps/378) \n  <li> [Programmer's Guide To Text Blocks](https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html), by Jim Laskey and Stuart\n  Marks </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2154",
        "display_name": "JavaS2154",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf wrapped primitive values (e.g. `Integers` and `Floats`) are used in a ternary operator (e.g. `a?b:c`), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2275",
        "display_name": "JavaS2275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Printf-style format strings should not lead to unexpected behavior at runtime",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause `printf`-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of `printf`-style formats when calling\nthe `format(...)` methods of `java.util.Formatter`, `java.lang.String`, `java.io.PrintStream`,\n`MessageFormat`, and `java.io.PrintWriter` classes and the `printf(...)` methods of `java.io.PrintStream`\nor `java.io.PrintWriter` classes. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, FIO47-C.](https://www.securecoding.cert.org/confluence/x/wQA1) - Use valid format strings \n",
        "disable": false
      },
      {
        "real_name": "java:S1185",
        "display_name": "JavaS1185",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overriding methods should do more than simply call the same method in the super class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in `final` overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of `equals`, `hashCode` and `toString`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4454",
        "display_name": "JavaS4454",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"equals\" method parameters should not be marked \"@Nonnull\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy contract, the `equals(Object)` method, from `java.lang.Object`, should accept a `null` argument. Among all the\nother cases, the `null` case is even explicitly detailed in the `Object.equals(...)` Javadoc, stating <em>\"For any non-null\nreference value x, x.equals(null) should return false.\"</em>\n\nAssuming that the argument to `equals` is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of `equals`, but it is also likely to cause problems in the future as the use of the class evolves over time.\n\nThe rule raises an issue when the `equals` method is overridden and its parameter annotated with any kind of `@Nonnull`\nannotation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2151",
        "display_name": "JavaS2151",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"runFinalizersOnExit\" should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRunning finalizers on JVM exit is disabled by default. It can be enabled with `System.runFinalizersOnExit` and\n`Runtime.runFinalizersOnExit`, but both methods are deprecated because they are are inherently unsafe. \n\nAccording to the Oracle Javadoc:\n\n> \n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n\n\nIf you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MET12-J.](https://wiki.sei.cmu.edu/confluence/x/4jZGBQ) - Do not use finalizers \n",
        "disable": false
      },
      {
        "real_name": "java:S3008",
        "display_name": "JavaS3008",
        "severity": "info",
        "category": "convention",
        "rule_title": "Static non-final field names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2272",
        "display_name": "JavaS2272",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy contract, any implementation of the `java.util.Iterator.next()` method should throw a `NoSuchElementException` exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n`Iterator`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2273",
        "display_name": "JavaS2273",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy contract, the method `Object.wait(...)`, `Object.notify()` and `Object.notifyAll()` should be called by a\nthread that is the owner of the object's monitor. If this is not the case an `IllegalMonitorStateException` exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a `synchronized` method or statement. \n\n## Noncompliant Code Example\n\nor\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S1182",
        "display_name": "JavaS1182",
        "severity": "info",
        "category": "convention",
        "rule_title": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Cloneable` is the marker `Interface` that indicates that `clone()` may be called on an object. Overriding\n`clone()` without implementing `Cloneable` can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.\n\nThe usual convention for `Object.clone()` according to Oracle's Javadoc is:\n\n  1.  `x.clone() != x` \n  1.  `x.clone().getClass() == x.getClass()` \n  1.  `x.clone().equals(x)` \n\nObtaining the object that will be returned by calling `super.clone()` helps to satisfy those invariants:\n\n  1.  `super.clone()` returns a new object instance \n  1.  `super.clone()` returns an object of the same type as the one `clone()` was called on \n  1.  `Object.clone()` performs a shallow copy of the object's state \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-580](http://cwe.mitre.org/data/definitions/580.html) - clone() Method Without super.clone() \n  -  [CERT, MET53-J.](https://wiki.sei.cmu.edu/confluence/x/FjZGBQ) - Ensure that the clone() method calls super.clone() \n",
        "disable": false
      },
      {
        "real_name": "java:S1181",
        "display_name": "JavaS1181",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Throwable and Error should not be caught",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Throwable` is the superclass of all errors and exceptions in Java. `Error` is the superclass of all errors, which are not\nmeant to be caught by applications.\n\nCatching either `Throwable` or `Error` will also catch `OutOfMemoryError` and `InternalError`, from\nwhich an application should not attempt to recover.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-396](http://cwe.mitre.org/data/definitions/396.html) - Declaration of Catch for Generic Exception \n  <li> [C++ Core Guidelines E.14](https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types) - Use\n  purpose-designed user-defined types as exceptions (not built-in types) </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2390",
        "display_name": "JavaS2390",
        "severity": "error",
        "category": "convention",
        "rule_title": "Classes should not access their own subclasses during initialization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.\n\nTo make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, DCL00-J.](https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles) - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3578",
        "display_name": "JavaS3578",
        "severity": "info",
        "category": "convention",
        "rule_title": "Test methods should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.\n\n## Noncompliant Code Example\n\nWith the default value: `^test[A-Z][a-zA-Z0-9]*$`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5876",
        "display_name": "JavaS5876",
        "severity": "error",
        "category": "security",
        "rule_title": "A new session should be created during user authentication",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSession fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).\n\n## Noncompliant Code Example\n\nIn a Spring Security's context, session fixation protection is enabled by default but can be disabled with `sessionFixation().none()`\nmethod:\n\n## Compliant Solution\n\nIn a Spring Security's context, session fixation protection can be enabled as follows:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication) -\n  Broken Authentication </li>\n  -  [OWASP Sesssion Fixation](https://www.owasp.org/index.php/Session_fixation) \n  -  [MITRE, CWE-384](https://cwe.mitre.org/data/definitions/384.html) - Session Fixation \n",
        "disable": false
      },
      {
        "real_name": "java:S3457",
        "display_name": "JavaS3457",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Printf-style format strings should be used correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause `printf`-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of `printf`-style format strings to their\narguments when calling the `format(...)` methods of `java.util.Formatter`, `java.lang.String`,\n`java.io.PrintStream`, `MessageFormat`, and `java.io.PrintWriter` classes and the `printf(...)` methods of\n`java.io.PrintStream` or `java.io.PrintWriter` classes. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, FIO47-C.](https://wiki.sei.cmu.edu/confluence/x/J9YxBQ) - Use valid format strings \n",
        "disable": false
      },
      {
        "real_name": "java:S4423",
        "display_name": "JavaS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different from \"TLSv1.2\", \"TLSv1.3\", \"DTLSv1.2\" or\n\"DTLSv1.3\").\n\n## Noncompliant Code Example\n\n`javax.net.ssl.SSLContext` library:\n\n[okhttp](https://square.github.io/okhttp/) library:\n\n## Compliant Solution\n\n`javax.net.ssl.SSLContext` library:\n\n[okhttp](https://square.github.io/okhttp/) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  [Diagnosing TLS, SSL, and HTTPS](https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https) \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1158",
        "display_name": "JavaS1158",
        "severity": "info",
        "category": "convention",
        "rule_title": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating temporary primitive wrapper objects only for `String` conversion or the use of the `compareTo` method is\ninefficient.\n\nInstead, the static `toString()` or `compare` method of the primitive wrapper class should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2127",
        "display_name": "JavaS2127",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"Double.longBitsToDouble\" should not be used for \"int\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Double.longBitsToDouble` expects a 64-bit, `long` argument. Pass it a smaller value, such as an `int` and the\nmathematical conversion into a `double` simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4544",
        "display_name": "JavaS4544",
        "severity": "error",
        "category": "security",
        "rule_title": "Using unsafe Jackson deserialization configuration is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2017-4995](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995) \n  -  [CVE-2018-19362](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362) \n\nWhen Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution. \n\nThis rule raises an issue when:\n\n  <li> `enableDefaultTyping()` is called on an instance of `com.fasterxml.jackson.databind.ObjectMapper` or\n  `org.codehaus.jackson.map.ObjectMapper`. </li>\n  <li> or when the annotation `@JsonTypeInfo` is set at class or field levels and configured with `use = JsonTypeInfo.Id.CLASS)`\n  or `use = Id.MINIMAL_CLASS`. </li>\n\n## Ask Yourself Whether\n\n  -  You configured the Jackson deserializer as mentioned above. \n  -  The serialized data might come from an untrusted source. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use the latest patch versions of `jackson-databind` blocking the already discovered \"deserialization gadgets\". \n  -  Avoid using the default typing configuration: `ObjectMapper.enableDefaultTyping()`. \n  <li> If possible, use `@JsonTypeInfo(use = Id.NAME)` instead of `@JsonTypeInfo(use = Id.CLASS)` or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on `@JsonTypeName` and `@JsonSubTypes`. </li>\n\n## Sensitive Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n  -  OWASP - [Deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data) \n  -  [MITRE, CWE-502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data \n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  -  [CVE-2017-1509](https://nvd.nist.gov/vuln/detail/CVE-2017-15095) \n  -  [CVE-2017-7525](https://nvd.nist.gov/vuln/detail/CVE-2017-7525) \n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5996",
        "display_name": "JavaS5996",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Regex boundaries should not be used in a way that can never be matched",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn regular expressions the boundaries `^` and `\\A` can only match at the beginning of the input (or, in case of\n`^` in combination with the `MULTILINE` flag, the beginning of the line) and `$`, `\\Z` and `\\z`\nonly at the end.\n\nThese patterns can be misused, by accidentally switching `^` and `$` for example, to create a pattern that can never\nmatch.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2245",
        "display_name": "JavaS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\nAs the `java.util.Random` class relies on a pseudorandom number generator, this class and relating `java.lang.Math.random()`\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n`java.security.SecureRandom` class which relies on a cryptographically strong random number generator (RNG) should be used in place.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. \n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1157",
        "display_name": "JavaS1157",
        "severity": "info",
        "category": "convention",
        "rule_title": "Case insensitive string comparisons should be made without intermediate upper or lower casing",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `toLowerCase()` or `toUpperCase()` to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate `String` objects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised when a locale is specified because the result could be different from \"equalsIgnoreCase\". (e.g.: using the Turkish\nlocale)\n",
        "disable": false
      },
      {
        "real_name": "java:S4426",
        "display_name": "JavaS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic keys should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of cryptographic systems require a sufficient key size to be robust against brute-force attacks.\n\n[NIST recommendations](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf) will be checked for these\nuse-cases:\n\n**Digital Signature Generation** and **Verification:** \n\n  -  p ≥ 2048 AND q ≥ 224 for DSA (`p` is key length and `q` the modulus length) \n  -  n ≥ 2048 for RSA (`n` is the key length) \n\n**Key Agreement**: \n\n  -  p ≥ 2048 AND q ≥ 224 for DH and MQV \n  <li> n ≥ 224 for ECDH and ECMQV (Examples: `secp192r1` is a non-compliant curve (`n` &lt; 224) but `secp224k1` is\n  compliant (`n` &gt;= 224)) </li>\n\n**Symmetric keys**: \n\n  -  key length ≥ 128 bits \n\nThis rule will not raise issues for ciphers that are considered weak (no matter the key size) like `DES`, `Blowfish`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [NIST 800-131A](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf) - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "java:S3577",
        "display_name": "JavaS3577",
        "severity": "info",
        "category": "convention",
        "rule_title": "Test classes should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.\n\n## Noncompliant Code Example\n\nWith the default value: `^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4425",
        "display_name": "JavaS4425",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Integer.toHexString\" should not be used to build hexadecimal strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `Integer.toHexString` is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of `0x4508` would be converted\ninto `45` and `8` which once concatenated would give `0x458`.\n\nThis is particularly damaging when converting hash-codes and could lead to a security vulnerability.\n\nThis rule raises an issue when `Integer.toHexString` is used in any kind of string concatenations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-704](http://cwe.mitre.org/data/definitions/704.html) - Incorrect Type Conversion or Cast \n  -  Derived from FindSecBugs rule [BAD_HEXA_CONVERSION](https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION) \n",
        "disable": false
      },
      {
        "real_name": "java:S5998",
        "display_name": "JavaS5998",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Regular expressions should not overflow the stack",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains\nmultiple paths (i.e. the body of the repetition contains an alternation (`|`), an optional element or another repetition), trying to match\nthe regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as `*+`\ninstead of `*`) or when using a character class inside a repetition (e.g. `[ab]*` instead of `(a|b)*`).\n\nThe size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that\nsignificantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant\ncharacters because such consecutive characters will be matched by the regex engine without invoking any recursion.\n\nFor example, on a JVM with a stack size of 1MB, the regex `(?:a|b)*` will overflow the stack after matching around 6000 characters\n(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas `(?:abc|def)*` can handle around\n15000 characters.\n\nSince often times stack growth can't easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow\non realistically sized inputs. You can adjust the `maxStackConsumptionFactor` parameter to adjust this.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2122",
        "display_name": "JavaS2122",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`java.util.concurrent.ScheduledThreadPoolExecutor`'s pool is sized with `corePoolSize`, so setting `corePoolSize`\nto zero means the executor will have no threads and run nothing.\n\nThis rule detects instances where `corePoolSize` is set to zero, via either its setter or the object constructor.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S5993",
        "display_name": "JavaS5993",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Constructors of an \"abstract\" class should not be declared \"public\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAbstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The `protected` modifier should be enough.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1155",
        "display_name": "JavaS1155",
        "severity": "info",
        "category": "convention",
        "rule_title": "Collection.isEmpty() should be used to test for emptiness",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `Collection.size()` to test for emptiness works, but using `Collection.isEmpty()` makes the code more readable and can\nbe more performant. The time complexity of any `isEmpty()` method implementation should be `O(1)` whereas some implementations\nof `size()` can be `O(n)`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2123",
        "display_name": "JavaS2123",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Values should not be uselessly incremented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3330",
        "display_name": "JavaS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\nIf you create a security-sensitive cookie in your JAVA code:\n\nBy default the [`HttpOnly`](https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)) flag is\nset to **false:**\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "java:S1153",
        "display_name": "JavaS1153",
        "severity": "info",
        "category": "convention",
        "rule_title": "String.valueOf() should not be appended to a String",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAppending `String.valueOf()` to a `String` decreases the code readability.\n\nThe argument passed to `String.valueOf()` should be directly appended instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2121",
        "display_name": "JavaS2121",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Silly String operations should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a substring from 0 to the end is silly. You'll end up with the same string you started with. Using the value of `String.length`\nas either the start or end of a substring has similarly predictable results.\n\nCalling `String.contains` with the argument being identical to the String on which contains is invoked doesn't make sense.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5994",
        "display_name": "JavaS5994",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Regex patterns following a possessive quantifier should not always fail",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPossessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:\n\n{noformat}\n\n?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+\n\n{noformat}\n\nBut because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2129",
        "display_name": "JavaS2129",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConstructors for `String`, `BigInteger`, `BigDecimal` and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using `valueOf` for\neverything else.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`BigDecimal` constructor with `double` argument is ignored as using `valueOf` instead might change resulting\nvalue. See {rule:java:S2111} .\n",
        "disable": false
      },
      {
        "real_name": "java:S1150",
        "display_name": "JavaS1150",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Enumeration should not be implemented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFrom the official Oracle Javadoc:\n\n> \n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1151",
        "display_name": "JavaS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch case\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `switch` statement should be used only to clearly define some new branches in the control flow. As soon as a `case`\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S923",
        "display_name": "JavaS923",
        "severity": "info",
        "category": "convention",
        "rule_title": "Functions should not be defined with a variable number of arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAs stated per effective java : \n\n> \n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2259",
        "display_name": "JavaS2259",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Null pointers should not be dereferenced",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA reference to `null` should never be dereferenced/accessed. Doing so will cause a `NullPointerException` to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.\n\nNote that when they are present, this rule takes advantage of `@CheckForNull` and `@Nonnull` annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when `@Nonnull` is used\non the parameter to `equals`, which by contract should always work with null.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP34-C.](https://wiki.sei.cmu.edu/confluence/x/QdcxBQ) - Do not dereference null pointers \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "java:S1168",
        "display_name": "JavaS1168",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Empty arrays and collections should be returned instead of null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturning `null` instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.\n\nMoreover, in many cases, `null` is used as a synonym for empty.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC19-C.](https://wiki.sei.cmu.edu/confluence/x/aNYxBQ) - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> [CERT, MET55-J.](https://wiki.sei.cmu.edu/confluence/x/JzZGBQ) - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4434",
        "display_name": "JavaS4434",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing deserialization of LDAP objects is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJNDI supports the deserialization of objects from LDAP directories, which can lead to remote code execution.\n\nThis rule raises an issue when an LDAP search query is executed with `SearchControls` configured to allow deserialization.\n\n## Ask Yourself Whether\n\n  -  The application connects to an untrusted LDAP directory. \n  -  User-controlled objects can be stored in the LDAP directory. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nIt is recommended to disable deserialization of LDAP objects.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data \n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  -  Derived from FindSecBugs rule [LDAP_ENTRY_POISONING](https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING) \n",
        "disable": false
      },
      {
        "real_name": "java:S2257",
        "display_name": "JavaS2257",
        "severity": "error",
        "category": "security",
        "rule_title": "Using non-standard cryptographic algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like `SHA-256`, `SHA-384`, `SHA-512`, ... should be used instead.\n\nThis rule tracks creation of `java.security.MessageDigest` subclasses.\n\n## Recommended Secure Coding Practices\n\n  -  Use a standard algorithm instead of creating a custom one. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> Derived from FindSecBugs rule [MessageDigest is Custom](https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST)\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3346",
        "display_name": "JavaS3346",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Expressions used in \"assert\" should not produce side effects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince `assert` statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP06-J.](https://wiki.sei.cmu.edu/confluence/x/mjdGBQ) - Expressions used in assertions must not produce side effects \n",
        "disable": false
      },
      {
        "real_name": "java:S2133",
        "display_name": "JavaS2133",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Objects should not be created only to \"getClass\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating an object for the sole purpose of calling `getClass` on it is a waste of memory and cycles. Instead, simply use the class'\n`.class` property.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2254",
        "display_name": "JavaS2254",
        "severity": "error",
        "category": "security",
        "rule_title": "\"HttpServletRequest.getRequestedSessionId()\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Oracle Java API, the `HttpServletRequest.getRequestedSessionId()` method:\n\n> \n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n\n\nThe session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. \n\nHere is an example of a updated HTTP header:\n\nDue to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged as is but using a one-way hash to prevent hijacking of active sessions.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-807](http://cwe.mitre.org/data/definitions/807) - Reliance on Untrusted Inputs in a Security Decision \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S1166",
        "display_name": "JavaS1166",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exception handlers should preserve the original exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen handling a caught exception, the original exception's message and stack trace should be logged or passed forward.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`InterruptedException`, `NumberFormatException`, `DateTimeParseException`, `ParseException` and\n`MalformedURLException` exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n`NoSuchMethodException` is often required when dealing with the Java reflection API.\n\nBecause they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.\n\nFurthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [CERT, ERR00-J.](https://wiki.sei.cmu.edu/confluence/x/xDdGBQ) - Do not suppress or ignore checked exceptions \n  -  [MITRE, CWE-778](https://cwe.mitre.org/data/definitions/778.html) - Insufficient Logging \n",
        "disable": false
      },
      {
        "real_name": "java:S2134",
        "display_name": "JavaS2134",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes extending java.lang.Thread should override the \"run\" method",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java API documentation:\n\n> \n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n\n\nBy definition, extending the Thread class without overriding the `run` method doesn't make sense, and implies that the contract of the\n`Thread` class is not well understood.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nIf `run()` is not overridden in a class extending `Thread`, it means that starting the thread will actually call\n`Thread.run()`. However, `Thread.run()` does nothing if it has not been fed with a target `Runnable`. The rule\nconsequently ignore classes extending `Thread` if they are calling, in their constructors, the `super(...)` constructor with a\nproper `Runnable` target.\n",
        "disable": false
      },
      {
        "real_name": "java:S1165",
        "display_name": "JavaS1165",
        "severity": "info",
        "category": "convention",
        "rule_title": "Exception classes should be immutable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExceptions are meant to represent the application's state at the point at which an error occurred.\n\nMaking all fields in an `Exception` class `final` ensures that this state:\n\n  -  Will be fully defined at the same time the `Exception` is instantiated. \n  -  Won't be updated or corrupted by a questionable error handler. \n\nThis will enable developers to quickly understand what went wrong.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4551",
        "display_name": "JavaS4551",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Enum values should be compared with \"==\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting equality of an enum value with `equals` is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:\n\n  -  provides the same expected comparison (content) as `equals` \n  -  is more null-safe than equals() \n  -  provides compile-time (static) checking rather than runtime checking \n\nFor these reasons, use of \"==\" should be preferred to `equals`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java\n  Enums</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2131",
        "display_name": "JavaS2131",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Primitives should not be boxed just for \"String\" conversion",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n`toString` method, it's a waste of memory and cycles because those methods are `static`, and can therefore be used without a\nclass instance. Similarly, using the `static` method `valueOf` in the primitive-wrapper classes with a non-`String`\nargument should be avoided.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2252",
        "display_name": "JavaS2252",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loop conditions should be true at least once",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `for` loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4433",
        "display_name": "JavaS4433",
        "severity": "error",
        "category": "security",
        "rule_title": "LDAP connections should be authenticated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.\n\nSimple authentication in LDAP can be used with three different mechanisms:\n\n  -  **Anonymous Authentication Mechanism** by performing a bind request with a username and password value of zero length. \n  -  **Unauthenticated Authentication Mechanism** by performing a bind request with a password value of zero length. \n  -  **Name/Password Authentication Mechanism** by performing a bind request with a password value of non-zero length. \n\nAnonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. \n\n## Noncompliant Code Example\n\nThis rule raises an issue when an LDAP connection is created with `Context.SECURITY_AUTHENTICATION` set to `\"none\"`.\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n  -  [ldapwiki.com](https://ldapwiki.com/wiki/Simple%20Authentication)- Simple Authentication \n",
        "disable": false
      },
      {
        "real_name": "java:S1163",
        "display_name": "JavaS1163",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exceptions should not be thrown in finally blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the `try` or `catch`\nblock, and the masked's exception message and stack trace will be lost.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, ERR05-J.](https://wiki.sei.cmu.edu/confluence/x/FTZGBQ) - Do not let checked exceptions escape from a finally block \n",
        "disable": false
      },
      {
        "real_name": "java:S2139",
        "display_name": "JavaS2139",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exceptions should be either logged or rethrown but not both",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn applications where the accepted practice is to log an `Exception` and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown `Exception`. Instead, exceptions should be either logged or\nrethrown, not both.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "java:S5527",
        "display_name": "JavaS5527",
        "severity": "error",
        "category": "security",
        "rule_title": "Server hostnames should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate.\n\nThe certificate's hostname-specific data should match the server hostname.\n\nIt's not recommended to re-invent the wheel by implementing custom hostname verification.\n\nTLS/SSL libraries provide built-in hostname verification functions that should be used.\n\nThis rule raises an issue when:\n\n  -  `HostnameVerifier.verify()` method always returns `true` \n  <li> a JavaMail's `javax.mail.Session` is created with a `Properties` object having no\n  `mail.smtp.ssl.checkserveridentity` or `mail.smtps.ssl.checkserveridentity` not configured to `true` </li>\n  <li> a Apache Common Emails's `org.apache.commons.mail.SimpleEmail` is used with `setSSLOnConnect(true)` or\n  `setStartTLSEnabled(true)` or `setStartTLSRequired(true)` without a call to `setSSLCheckServerIdentity(true)` </li>\n\n## Noncompliant Code Example\n\nSimpleEmail example:\n\nJavaMail's example:\n\n## Compliant Solution\n\nSimpleEmail example:\n\nJavaMail's example:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n  -  Derived from FindSecBugs rule [WEAK_HOSTNAME_VERIFIER](https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER) \n",
        "disable": false
      },
      {
        "real_name": "java:S818",
        "display_name": "JavaS818",
        "severity": "info",
        "category": "convention",
        "rule_title": "Literal suffixes should be upper case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT DCL16-C.](https://wiki.sei.cmu.edu/confluence/x/cdYxBQ) - Use \"L,\" not \"l,\" to indicate a long value \n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "java:S1162",
        "display_name": "JavaS1162",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Checked exceptions should not be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.\n\nThis rule verifies that no method throws a new checked exception.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4790",
        "display_name": "JavaS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2250",
        "display_name": "JavaS2250",
        "severity": "info",
        "category": "convention",
        "rule_title": "Collection methods with O(n) performance should be used carefully",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe time complexity of method calls on collections is not always obvious. For instance, for most collections the `size()` method takes\nconstant time, but the time required to execute `ConcurrentLinkedQueue.size()` is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. \n\nThis rule raises an issue when the following O(n) methods are called outside of constructors on class fields:\n\n  <li> `ArrayList`\n    <ul>\n      -  `contains` \n      -  `remove` \n    \n      -  `get` \n      -  `contains` \n    \n      -  `size` \n      -  `contains` \n    \n      -  `size` \n      -  `contains` \n    \n      -  `add` \n      -  `contains` \n      -  `remove` \n    \n      -  `add` \n      -  `contains` \n      -  `remove` \n    \n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1161",
        "display_name": "JavaS1161",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"@Override\" should be used on overriding and implementing methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the `@Override` annotation is useful for two reasons :\n\n  -  It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. \n  -  It improves the readability of the source code by making it obvious that methods are overridden. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed when overriding a method from the `Object` class like `toString()`, `hashCode()`, ...\n",
        "disable": false
      },
      {
        "real_name": "java:S2130",
        "display_name": "JavaS2130",
        "severity": "info",
        "category": "convention",
        "rule_title": "Parsing should be used to convert \"Strings\" to primitives",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRather than creating a boxed primitive from a `String` to extract the primitive value, use the relevant `parse` method\ninstead. It will be clearer and more efficient.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1160",
        "display_name": "JavaS1160",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Public methods should throw at most one checked exception",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.\n\nBut to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nOverriding methods are not checked by this rule and are allowed to throw several checked exceptions.\n",
        "disable": false
      },
      {
        "real_name": "java:S2251",
        "display_name": "JavaS2251",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "A \"for\" loop update clause should move the counter in the right direction",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC54-J.](https://wiki.sei.cmu.edu/confluence/x/aTdGBQ) - Avoid inadvertent wrapping of loop counters \n",
        "disable": false
      },
      {
        "real_name": "java:S4792",
        "display_name": "JavaS4792",
        "severity": "error",
        "category": "security",
        "rule_title": "Configuring loggers is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0285](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285) \n  -  [CVE-2000-1127](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127) \n  -  [CVE-2017-15113](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113) \n  -  [CVE-2015-5742](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742) \n\nLogs are useful before, during and after a security incident.\n\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  -  In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \n\nLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\n\nThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  -  the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  -  the logs are only stored locally instead of being backuped or replicated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. \n  -  Production logs should be stored in a secure location which is only accessible to system administrators. \n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n\nRemember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\n\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  -  Monitor the logs for any suspicious activity. \n\n## Sensitive Code Example\n\nThis rule supports the following libraries: Log4J, `java.util.logging` and Logback\n\n## Exceptions\n\nLog4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [MITRE, CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Information Exposure Through Log Files \n  -  [MITRE, CWE-117](https://cwe.mitre.org/data/definitions/117.html) - Improper Output Neutralization for Logs \n  -  [MITRE, CWE-778](https://cwe.mitre.org/data/definitions/778.html) - Insufficient Logging \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S1774",
        "display_name": "JavaS1774",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The ternary operator should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose `if`/`else` structure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2864",
        "display_name": "JavaS2864",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"entrySet()\" should be iterated when both the key and value are needed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the keys from a map are needed in a loop, iterating the `keySet` makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the `entrySet`, which will give access to both the key and value, instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2629",
        "display_name": "JavaS2629",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Preconditions\" and logging arguments should not require evaluation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing message arguments that require further evaluation into a Guava `com.google.common.base.Preconditions` check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.\n\nSimilarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.\n\nInstead, you should structure your code to pass static or pre-computed values into `Preconditions` conditions check and logging\ncalls.\n\nSpecifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen `Preconditions` should be skipped altogether, and the relevant exception should be conditionally thrown instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`catch` blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods `isXXXEnabled` and ignores the bodies of such `if` statements.\n",
        "disable": false
      },
      {
        "real_name": "java:S3958",
        "display_name": "JavaS3958",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Intermediate Stream methods should not be left unused",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Stream Operations](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps) \n",
        "disable": false
      },
      {
        "real_name": "java:S4926",
        "display_name": "JavaS4926",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"serialVersionUID\" should not be declared blindly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProviding a `serialVersionUID` field on `Serializable` classes is strongly recommended by the `Serializable`\ndocumentation but blindly following that recommendation can be harmful.\n\n`serialVersionUID` value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what's wrong.\n\nWhen the `serialVersionUID` is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n`serialVersionUID` value when the `Serializable` class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.\n\nTherefore, defining `serialVersionUID` should be done with care. This rule raises an issue on each `serialVersionUID` field\ndeclared on classes implementing `Serializable` to be sure the presence and the value of the `serialVersionUID` field is\nchallenged and validated by the team.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> Vojtech Ruzicka's Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3959",
        "display_name": "JavaS3959",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Consumed Stream pipelines should not be reused",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nStream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.\n\n## Noncompliant Code Example\n\n## See\n\n[Stream Operations](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps)\n",
        "disable": false
      },
      {
        "real_name": "java:S4929",
        "display_name": "JavaS4929",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"read(byte[],int,int)\" should be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen directly subclassing `java.io.InputStream` or `java.io.FilterInputStream`, the only requirement is that you implement\nthe method `read()`. However most uses for such streams don't read a single byte at a time and the default implementation for\n`read(byte[],int,int)` will call `read(int)` for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n`read(byte[],int,int)`.\n\nThis rule raises an issue when a direct subclass of `java.io.InputStream` or `java.io.FilterInputStream` doesn't provide an\noverride of `read(byte[],int,int)`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the class is declared `abstract`.\n",
        "disable": false
      },
      {
        "real_name": "java:S1656",
        "display_name": "JavaS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1659",
        "display_name": "JavaS1659",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiple variables should not be declared on the same line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring multiple variables on one line is difficult to read.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, DCL52-J.](https://wiki.sei.cmu.edu/confluence/x/YTZGBQ) - Do not declare more than one variable per declaration \n  -  [CERT, DCL04-C.](https://wiki.sei.cmu.edu/confluence/x/EtcxBQ) - Do not declare more than one variable per declaration \n",
        "disable": false
      },
      {
        "real_name": "java:S1301",
        "display_name": "JavaS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements are useful when there are many different cases depending on the value of the same expression.\n\nFor just one or two cases however, the code will be more readable with `if` statements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4925",
        "display_name": "JavaS4925",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Class.forName()\" should not load JDBC 4.0+ drivers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the past, it was required to load a JDBC driver before creating a `java.sql.Connection`. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and `Class.forName()` can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.\n\nThis rule raises an issue when `Class.forName()` is used with one of the following values:\n\n  -  `com.mysql.jdbc.Driver` \n  -  `oracle.jdbc.driver.OracleDriver` \n  -  `com.ibm.db2.jdbc.app.DB2Driver` \n  -  `com.ibm.db2.jdbc.net.DB2Driver` \n  -  `com.sybase.jdbc.SybDriver` \n  -  `com.sybase.jdbc2.jdbc.SybDriver` \n  -  `com.teradata.jdbc.TeraDriver` \n  -  `com.microsoft.sqlserver.jdbc.SQLServerDriver` \n  -  `org.postgresql.Driver` \n  -  `sun.jdbc.odbc.JdbcOdbcDriver` \n  -  `org.hsqldb.jdbc.JDBCDriver` \n  -  `org.h2.Driver` \n  -  `org.firebirdsql.jdbc.FBDriver` \n  -  `net.sourceforge.jtds.jdbc.Driver` \n  -  `com.ibm.db2.jcc.DB2Driver` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1541",
        "display_name": "JavaS1541",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe cyclomatic complexity of methods should not exceed a defined threshold.\n\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n\n## Exceptions\n\nWhile having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n`equals` and `hashCode` methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S1309",
        "display_name": "JavaS1309",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"@SuppressWarnings\" annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows you to track the usage of the `@SuppressWarnings` mechanism.\n\n## Noncompliant Code Example\n\nWith a parameter value of \"unused\" :\n",
        "disable": false
      },
      {
        "real_name": "java:S2638",
        "display_name": "JavaS2638",
        "severity": "error",
        "category": "convention",
        "rule_title": "Method overrides should not change contracts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: `@Nullable`, `@CheckForNull`, `@NotNull`, `@NonNull`, and\n`@Nonnull`, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [Wikipedia - Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle) \n",
        "disable": false
      },
      {
        "real_name": "java:S2639",
        "display_name": "JavaS2639",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Inappropriate regular expressions should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRegular expressions are powerful but tricky, and even those long used to using them can make mistakes.\n\nThe following should not be used as regular expressions:\n\n  -  `.` - matches any single character. Used in `replaceAll`, it matches **everything** \n  -  `|` - normally used as an option delimiter. Used stand-alone, it matches the space between characters \n  -  `File.separator` - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2757",
        "display_name": "JavaS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2637",
        "display_name": "JavaS2637",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"@NonNull\" values should not be set to null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields, parameters and return values marked `@NotNull`, `@NonNull`, or `@Nonnull` are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to `null`, or failing to set such a class field\nin a constructor, could cause `NullPointerException`s at runtime.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "java:S3725",
        "display_name": "JavaS3725",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Java 8's \"Files.exists\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `Files.exists` method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. \n\nThe same goes for `Files.notExists`, `Files.isDirectory` and `Files.isRegularFile` from `java.nio.file`\npackage.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is not 8.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [https://bugs.openjdk.java.net/browse/JDK-8153414](https://bugs.openjdk.java.net/browse/JDK-8153414) \n  -  [https://bugs.openjdk.java.net/browse/JDK-8154077](https://bugs.openjdk.java.net/browse/JDK-8154077) \n",
        "disable": false
      },
      {
        "real_name": "java:S1874",
        "display_name": "JavaS1874",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"@Deprecated\" code should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOnce deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-477](http://cwe.mitre.org/data/definitions/477.html) - Use of Obsolete Functions \n  -  [CERT, MET02-J.](https://wiki.sei.cmu.edu/confluence/x/6TdGBQ) - Do not use deprecated or obsolete classes or methods \n",
        "disable": false
      },
      {
        "real_name": "java:S2755",
        "display_name": "JavaS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\nTo protect Java XML Parsers from XXE attacks <a\nhref=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-94ABC0EE-9DC8-44F0-84AD-47ADD5340477\">these\nproperties</a> have been defined since JAXP 1.5:\n\n  -  ACCESS_EXTERNAL_DTD: should be set to \"\" when processing XML/XSD/XLS files (it looks for external DOCTYPEs) \n  -  ACCESS_EXTERNAL_SCHEMA: should be set to \"\" when processing XML/XSD/XLS files (it looks for external schemalocation ect) \n  -  ACCESS_EXTERNAL_STYLESHEET should be set to \"\" when processing XLS file (it looks for external imports, includes ect); \n\nNote that [Apache Xerces](http://xerces.apache.org/xerces2-j/) is still based on JAXP 1.4, therefore one solution is to set to\n`false` the [external-general-entities](http://xerces.apache.org/xerces2-j/features.html#external-general-entities) feature.\n\nAvoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the implementation:\n\n  <li> it has <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-88B04BE2-35EF-4F61-B4FA-57A0E9102342\">no effect</a> to protect the parser from XXE attacks but helps guard against excessive memory consumption from XML processing. </li>\n  -  or it's just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to \"\" but without guarantee). \n\nWhen setting <a href=\"https://docs.oracle.com/javase/7/docs/api/org/xml/sax/XMLReader.html#setEntityResolver(org.xml.sax.EntityResolver)\">an entity\nresolver</a> to `null` (eg: `setEntityResolver(null)`) the parser will use its own resolution, which is unsafe.\n\n## Noncompliant Code Examples\n\n[DocumentBuilderFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html) library:\n\n[SAXParserFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html) library:\n\n[XMLInputFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html) library:\n\n[TransformerFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html) library:\n\n[SchemaFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html) library:\n\n[Validator](https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html) library:\n\n[Dom4j](https://dom4j.github.io/) library:\n\n[Jdom2](http://www.jdom.org/) library:\n\n## Compliant Solution\n\n[DocumentBuilderFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html) library:\n\n[SAXParserFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html) library:\n\n[XMLInputFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html) library:\n\n[TransformerFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html) library:\n\n[SchemaFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html) library:\n\n[Validator](https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html) library:\n\nFor [dom4j](https://dom4j.github.io/) library, ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA are not supported, thus a very strict fix\nis to disable doctype declarations:\n\n[Jdom2](http://www.jdom.org/) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "java:S1751",
        "display_name": "JavaS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n`if` statement should be used instead.\n\nAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested `return`,\n`break` or `throw` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1994",
        "display_name": "JavaS1994",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"for\" loop increment clauses should modify the loops' counters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt can be extremely confusing when a `for` loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr \n",
        "disable": false
      },
      {
        "real_name": "java:S1872",
        "display_name": "JavaS1872",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes should not be compared by name",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.\n\nInstead, the `instanceof` operator or the `Class.isAssignableFrom()` method should be used to check the object's underlying\ntype.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-486](http://cwe.mitre.org/data/definitions/486.html) - Comparison of Classes by Name \n  -  [CERT, OBJ09-J.](https://wiki.sei.cmu.edu/confluence/x/eDdGBQ) - Compare classes and not class names \n",
        "disable": false
      },
      {
        "real_name": "java:S1871",
        "display_name": "JavaS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:java:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "java:S3937",
        "display_name": "JavaS3937",
        "severity": "error",
        "category": "convention",
        "rule_title": "Number patterns should be regular",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. \n\nThis rule raises an issue when underscores (`_`) are used to break a number into irregular subgroups.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1996",
        "display_name": "JavaS1996",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should contain only one top-level class or interface each",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.\n",
        "disable": false
      },
      {
        "real_name": "java:S1643",
        "display_name": "JavaS1643",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings should not be concatenated using '+' in a loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nStrings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1764",
        "display_name": "JavaS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Exceptions\n\n  -  This rule ignores `*`, `+`, and `=`. \n  -  The specific case of testing a floating point value against itself is a valid test for `NaN` and is therefore ignored. \n  -  Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:java:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "java:S2973",
        "display_name": "JavaS2973",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Escaped Unicode characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.\n\nThis rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2974",
        "display_name": "JavaS2974",
        "severity": "info",
        "category": "convention",
        "rule_title": "Classes without \"public\" constructors should be \"final\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClasses with only `private` constructors should be marked `final` to prevent any mistaken extension attempts.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1641",
        "display_name": "JavaS1641",
        "severity": "info",
        "category": "convention",
        "rule_title": "Sets with elements that are enum values should be replaced with EnumSet",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1640",
        "display_name": "JavaS1640",
        "severity": "info",
        "category": "convention",
        "rule_title": "Maps with keys that are enum values should be replaced with EnumMap",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen all the keys of a Map are values from the same enum, the `Map` can be replaced with an `EnumMap`, which can be much more\nefficient than other sets because the underlying data structure is a simple array.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2972",
        "display_name": "JavaS2972",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inner classes should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.\n",
        "disable": false
      },
      {
        "real_name": "java:S2737",
        "display_name": "JavaS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"catch\" clauses should do more than rethrow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `catch` clause that only rethrows the caught exception has the same effect as omitting the `catch` altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S2970",
        "display_name": "JavaS2970",
        "severity": "error",
        "category": "convention",
        "rule_title": "Assertions should be complete",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:\n\n  -  Fest: `assertThat` is not followed by an assertion invocation \n  -  AssertJ: `assertThat` is not followed by an assertion invocation \n  -  Mockito: `verify` is not followed by a method invocation \n  -  Truth: `assertXXX` is not followed by an assertion invocation \n\nIn such cases, what is intended to be a test doesn't actually verify anything\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nVariable assignments and return statements are skipped to allow helper methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S3822",
        "display_name": "JavaS3822",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Hibernate should not update database schemas",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of any value but `\"validate\"` for `hibernate.hbm2ddl.auto` may cause the database schema used by your application to\nbe changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the\n`\"validate\"` option, if it is used at all.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S3824",
        "display_name": "JavaS3824",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Map.get\" and value test should be replaced with single method call",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt's a common pattern to test the result of a `java.util.Map.get()` against `null` or calling\n`java.util.Map.containsKey()` before proceeding with adding or changing the value in the map. However the `java.util.Map` API\noffers a significantly better alternative in the form of the `computeIfPresent()` and `computeIfAbsent()` methods. Using these\ninstead leads to cleaner and more readable code.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is not 8.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will not raise an issue when trying to add `null` to a map, because `computeIfAbsent` will not add the entry if the\nvalue returned by the function is `null`.\n\n## See also\n\n  -  {rule:java:S6104} - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. \n",
        "disable": false
      },
      {
        "real_name": "java:S2612",
        "display_name": "JavaS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose POSIX file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"`others`\" class refers to all users except the owner of the file and the members of the group assigned to this file.\n\nGranting permissions to this group can lead to unintended access to files. \n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\nOn operating systems that implement POSIX standard. This will throw a `UnsupportedOperationException` on Windows.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2975",
        "display_name": "JavaS2975",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"clone\" should not be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMany consider `clone` and `Cloneable` broken in Java, largely because the rules for overriding `clone` are tricky\nand difficult to get right, according to Joshua Bloch:\n\n> \n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n\n\nA copy constructor or copy factory should be used instead.\n\nThis rule raises an issue when `clone` is overridden, whether or not `Cloneable` is implemented.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Copy Constructor versus Cloning](https://www.artima.com/intv/bloch13.html) \n\n### See Also\n\n  -  {rule:java:S2157} - \"Cloneables\" should implement \"clone\" \n  -  {rule:java:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" \n",
        "disable": false
      },
      {
        "real_name": "java:S2786",
        "display_name": "JavaS2786",
        "severity": "info",
        "category": "convention",
        "rule_title": "Nested \"enum\"s should not be declared static",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to [the Java Language Specification-8.9](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9):\n\n> \n  Nested enum types are implicitly `static`.\n\n\nSo there's no need to declare them `static` explicitly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5810",
        "display_name": "JavaS5810",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "JUnit5 test classes and methods should not be silently ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports\ndefault package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of\ncode.\n\nBut JUnit5 ignores without any warning:\n\n  -  private classes and private methods \n  -  static methods \n  -  methods returning a value without being a TestFactory \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1214",
        "display_name": "JavaS1214",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constants should not be defined in interfaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to Joshua Bloch, author of \"Effective Java\":\n\n> \n  The constant interface pattern is a poor use of interfaces. \n  That a class uses some constants internally is an implementation detail.\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  all of its subclasses will have their namespaces polluted by the constants in the interface.\n\n\nThis rule raises an issue when an interface consists solely of fields, without any other members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S1698",
        "display_name": "JavaS1698",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"==\" and \"!=\" should not be used when \"equals\" is overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is equivalent to use the equality `==` operator and the `equals` method to compare two objects if the `equals`\nmethod inherited from `Object` has not been overridden. In this case both checks compare the object references.\n\nBut as soon as `equals` is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of `==` and `!=` operators on objects whose `equals` methods are overridden.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nComparing two instances of the `Class` object will not raise an issue:\n\nComparing `Enum` will not raise an issue:\n\nComparing with `final` reference will not raise an issue:\n\nComparing with `this` will not raise an issue:\n\nComparing with `java.lang.String` and boxed types `java.lang.Integer`, ... will not raise an issue. \n\n## See\n\n  -  {rule:java:S4973} - Strings and Boxed types should be compared using \"equals()\" \n  -  [MITRE, CWE-595](http://cwe.mitre.org/data/definitions/595.html) - Comparison of Object References Instead of Object Contents \n  -  [MITRE, CWE-597](http://cwe.mitre.org/data/definitions/597.html) - Use of Wrong Operator in String Comparison \n  <li> [CERT, EXP03-J.](https://wiki.sei.cmu.edu/confluence/x/UjdGBQ) - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> [CERT, EXP50-J.](https://wiki.sei.cmu.edu/confluence/x/yDdGBQ) - Do not confuse abstract object equality with reference equality\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1213",
        "display_name": "JavaS1213",
        "severity": "info",
        "category": "convention",
        "rule_title": "The members of an interface or class declaration should appear in a pre-defined order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:\n\n  -  Class variables \n  -  Instance variables \n  -  Constructors \n  -  Methods \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4602",
        "display_name": "JavaS4602",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"@SpringBootApplication\" and \"@ComponentScan\" should not be used in the default package",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`@ComponentScan` is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the `basePackageClasses` or `basePackages` (or its alias `value`) parameters. If neither\nparameter is configured, `@ComponentScan` will consider only the package of the class annotated with it. When `@ComponentScan`\nis used on a class belonging to the default package, the entire classpath will be scanned.\n\nThis will slow-down the start-up of the application and it is likely the application will fail to start with an\n`BeanDefinitionStoreException` because you ended up scanning the Spring Framework package itself.\n\nThis rule raises an issue when:\n\n  <li> `@ComponentScan`, `@SpringBootApplication` and `@ServletComponentScan` are used on a class belonging to the\n  default package </li>\n  -  `@ComponentScan` is explicitly configured with the default package \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3752",
        "display_name": "JavaS3752",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing both safe and unsafe HTTP methods is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user's profile on a web application.\n\nCommon safe HTTP methods are GET, HEAD, or OPTIONS.\n\nCommon unsafe HTTP methods are POST, PUT and DELETE.\n\nAllowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.\n\n## Ask Yourself Whether\n\n  -  HTTP methods are not defined at all for a route/controller of the application. \n  -  Safe HTTP methods are defined and used for a route/controller that can change the state of an application. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nFor all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control) -\n  Broken Access Control </li>\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1696",
        "display_name": "JavaS1696",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"NullPointerException\" should not be caught",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NullPointerException` should be avoided, not caught. Any situation in which `NullPointerException` is explicitly caught can\neasily be converted to a `null` test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [MITRE, CWE-395](http://cwe.mitre.org/data/definitions/395.html) - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  -  [CERT, ERR08-J.](https://tinyurl.com/y6r4amg3) - Do not catch NullPointerException or any of its ancestors \n",
        "disable": false
      },
      {
        "real_name": "java:S3631",
        "display_name": "JavaS3631",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Arrays.stream\" should be used for primitive arrays",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor arrays of objects, `Arrays.asList(T ... a).stream()` and `Arrays.stream(array)` are basically equivalent in terms of\nperformance. However, for arrays of primitives, using `Arrays.asList` will force the construction of a list of boxed types, and then use\n**that** list as a stream. On the other hand, `Arrays.stream` uses the appropriate primitive stream type (`IntStream`,\n`LongStream`, `DoubleStream`) when applicable, with much better performance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4601",
        "display_name": "JavaS4601",
        "severity": "error",
        "category": "security",
        "rule_title": "\"HttpSecurity\" URL patterns should be correctly ordered",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nURL patterns configured on a `HttpSecurity.authorizeRequests()` method are considered in the order they were declared. It's easy to do a\nmistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the\n\"antMatchers\" declarations. The `/**` one should be the last one if it is declared.\n\nThis rule raises an issue when:\n\n  <li> A pattern is preceded by another that ends with `**` and has the same beginning. E.g.: `/page*-admin/db/**` is after\n  `/page*-admin/**` </li>\n  <li> A pattern without wildcard characters is preceded by another that matches. E.g.: `/page-index/db` is after `/page*/**`\n  </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2301",
        "display_name": "JavaS2301",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Public methods should not contain selector arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA selector argument is a `boolean` argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. \n\nUnfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.\n\nInstead, separate methods should be written.\n\nThis rule finds methods with a `boolean` that's used to determine which path to take through the method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1695",
        "display_name": "JavaS1695",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"NullPointerException\" should not be explicitly thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `NullPointerException` should indicate that a `null` value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. \n\nExplicitly throwing `NullPointerException` forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered `null` value and the condition which causes the method to purposely\nthrow an NPE.\n\nIf an NPE is being thrown to indicate that a parameter to the method should not have been null, use the `@NotNull` annotation\ninstead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3753",
        "display_name": "JavaS3753",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"@Controller\" classes that use \"@SessionAttributes\" must call \"setComplete\" on their \"SessionStatus\" objects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA Spring `@Controller` that uses `@SessionAttributes` is designed to handle a stateful / multi-post form. Such\n`@Controller`s use the specified `@SessionAttributes` to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless `setComplete()` is called on the `SessionStatus` object from a\n`@RequestMapping` method, neither Spring nor the JVM will know it's time to do that. Note that the `SessionStatus` object must\nbe passed to that method as a parameter.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1452",
        "display_name": "JavaS1452",
        "severity": "error",
        "category": "convention",
        "rule_title": "Generic wildcard types should not be used in return types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly recommended **not** to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. \n\nLet's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.\n\nThis rule raises an issue when a method returns a wildcard type. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "java:S3750",
        "display_name": "JavaS3750",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Spring \"@Controller\" classes should not use \"@Scope\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpring `@Controller`s, `@Service`s, and `@Repository`s have `singleton` scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.\n\nThis rule raises an issue when the `@Scope` annotation is applied to a `@Controller`, `@Service`, or\n`@Repository` with any value but \"singleton\". `@Scope(\"singleton\")` is redundant, but ignored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1210",
        "display_name": "JavaS1210",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java `Comparable.compareTo(T o)` documentation:\n\n> \n  It is strongly recommended, but not strictly required that `(x.compareTo(y)==0) == (x.equals(y))`.\n  Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\n  The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" \n\n\nIf this rule is violated, weird and unpredictable failures can occur.\n\nFor example, in Java 5 the `PriorityQueue.remove()` method relied on `compareTo()`, but since Java 6 it has relied on\n`equals()`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1694",
        "display_name": "JavaS1694",
        "severity": "info",
        "category": "convention",
        "rule_title": "An abstract class should have both abstract and concrete methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\n\nA class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n`abstract` keyword) with a private constructor.\n\nA class with only abstract methods and no inheritable behavior should be converted to an interface.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3751",
        "display_name": "JavaS3751",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"@RequestMapping\" methods should be \"public\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method with a `@RequestMapping` annotation part of a class annotated with `@Controller` (directly or indirectly through a\nmeta annotation - `@RestController` from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is `private`, because Spring invokes such methods via reflection, without checking visibility. \n\nSo marking a sensitive method `private` may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, `private`,\n`@RequestMapping` method by marking it `@Secured` ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods.\n\nIn addition to `@RequestMapping`, this rule also considers the annotations introduced in Spring Framework 4.3: `@GetMapping`,\n`@PostMapping`, `@PutMapping`, `@DeleteMapping`, `@PatchMapping`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1451",
        "display_name": "JavaS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1450",
        "display_name": "JavaS1450",
        "severity": "info",
        "category": "convention",
        "rule_title": "Private fields only used as local variables in methods should become local variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise any issue on annotated field.\n",
        "disable": false
      },
      {
        "real_name": "java:S2308",
        "display_name": "JavaS2308",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"deleteOnExit\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse of `File.deleteOnExit()` is not recommended for the following reasons:\n\n  -  The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. \n  -  For each file handler, the memory associated with the handler is released only at the end of the process. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3518",
        "display_name": "JavaS3518",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Zero should not be a possible denominator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf the denominator to a division or modulo operation is zero it would result in a fatal error.\n\nWhen working with `double` or `float`, no fatal error will be raised, but it will lead to unusual result and should be\navoided anyway.\n\nThis rule supports primitive `int`, `long`, `double`, `float` as well as `BigDecimal` and\n`BigInteger`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-369](https://cwe.mitre.org/data/definitions/369.html) - Divide by zero \n  <li> [CERT, NUM02-J.](https://wiki.sei.cmu.edu/confluence/x/CTZGBQ) - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n  <li> [CERT, INT33-C.](https://wiki.sei.cmu.edu/confluence/x/ftYxBQ) - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1219",
        "display_name": "JavaS1219",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not contain non-case labels",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2309",
        "display_name": "JavaS2309",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFiles with no lines of code clutter a project and should be removed.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3516",
        "display_name": "JavaS3516",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods returns should not be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.\n\nThis rule raises an issue when a method contains several `return` statements that all return the same value.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4604",
        "display_name": "JavaS4604",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"@EnableAutoConfiguration\" should be fine-tuned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. `@EnableAutoConfiguration` should be configured to exclude all the beans not required by the application. Alternatively, use the\n`@Import` annotation instead of `@EnableAutoConfiguration`, to explicitly import the useful AutoConfiguration classes.\n\nThis rule applies for `@SpringBootApplication` as well.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1217",
        "display_name": "JavaS1217",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"Thread.run()\" should not be called directly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of the `Thread.run()` method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. \n\nTo get the expected behavior, call the `Thread.start()` method instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-572](http://cwe.mitre.org/data/definitions/572.html) - Call to Thread run() instead of start() \n  -  [CERT THI00-J.](https://wiki.sei.cmu.edu/confluence/x/6DdGBQ) - Do not invoke Thread.run() \n",
        "disable": false
      },
      {
        "real_name": "java:S4605",
        "display_name": "JavaS4605",
        "severity": "error",
        "category": "convention",
        "rule_title": "Spring beans should be considered by \"@ComponentScan\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpring beans belonging to packages that are not included in a `@ComponentScan` configuration will not be accessible in the Spring\nApplication Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. \n\n**Note:** the `@ComponentScan` is implicit in the `@SpringBootApplication` annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2789",
        "display_name": "JavaS2789",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"null\" should not be used with \"Optional\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe concept of `Optional` is that it will be used when `null` could cause errors. In a way, it replaces `null`,\nand when `Optional` is in use, there should never be a question of returning or receiving `null` from a call.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1215",
        "display_name": "JavaS1215",
        "severity": "error",
        "category": "convention",
        "rule_title": "Execution of the Garbage Collector should be triggered only by the JVM",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `System.gc()` or `Runtime.getRuntime().gc()` is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\n\n  -  Will the whole application be frozen during the call? \n  -  Is the `-XX:DisableExplicitGC` option activated? \n  -  Will the JVM simply ignore the call? \n  -  ... \n\nLike for `System.gc()`, there is no reason to manually call `runFinalization()` to force the call of finalization methods of\nany objects pending finalization.\n\nAn application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling `finalize()` methods should be left exclusively to the JVM.\n",
        "disable": false
      },
      {
        "real_name": "java:S1699",
        "display_name": "JavaS1699",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constructors should only call non-overridable methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\n\nFor example:\n\n  -  The subclass class constructor starts by contract by calling the parent class constructor. \n  -  The parent class constructor calls the method, which has been overridden in the child class. \n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  `NullPointerException`) can result, because the fields aren't initialized yet. </li>\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, MET05-J.](https://wiki.sei.cmu.edu/confluence/x/8zZGBQ) - Ensure that constructors do not call overridable methods \n  <li> [CERT, OOP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/6ns-BQ) - Do not invoke virtual functions from constructors or destructors\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1104",
        "display_name": "JavaS1104",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class variable fields should not have public accessibility",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPublic class variable fields do not respect the encapsulation principle and has three main disadvantages:\n\n  -  Additional behavior such as validation cannot be added. \n  -  The internal representation is exposed, and cannot be changed afterwards. \n  -  Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. \n\nBy using private attributes and accessor methods (set and get), unauthorized modifications are prevented.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nBecause they are not modifiable, this rule ignores `public final` fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.\n\n## See\n\n  -  [MITRE, CWE-493](http://cwe.mitre.org/data/definitions/493.html) - Critical Public Variable Without Final Modifier \n",
        "disable": false
      },
      {
        "real_name": "java:S3878",
        "display_name": "JavaS3878",
        "severity": "info",
        "category": "convention",
        "rule_title": "Arrays should not be created for varargs parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in creating an array solely for the purpose of passing it as a varargs (`...`) argument; varargs **is** an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where `Object ...`\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2676",
        "display_name": "JavaS2676",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is possible for a call to `hashCode` to return `Integer.MIN_VALUE`. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.\n\nSimilarly, `Integer.MIN_VALUE` could be returned from `Random.nextInt()` or any object's `compareTo` method, and\n`Long.MIN_VALUE` could be returned from `Random.nextLong()`. Calling `Math.abs` on values returned from these methods\nis similarly ill-advised.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2677",
        "display_name": "JavaS2677",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"read\" and \"readLine\" return values should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.\n\nThis rule raises an issue when the return value of any of the following is ignored or merely null-checked: `BufferedReader.readLine()`,\n`Reader.read()`, and these methods in any child classes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4973",
        "display_name": "JavaS4973",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Strings and Boxed types should be compared using \"equals()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt's almost always a mistake to compare two instances of `java.lang.String` or boxed types like `java.lang.Integer` using\nreference equality `==` or `!=`, because it is not comparing actual value but locations in memory.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-595](http://cwe.mitre.org/data/definitions/595.html) - Comparison of Object References Instead of Object Contents \n  -  [MITRE, CWE-597](http://cwe.mitre.org/data/definitions/597.html) - Use of Wrong Operator in String Comparison \n  <li> [CERT, EXP03-J.](https://wiki.sei.cmu.edu/confluence/x/UjdGBQ) - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> [CERT, EXP50-J.](https://wiki.sei.cmu.edu/confluence/x/yDdGBQ) - Do not confuse abstract object equality with reference equality\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1223",
        "display_name": "JavaS1223",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Non-constructor methods should not have the same name as the enclosing class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2674",
        "display_name": "JavaS2674",
        "severity": "info",
        "category": "correctness",
        "rule_title": "The value returned from a stream read should be checked",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nYou cannot assume that any given stream reading call will fill the `byte[]` passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.\n\nSimilarly, you cannot assume that `InputStream.skip` will actually skip the requested number of bytes, but must check the value returned\nfrom the method.\n\nThis rule raises an issue when an `InputStream.read` method that accepts a `byte[]` is called, but the return value is not\nchecked, and when the return value of `InputStream.skip` is not checked. The rule also applies to `InputStream` child\nclasses.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, FIO10-J.](https://wiki.sei.cmu.edu/confluence/x/VzdGBQ) - Ensure the array is filled when using read() to fill an array \n",
        "disable": false
      },
      {
        "real_name": "java:S2675",
        "display_name": "JavaS2675",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"readObject\" should not be \"synchronized\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `readObject` method is written when a `Serializable` object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by `readObject` is only visible to the thread that invoked the method, and the\n`synchronized` keyword is not needed, and using `synchronized` anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3400",
        "display_name": "JavaS3400",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods should not return constants",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. \n\nThis rule raises an issue if on methods that contain only one statement: the `return` of a constant value. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with annotations, such as `@Override` and Spring's `@RequestMapping`, are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S1221",
        "display_name": "JavaS1221",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Methods should not be named \"tostring\", \"hashcode\" or \"equal\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNaming a method `tostring`, `hashcode` or `equal` is either:\n\n  <li> A bug in the form of a typo. Overriding `toString`, `Object.hashCode()` (note the camelCasing) or\n  `Object.equals` (note the 's' on the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n\nIn both cases, the method should be renamed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4970",
        "display_name": "JavaS4970",
        "severity": "error",
        "category": "convention",
        "rule_title": "Derived exceptions should not hide their parents' catch blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `catch` block of a checked exception \"E\" may be hidden because the corresponding `try` block only throws exceptions\nderived from E.\n\nThese derived exceptions are handled in dedicated `catch` blocks prior to the `catch` block of the base exception E. \n\nThe `catch` block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.\n\nIt is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1109",
        "display_name": "JavaS1109",
        "severity": "info",
        "category": "convention",
        "rule_title": "A close curly brace should be located at the beginning of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "java:S1220",
        "display_name": "JavaS1220",
        "severity": "info",
        "category": "convention",
        "rule_title": "The default unnamed package should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java Language Specification:\n\n> \n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n\n\nTo enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2438",
        "display_name": "JavaS2438",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Threads\" should not be used where \"Runnables\" are expected",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to use a `Thread` where a `Runnable` is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.\n\nThe crux of the issue is that `Thread` is a larger concept than `Runnable`. A `Runnable` is an object whose\nrunning should be managed. A `Thread` expects to manage the running of itself or other `Runnables`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1108",
        "display_name": "JavaS1108",
        "severity": "info",
        "category": "convention",
        "rule_title": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to collaborate efficiently.\n\nThis rule makes it mandatory to place a closing curly brace and the next `else`, `catch` or `finally` keyword on\ntwo different lines.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4977",
        "display_name": "JavaS4977",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type parameters should not shadow other type parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.\n\nThis rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1107",
        "display_name": "JavaS1107",
        "severity": "info",
        "category": "convention",
        "rule_title": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to collaborate efficiently.\n\nThis rule makes it mandatory to place closing curly braces on the same line as the next `else`, `catch` or\n`finally` keywords.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1228",
        "display_name": "JavaS1228",
        "severity": "info",
        "category": "convention",
        "rule_title": "Packages should have a javadoc file 'package-info.java'",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach package in a Java project should include a `package-info.java` file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1106",
        "display_name": "JavaS1106",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the beginning of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4738",
        "display_name": "JavaS4738",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Java features should be preferred to Guava",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers don't need to learn how to use two APIs and can stick to the standard one.\n\nJava 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.\n\nThis rule raises an issue when the following Guava APIs are used:\n      | Guava API       | Java 8 API     \n      | com.google.common.io.BaseEncoding#base64()       | java.util.Base64     \n      | com.google.common.io.BaseEncoding#base64Url()       | java.util.Base64     \n      | com.google.common.base.Joiner.on()       | java.lang.String#join() or java.util.stream.Collectors#joining()     \n      | com.google.common.base.Optional#of()       | java.util.Optional#of()     \n      | com.google.common.base.Optional#absent()       | java.util.Optional#empty()     \n      | com.google.common.base.Optional#fromNullable()       | java.util.Optional#ofNullable()     \n      | com.google.common.base.Optional       | java.util.Optional     \n      | com.google.common.base.Predicate       | java.util.function.Predicate     \n      | com.google.common.base.Function       | java.util.function.Function     \n      | com.google.common.base.Supplier       | java.util.function.Supplier     \n      | com.google.common.io.Files.createTempDir       | java.nio.file.Files.createTempDirectory     \n      | Guava API       | Java 9 API     \n      | com.google.common.collect.ImmutableSet#of()       | java.util.Set#of()     \n      | com.google.common.collect.ImmutableList#of()       | java.util.List#of()     \n      | com.google.common.collect.ImmutableMap#of()       | java.util.Map#of() or java.util.Map#ofEntries()    \n",
        "disable": false
      },
      {
        "real_name": "java:S5826",
        "display_name": "JavaS5826",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods setUp() and tearDown() should be correctly annotated starting with JUnit4",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `setUp()` and `tearDown()` methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.\n\nThis rule consequently raise issues on `setUp()` and `tearDown()` methods which are not annotated in test classes.\n\n## Noncompliant Code Example\n\n  -  JUnit4: \n\n  -  JUnit5: \n\n## Compliant Solution\n\n  -  JUnit4: \n\n  -  JUnit5: \n",
        "disable": false
      },
      {
        "real_name": "java:S1226",
        "display_name": "JavaS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as `final`, then at least read\nbefore reassignment.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S2437",
        "display_name": "JavaS2437",
        "severity": "error",
        "category": "convention",
        "rule_title": "Silly bit operations should not be performed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCertain bit operations are just silly and should not be performed because their results are predictable.\n\nSpecifically, using `&amp; -1` with any value will always result in the original value, as will `anyValue ^ 0` and\n`anyValue | 0`.\n",
        "disable": false
      },
      {
        "real_name": "java:S1105",
        "display_name": "JavaS1105",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the end of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen blocks are inlined (left and right curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "java:S2885",
        "display_name": "JavaS2885",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-thread-safe fields should not be static",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNot all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.\n\nThis rule raises an issue when an instance of `Calendar`, `DateFormat`, `javax.xml.xpath.XPath`, or\n`javax.xml.validation.SchemaFactory` is marked `static`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1313",
        "display_name": "JavaS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "java:S2886",
        "display_name": "JavaS2886",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Getters and setters should be synchronized in pairs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen one part of a getter/setter pair is `synchronized` the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.\n\nThis rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, VNA01-J.](https://wiki.sei.cmu.edu/confluence/x/4jdGBQ) - Ensure visibility of shared references to immutable objects \n",
        "disable": false
      },
      {
        "real_name": "java:S1312",
        "display_name": "JavaS1312",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loggers should be \"private static final\" and should share a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRegardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:\n\n  <li> `private`: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> `static`: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  -  `final`: be created once and only once per class. \n\n## Noncompliant Code Example\n\nWith a default regular expression of `LOG(?:GER)?`:\n\n## Compliant Solution\n\n## Exceptions\n\nVariables of type `org.apache.maven.plugin.logging.Log` are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S3972",
        "display_name": "JavaS3972",
        "severity": "error",
        "category": "convention",
        "rule_title": "Conditionals should start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an `if` and its\nresulting **then** statement. However, when an `if` is placed on the same line as the closing `}` from a preceding\n**then**, **else** or **else if** part, it is either an error - `else` is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n",
        "disable": false
      },
      {
        "real_name": "java:S1310",
        "display_name": "JavaS1310",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"NOPMD\" suppression comments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows you to track the use of the PMD suppression comment mechanism. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3973",
        "display_name": "JavaS3973",
        "severity": "error",
        "category": "convention",
        "rule_title": "A conditionally executed single line should be denoted by indentation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2761",
        "display_name": "JavaS2761",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Unary prefix operators should not be repeated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe needless repetition of an operator is usually a typo. There is no reason to write `!!!i` when `!i` will do.\n\nOn the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and\nshould be simplified.\n\nThis rule raises an issue for sequences of: `!`, `~`, `-`, and `+`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nOverflow handling for GWT compilation using `~~` is ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S1319",
        "display_name": "JavaS1319",
        "severity": "info",
        "category": "convention",
        "rule_title": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.\n\nImplementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.\n\nThis rule raises an issue when an implementation class:\n\n  -  is returned from a `public` method. \n  -  is accepted as an argument to a `public` method. \n  -  is exposed as a `public` member. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5917",
        "display_name": "JavaS5917",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "DateTimeFormatters should not use mismatched year and week numbers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen creating a `DateTimeFormatter` using the `WeekFields.weekBasedYear()` temporal field, the resulting year number may be\noff by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years). \n\nUsing this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the\nprevious year.\n\nInstead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field\n`WeekFields.weekOfWeekBasedYear()`.\n\nAlternatively the temporal field `ChronoField.ALIGNED_WEEK_OF_YEAR` can be used together with a regular year (but not the week based\nyear).\n\n## Noncompliant Code Example\n\nHere the first two formatters would wrongly format the 1st of January 2016 as \"2016-53\" while the last one would format it as \"2015-01\"\n\n## Compliant Solution\n\nHere the first formatter would format the 1st of January 2016 as \"2015-53\" while the last two would produce \"2016-01\", both of which are correct\ndepending on how you count the weeks.\n\n## Exceptions\n\nNo issue is raised when week-based year is not used in combination with a week temporal field.\n\nSimilarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.\n",
        "disable": false
      },
      {
        "real_name": "java:S1317",
        "display_name": "JavaS1317",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInstantiating a `StringBuilder` or a `StringBuffer` with a character is misleading because most Java developers would expect\nthe character to be the initial value of the `StringBuffer`. \n\nWhat actually happens is that the int representation of the character is used to determine the initial size of the `StringBuffer`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2647",
        "display_name": "JavaS2647",
        "severity": "error",
        "category": "security",
        "rule_title": "Basic authentication should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBasic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. \n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  -  [MITRE, CWE-522](https://cwe.mitre.org/data/definitions/522) - Insufficiently Protected Credentials \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S1315",
        "display_name": "JavaS1315",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"CHECKSTYLE:OFF\" suppression comments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows you to track the use of the Checkstyle suppression comment mechanism. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1314",
        "display_name": "JavaS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "java:S3985",
        "display_name": "JavaS3985",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" classes should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3864",
        "display_name": "JavaS3864",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Stream.peek\" should be used with caution",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to its JavaDocs, the intermediate Stream operation `java.util.Stream.peek()` “exists mainly to support debugging”\npurposes.\n\nA key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to `peek()` for\noptimization purpose. This can lead to `peek()` being unexpectedly called only for some or none of the elements in the Stream.\n\nAs a consequence, relying on `peek()` without careful consideration can lead to error-prone code.\n\nThis rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Java 8 API Documentation](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-)\n  </li>\n  -  4comprehension: [Idiomatic Peeking with Java Stream API](https://4comprehension.com/idiomatic-peeking/) \n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1444",
        "display_name": "JavaS1444",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"public static\" fields should be constant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n`null`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-500](http://cwe.mitre.org/data/definitions/500.html) - Public Static Field Not Marked Final \n  -  [CERT OBJ10-J.](https://wiki.sei.cmu.edu/confluence/x/WjdGBQ) - Do not use public static nonfinal fields \n",
        "disable": false
      },
      {
        "real_name": "java:S4830",
        "display_name": "JavaS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nThis rule raises an issue when an implementation of X509TrustManager is not controlling the validity of the certificate (ie: no exception is\nraised). Empty implementations of the `X509TrustManager` interface are often created to disable certificate validation. The correct\nsolution is to provide an appropriate trust store.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n  -  [CERT, MSC61-J.](https://wiki.sei.cmu.edu/confluence/x/hDdGBQ) - Do not use insecure or weak cryptographic algorithms \n",
        "disable": false
      },
      {
        "real_name": "java:S3986",
        "display_name": "JavaS3986",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Week Year (\"YYYY\") should not be used for date formatting",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFew developers are aware of the difference between `Y` for \"Week year\" and `y` for Year when formatting and parsing a date\nwith `SimpleDateFormat` or `DateTimeFormatter`. That's likely because for most dates, Week year and Year are the same, so\ntesting at any time other than the first or last week of the year will yield the same value for both `y` and `Y`. But in the\nlast week of December and the first week of January, you may get unexpected results.\n\nAccording to the [Javadoc](http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year):\n\n> \n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n",
        "disable": false
      },
      {
        "real_name": "java:S1201",
        "display_name": "JavaS1201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"equals\" method overrides should accept \"Object\" parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n\"equals\" as a method name should be used exclusively to override `Object.equals(Object)` to prevent any confusion.\n\nIt is tempting to overload the method to take a specific class instead of `Object` as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3984",
        "display_name": "JavaS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Exceptions should not be created without being thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Throwable` without actually throwing it is useless and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1200",
        "display_name": "JavaS1200",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\n\n> \n  If a class has more than one responsibility, then the responsibilities become coupled.\n  Changes to one responsibility may impair or inhibit the class' ability to meet the others.\n  This kind of coupling leads to fragile designs that break in unexpected ways when changed.\n\n\nClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\n\nNested classes dependencies are not counted as dependencies of the outer class.\n\n## Noncompliant Code Example\n\nWith a threshold of 5:\n",
        "disable": false
      },
      {
        "real_name": "java:S3981",
        "display_name": "JavaS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection sizes and array length comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always `true`. Similarly testing that it is less than zero will always return\n`false`. Perhaps the intent was to check the non-emptiness of the collection or array instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3740",
        "display_name": "JavaS3740",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Raw types should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGeneric types shouldn't be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4838",
        "display_name": "JavaS4838",
        "severity": "info",
        "category": "convention",
        "rule_title": "An iteration on a Collection should be performed on the type handled by the Collection",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an iteration over the items of a `Collection` is performed on a super-type of the type handled by the\n`Collection`.\n\nRelying on `Object` or any classes between `Object` and the real class handled by the `Collection` is not\nrecommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n`Collection` to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3749",
        "display_name": "JavaS3749",
        "severity": "error",
        "category": "security",
        "rule_title": "Members of Spring components should be injected",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpring `@Component`, `@Controller`, `@Service`, and `@Repository` classes are singletons by default,\nmeaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few `static` members,\nsuch as a logger, but all non-`static` members should be managed by Spring. That is, they should have one of these annotations:\n`@Resource`, `@Inject`, `@Autowired` or `@Value`.\n\nHaving non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. \n\nThis rule raises an issue when a singleton `@Component`, `@Controller`, `@Service`, or `@Repository`,\nnot annotated with `@ConfigurationProperties`, has non-`static` members that are not annotated with one of:\n\n  -  `org.springframework.beans.factory.annotation.Autowired` \n  -  `org.springframework.beans.factory.annotation.Value` \n  -  `javax.annotation.Inject` \n  -  `javax.annotation.Resource` \n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4719",
        "display_name": "JavaS4719",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"StandardCharsets\" constants should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJDK7 introduced the class `java.nio.charset.StandardCharsets`. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.\n\n  -  ISO_8859_1 \n  -  US_ASCII \n  -  UTF_16 \n  -  UTF_16BE \n  -  UTF_16LE \n  -  UTF_8 \n\nThese constants should be preferred to:\n\n  <li> the use of a String such as \"UTF-8\" which has the drawback of requiring the `catch`/`throw` of an\n  `UnsupportedEncodingException` that will never actually happen </li>\n  -  the use of Guava’s `Charsets` class, which has been obsolete since JDK7 \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5803",
        "display_name": "JavaS5803",
        "severity": "error",
        "category": "convention",
        "rule_title": "Class members annotated with \"@VisibleForTesting\" should not be accessed from production code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.\n\nAccess to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.\n\nSupported framework:\n\n  -  Guava: `com.google.common.annotations.VisibleForTesting` \n  -  AssertJ: `org.assertj.core.util.VisibleForTesting` \n  -  Android: `androidx.annotation.VisibleForTesting` \n  -  Apache Flink: `org.apache.flink.annotation.VisibleForTesting` \n\nor any other annotation named `VisibleForTesting`\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5808",
        "display_name": "JavaS5808",
        "severity": "warning",
        "category": "security",
        "rule_title": "Authorizations should be based on strong decisions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAuthorizations granted or not to users to access resources of an application should be based on strong decisions. For instance, checking whether\nthe user is authenticated or not, has the right roles/privileges. It may also depend on the user's location, or the date, time when the user requests\naccess.\n\n## Noncompliant Code Example\n\nIn a Spring-security web application:\n\n  <li> the `vote` method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type is not compliant when it returns only an affirmative decision (`ACCESS_GRANTED`) or abstains to make a decision (`ACCESS_ABSTAIN`): </li>\n\n  <li> the `hasPermission` method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type is not compliant when it doesn't return `false`: </li>\n\n## Compliant Solution\n\nIn a Spring-security web application:\n\n  <li> the `vote` method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type should return a negative decision (`ACCESS_DENIED`): </li>\n\n  <li> the `hasPermission` method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type should return `false`: </li>\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Boken Access Control \n  -  [MITRE, CWE-285](https://cwe.mitre.org/data/definitions/285.html) - Improper Authorization \n",
        "disable": false
      },
      {
        "real_name": "java:S1449",
        "display_name": "JavaS1449",
        "severity": "info",
        "category": "convention",
        "rule_title": "String operations should not rely on the default system locale",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFailure to specify a locale when calling the methods `toLowerCase()`, `toUpperCase()` or `format()` on\n`String` objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.\n\nCase conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but `Locale.ROOT` can be used for case-insensitive ones.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, STR02-J.](https://wiki.sei.cmu.edu/confluence/x/4zdGBQ) - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3626",
        "display_name": "JavaS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements such as `return` and `continue` let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2658",
        "display_name": "JavaS2658",
        "severity": "error",
        "category": "security",
        "rule_title": "Classes should not be loaded dynamically",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.\n\nThis rule raises an issue for each use of dynamic class loading.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-470](https://cwe.mitre.org/data/definitions/470.html) - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1206",
        "display_name": "JavaS1206",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java Language Specification, there is a contract between `equals(Object)` and `hashCode()`:\n\n> \n  <p>If two objects are equal according to the `equals(Object)` method, then calling the `hashCode` method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the `equals(java.lang.Object)` method, then calling the\n  `hashCode` method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n\n\nIn order to comply with this contract, those methods should be either both inherited, or both overridden.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [MITRE, CWE-581](http://cwe.mitre.org/data/definitions/581.html) - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> [CERT, MET09-J.](https://wiki.sei.cmu.edu/confluence/x/7DVGBQ) - Classes that define an equals() method must also define a\n  hashCode() method </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1448",
        "display_name": "JavaS1448",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "java:S5804",
        "display_name": "JavaS5804",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing user enumeration is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUser enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.\n\nWhen an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesn't\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way it's not\npossible to guess whether the username or password was incorrect during the authentication.\n\nIf a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc ...).\n\n## Ask Yourself Whether\n\n  <li> The application discloses that a username exists in its database: most of the time it's possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  -  There is no rate limiting and CAPTCHA protection in place for requests involving a username. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nWhen a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:\n\n  -  Error messages should be generic and not disclose if the username is valid or not. \n  -  The response time must be similar for a valid username or not. \n  -  CAPTCHA and other rate limiting solutions should be implemented. \n\n## Sensitive Code Example\n\nIn a Spring-security web application the username leaks when:\n\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n\n## Compliant Solution\n\nIn a Spring-security web application:\n\n  -  the same message should be used regardless of whether it is the wrong user or password: \n\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication) -\n  Broken Authentication </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n",
        "disable": false
      },
      {
        "real_name": "java:S4087",
        "display_name": "JavaS4087",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"close()\" calls should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava 7's try-with-resources structure automatically handles closing the resources that the `try` itself opens. Thus, adding an explicit\n`close()` call is redundant and potentially confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1940",
        "display_name": "JavaS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1948",
        "display_name": "JavaS1948",
        "severity": "error",
        "category": "convention",
        "rule_title": "Fields in a \"Serializable\" class should either be transient or serializable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields in a `Serializable` class must themselves be either `Serializable` or `transient` even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n`Serializable` object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a `Serializable` class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. \n\nThis rule raises an issue on non-`Serializable` fields, and on collection fields when they are not `private` (because they\ncould be assigned non-`Serializable` values externally), and when they are assigned non-`Serializable` types within the\nclass.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe alternative to making all members `serializable` or `transient` is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:\n\n## See\n\n  -  [MITRE, CWE-594](http://cwe.mitre.org/data/definitions/594.html) - Saving Unserializable Objects to Disk \n  -  [Oracle Java 6, Serializable](https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html) \n  -  [Oracle Java 7, Serializable](https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S2912",
        "display_name": "JavaS2912",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"indexOf\" checks should use a start position",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOne thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of `indexOf` methods can help move code from confusing to clear.\n\nIf you need to see whether a substring is located beyond a certain point in a string, you can test the `indexOf` the substring versus\nthe target point, or you can use the version of `indexOf` which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1942",
        "display_name": "JavaS1942",
        "severity": "info",
        "category": "convention",
        "rule_title": "Simple class names should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava's `import` mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n`import`s the class is redundant and confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1943",
        "display_name": "JavaS1943",
        "severity": "info",
        "category": "convention",
        "rule_title": "Classes and methods that rely on the default system encoding should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.\n\nThis rule detects uses of the following classes and methods:\n\n  -  `FileReader` \n  -  `FileWriter` \n  <li> String constructors with a `byte[]` argument but no `Charset` argument\n    <ul>\n      -  `String(byte[] bytes)` \n      -  `String(byte[] bytes, int offset, int length)` \n    \n      -  `Formatter(String fileName)` \n      -  `Formatter(File file)` \n      -  `Formatter(OutputStream os)` \n    \n      -  `Scanner(File source)` \n      -  `Scanner(Path source)` \n      -  `Scanner(InputStream source)` \n    \n      -  `PrintStream(File file)` \n      -  `PrintStream(OutputStream out)` \n      -  `PrintStream(OutputStream out, boolean autoFlush)` \n      -  `PrintStream(String fileName)` \n    \n      -  `PrintWriter(File file)` \n      -  `PrintWriter(OutputStream out)` \n      -  `PrintWriter(OutputStream out, boolean autoFlush)` \n      -  `PrintWriter(String fileName)` \n    \n      -  `IOUtils.copy(InputStream, Writer)` \n      -  `IOUtils.copy(Reader, OutputStream)` \n      -  `IOUtils.readLines(InputStream)` \n      -  `IOUtils.toByteArray(Reader)` \n      -  `IOUtils.toByteArray(String)` \n      -  `IOUtils.toCharArray(InputStream)` \n      -  `IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))` \n      -  `IOUtils.toString(byte[])` \n      -  `IOUtils.toString(URI)` \n      -  `IOUtils.toString(URL)` \n      -  `IOUtils.write(char[], OutputStream)` \n      -  `IOUtils.write(CharSequence, OutputStream)` \n      -  `IOUtils.writeLines(Collection, String, OutputStream)` \n      -  `FileUtils.readFileToString(File)` \n      -  `FileUtils.readLines(File)` \n      -  `FileUtils.write(File, CharSequence)` \n      -  `FileUtils.write(File, CharSequence, boolean)` \n      -  `FileUtils.writeStringToFile(File, String)` \n    \n## See\n\n  <li> [CERT, STR04-J.](https://wiki.sei.cmu.edu/confluence/x/pzdGBQ) - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> [CERT, STR50-J.](https://wiki.sei.cmu.edu/confluence/x/ujZGBQ) - Use the appropriate method for counting characters in a string\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1700",
        "display_name": "JavaS1700",
        "severity": "warning",
        "category": "convention",
        "rule_title": "A field should not duplicate the name of its containing class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.\n\nBest practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. \n",
        "disable": false
      },
      {
        "real_name": "java:S1821",
        "display_name": "JavaS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements and expressions should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement or expression. Therefore nested `switch` statements and expressions should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements or expressions, but if you cannot, then\nconsider moving the inner `switch` to another method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1941",
        "display_name": "JavaS1941",
        "severity": "info",
        "category": "convention",
        "rule_title": "Variables should not be declared before they are relevant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1820",
        "display_name": "JavaS1820",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.\n\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "java:S1939",
        "display_name": "JavaS1939",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extensions and implementations should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAll classes extend `Object` implicitly. Doing so explicitly is redundant.\n\nFurther, declaring the implementation of an interface **and** one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6035",
        "display_name": "JavaS6035",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Single-character alternations in regular expressions should be replaced with character classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:java:S5998} ).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6126",
        "display_name": "JavaS6126",
        "severity": "warning",
        "category": "convention",
        "rule_title": "String multiline concatenation should be replaced with Text Blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now it's possible to do it in a more natural way using Text Blocks.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 378: Text Blocks](https://openjdk.java.net/jeps/378) \n  <li> [Programmer's Guide To Text Blocks](https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html), by Jim Laskey and Stuart\n  Marks </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1905",
        "display_name": "JavaS1905",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant casts should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnnecessary casting expressions make the code harder to read and understand.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nCasting may be required to distinguish the method to call in the case of overloading:\n",
        "disable": false
      },
      {
        "real_name": "java:S4065",
        "display_name": "JavaS4065",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"ThreadLocal.withInitial\" should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava 8 introduced `ThreadLocal.withInitial` which is a simpler alternative to creating an anonymous inner class to initialise a\n`ThreadLocal` instance.\n\nThis rule raises an issue when a `ThreadLocal` anonymous inner class can be replaced by a call to\n`ThreadLocal.withInitial`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6001",
        "display_name": "JavaS6001",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Back references in regular expressions should only refer to capturing groups that are matched before the reference",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a back reference in a regex refers to a capturing group that hasn't been defined yet (or at all), it can never be matched. Named back\nreferences throw a `PatternSyntaxException` in that case; numeric back references fail silently when they can't match, simply making the\nmatch fail.\n\nWhen the group is defined before the back reference but on a different control path (like in `(.)|\\1` for example), this also leads to a\nsituation where the back reference can never match.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6002",
        "display_name": "JavaS6002",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Regex lookahead assertions should not be contradictory",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.\n\nHowever, they can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after the\nlookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and is a sign that there's a mistake in the\nregular expression that should be fixed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6019",
        "display_name": "JavaS6019",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a reluctant quantifier (such as `*?` or `+?`) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as `find`,\n`replaceAll`, `split` etc.).\n\nSimilarly, when used with methods that find full matches, a reluctant quantifier that's followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as `()`) behaves indistinguishably from a greedy quantifier while being less efficient.\n\nThis is likely a sign that the regex does not work as intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5164",
        "display_name": "JavaS5164",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ThreadLocal\" variables should be cleaned up when no longer used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`ThreadLocal` variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when\nholding threads are re-used which is the case on application servers using pool of threads.\n\nTo avoid such problems, it is recommended to always clean up `ThreadLocal` variables using the `remove()` method to remove\nthe current thread’s value for the `ThreadLocal` variable.\n\nIn addition, calling `set(null)` to remove the value might keep the reference to `this` pointer in the map, which can cause\nmemory leak in some scenarios. Using `remove` is safer to avoid this issue.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nRule will not detect non-private `ThreadLocal` variables, because `remove()` can be called from another class.\n\n## See\n\n  -  [Understanding Memory Leaks in Java](https://www.baeldung.com/java-memory-leaks) \n",
        "disable": false
      },
      {
        "real_name": "java:S1610",
        "display_name": "JavaS1610",
        "severity": "info",
        "category": "convention",
        "rule_title": "Abstract classes without fields should be converted to interfaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWith Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5042",
        "display_name": "JavaS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\n## Compliant Solution\n\nDo not rely on [getsize](https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()) to retrieve the size of an\nuncompressed entry because this method returns what is defined in the archive headers which can be forged by attackers, instead calculate the actual\nentry size when unzipping it:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](https://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> [CERT, IDS04-J.](https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream) - Safely\n  extract files from ZipInputStream </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "java:S1858",
        "display_name": "JavaS1858",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"toString()\" should never be called on a String object",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1612",
        "display_name": "JavaS1612",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lambdas should be replaced with method references",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMethod/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore\npreferred. \n\nIn some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it\nmight be fine to keep the lambda. \n\nSimilarly, `null` checks can be replaced with references to the `Objects::isNull` and `Objects::nonNull` methods,\n`casts` can be replaced with `SomeClass.class::cast` and `instanceof` can be replaced with\n`SomeClass.class::isInstance`.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1854",
        "display_name": "JavaS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores initializations to -1, 0, 1, `null`, `true`, `false` and `\"\"`.\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "java:S2701",
        "display_name": "JavaS2701",
        "severity": "info",
        "category": "convention",
        "rule_title": "Literal boolean values and nulls should not be used in assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason to use literal boolean values or nulls in assertions. Instead of using them with **assertEquals**, **assertNotEquals**\nand similar methods, you should be using **assertTrue**, **assertFalse**, **assertNull** or **assertNotNull** instead (or\n**isNull** etc. when using Fest). Using them with assertions unrelated to equality (such as **assertNull**) is most likely a bug.\n\nSupported frameworks:\n\n  -  JUnit3 \n  -  JUnit4 \n  -  JUnit5 \n  -  Fest assert \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1611",
        "display_name": "JavaS1611",
        "severity": "info",
        "category": "convention",
        "rule_title": "Parentheses should be removed from a single lambda input parameter when its type is inferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6068",
        "display_name": "JavaS6068",
        "severity": "info",
        "category": "convention",
        "rule_title": "Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMockito provides **argument matchers** for flexibly stubbing or verifying method calls.\n\n`Mockito.verify()`, `Mockito.when()`, `Stubber.when()` and `BDDMockito.given()` each have overloads\nwith and without argument matchers.\n\nHowever, the default matching behavior (i.e. without argument matchers) uses `equals()`. If only the matcher\n`org.mockito.ArgumentMatchers.eq()` is used, the call is equivalent to the call without matchers, i.e. the `eq()` is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Mockito documentation](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers) -\n  argument matchers </li>\n  -  {rule:java:S6073} - Mockito argument matchers should be used on all parameters \n",
        "disable": false
      },
      {
        "real_name": "java:S1860",
        "display_name": "JavaS1860",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Synchronization should not be done on instances of value-based classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nObjects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, `String` literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for `Boolean` objects, because there could possibly be only two instances of\n`Boolean`, `Boolean.TRUE` and `Boolean.FALSE` and every class that uses a Boolean will be referring to one of the\ntwo.\n\nHere is the list of types which shouldn't be used for synchronization:\n\n  -  The primitive wrapper classes in java.lang; \n  -  The class java.lang.Runtime.Version; \n  -  The \"optional\" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; \n  <li> Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,\n  Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; </li>\n  -  The interface java.lang.ProcessHandle and its implementation classes; \n  <li> The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf,\n  Map.ofEntries, and Map.entry. </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, LCK01-J.](https://wiki.sei.cmu.edu/confluence/x/1zdGBQ) - Do not synchronize on objects that may be reused \n  -  [JEP-390.](https://openjdk.java.net/jeps/390) - JEP 390: Warnings for Value-Based Classes \n",
        "disable": false
      },
      {
        "real_name": "java:S1862",
        "display_name": "JavaS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`. \n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2718",
        "display_name": "JavaS2718",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of the `ZonedDateTime` class introduced in Java 8 to truncate a date can be significantly faster than the `DateUtils`\nclass from Commons Lang.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2959",
        "display_name": "JavaS2959",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unnecessary semicolons should be omitted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnder the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1989",
        "display_name": "JavaS1989",
        "severity": "info",
        "category": "security",
        "rule_title": "Exceptions should not be thrown from servlet methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven though the signatures for methods in a servlet include `throws IOException, ServletException`, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. \n\nThis rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-600](http://cwe.mitre.org/data/definitions/600.html) - Uncaught Exception in Servlet \n  -  [CERT, ERR01-J.](https://wiki.sei.cmu.edu/confluence/x/-zZGBQ) - Do not allow exceptions to expose sensitive information \n",
        "disable": false
      },
      {
        "real_name": "java:S3923",
        "display_name": "JavaS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "java:S6070",
        "display_name": "JavaS6070",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The regex escape sequence \\cX should only be used with characters in the @-_ range",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn regular expressions the escape sequence `\\cX`, where the X stands for any character that's either `@`, any capital ASCII\nletter, `[`, `\\`, `]`, `^` or `_`, represents the control character that \"corresponds\" to the\ncharacter following `\\c`, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.\n\nIn some other regex engines (for example in that of Perl) this escape sequence is case insensitive and `\\cd` produces the same control\ncharacter as `\\cD`. Further using `\\c` with a character that's neither `@`, any ASCII letter, `[`,\n`\\`, `]`, `^` nor `_`, will produce a warning or error in those engines. Neither of these things is true\nin Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this won't lead to a\nsensible result for characters that are outside of the `@` to `_` range, using `\\c` with such characters is almost\ncertainly a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6073",
        "display_name": "JavaS6073",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Mockito argument matchers should be used on all parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMockito provides **argument matchers** and **argument captors** for flexibly stubbing or verifying method calls.\n\n`Mockito.verify()`, `Mockito.when()`, `Stubber.when()` and `BDDMockito.given()` each have overloads\nwith and without argument matchers.\n\nHowever, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an\n`InvalidUseOfMatchersException` will be thrown. \n\nThis rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Mockito documentation](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers) -\n  argument matchers </li>\n  -  {rule:java:S6068} - Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified \n",
        "disable": false
      },
      {
        "real_name": "java:S131",
        "display_name": "JavaS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIf the `switch` parameter is an `Enum` and if all the constants of this enum are used in the `case` statements,\nthen no `default` clause is expected.\n\nExample:\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "java:S134",
        "display_name": "JavaS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `switch`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "java:S2924",
        "display_name": "JavaS2924",
        "severity": "info",
        "category": "convention",
        "rule_title": "JUnit rules should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile some `TestRule` classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.\n\nThis rule raises an issue when `Test` class fields of the following types aren't used by any of the test methods:\n`TemporaryFolder`, and `TestName`.\n\nThis rule also applies to the JUnit 5 equivalent classes: `TempDir`, and `TestInfo`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1711",
        "display_name": "JavaS1711",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Standard functional interfaces should not be redefined",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.\n\nDoing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2925",
        "display_name": "JavaS2925",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Thread.sleep\" should not be used in tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `Thread.sleep` in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as `Awaitility` for asynchroneous\ntesting. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S125",
        "display_name": "JavaS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "java:S1710",
        "display_name": "JavaS1710",
        "severity": "info",
        "category": "convention",
        "rule_title": "Annotation repetitions should not be wrapped",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBefore Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S126",
        "display_name": "JavaS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "java:S127",
        "display_name": "JavaS127",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for\" loop stop conditions should be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. \n\nStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\n\nThis rule tracks three types of non-invariant stop conditions:\n\n  -  When the loop counters are updated in the body of the `for` loop \n  -  When the stop condition depend upon a method call \n  -  When the stop condition depends on an object property, since such properties could change during the execution of the loop. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S128",
        "display_name": "JavaS128",
        "severity": "error",
        "category": "convention",
        "rule_title": "Switch cases should end with an unconditional \"break\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in the following cases:\n\n## See\n\n  -  [MITRE, CWE-484](http://cwe.mitre.org/data/definitions/484.html) - Omitted Break Statement in Switch \n  <li> [CERT, MSC17-C.](https://wiki.sei.cmu.edu/confluence/x/ldYxBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> [CERT, MSC52-J.](https://wiki.sei.cmu.edu/confluence/x/1DdGBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1607",
        "display_name": "JavaS1607",
        "severity": "warning",
        "category": "convention",
        "rule_title": "JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\n\nThis rule raises an issue for each ignored test that does not have any comment about why it is being skipped.\n\n  -  For Junit4, this rule targets the @Ignore annotation. \n  -  For Junit5, this rule targets the @Disabled annotation. \n  -  Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. \n\n## Noncompliant Code Example\n\nor\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5194",
        "display_name": "JavaS5194",
        "severity": "info",
        "category": "convention",
        "rule_title": "Use Java 12 \"switch\" expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMany existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.\n\nJava 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1604",
        "display_name": "JavaS1604",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Anonymous inner classes containing only one method should become lambdas",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBefore Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.\n\nWith Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1849",
        "display_name": "JavaS1849",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `Iterator.hasNext()` is not supposed to have any side effects, and therefore should not change the state of the iterator.\n`Iterator.next()` advances the iterator by one item. So calling it inside `Iterator.hasNext()`, breaks the\n`hasNext()` contract, and will lead to unexpected behavior in production.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1845",
        "display_name": "JavaS1845",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods and field names should not be the same or differ only by capitalization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLooking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.\n\nIn the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.\n\nOtherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1602",
        "display_name": "JavaS1602",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lambdas containing only one statement should not nest this statement in a block",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `8`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1844",
        "display_name": "JavaS1844",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFrom the Java API documentation:\n\n> \n  <p>`Condition` factors out the `Object` monitor methods (`wait`, `notify` and `notifyAll`)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a `Lock` replaces the use of `synchronized` methods and statements, a `Condition` replaces the use of the\n  `Object` monitor methods.</p>\n\n\nThe purpose of implementing the `Condition` interface is to gain access to its more nuanced `await` methods. Therefore,\ncalling the method `Object.wait(...)` on a class implementing the `Condition` interface is silly and confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S135",
        "display_name": "JavaS135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loops should not contain more than a single \"break\" or \"continue\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRestricting the number of `break` and `continue` statements in a loop is done in the interest of good structured programming.\n\n\nOnly one `break` or one `continue` statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S138",
        "display_name": "JavaS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.\n\nAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "java:S139",
        "display_name": "JavaS139",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comments should not be located at the end of lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3039",
        "display_name": "JavaS3039",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"String\" calls should not go beyond their bounds",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust as you can't cut something into three halves, you can't grab a `substring` that starts or ends outside the original\n`String`'s bounds, you can't use `substring` to get a reversed portion of a `String`, and you can't get the\n`charAt` a value that's before the `String` starts or after it ends.\n\nThis rule detects when negative literal or `String::length` is passed as an argument to the `String::substring`,\n`String::charAt` and related methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3038",
        "display_name": "JavaS3038",
        "severity": "info",
        "category": "convention",
        "rule_title": "Abstract methods should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in redundantly defining an `abstract` method with the same signature as a method in an `interface` that the\nclass `implements`. Any concrete child classes will have to implement the method either way.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S4248",
        "display_name": "JavaS4248",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Regex patterns should not be created needlessly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `java.util.regex.Pattern.compile()` methods have a significant performance cost, and therefore should be used sensibly.\n\nMoreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like `String.matches()` or\n`String.split()`.\n\nIt is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.\n\nThis rule raises an issue when:\n\n  -  A `Pattern` is compiled from a `String` literal or constant and is not stored in a static final reference. \n  <li> `String.matches`, `String.split`, `String.replaceAll` or `String.replaceFirst` are invoked with a\n  `String` literal or constant. In which case the code should be refactored to use a `java.util.regex.Pattern` while respecting\n  the previous rule. </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`String.split` doesn't create a regex when the string passed as argument meets either of these 2 conditions:\n\n  -  It is a one-char String and this character is not one of the RegEx's meta characters \".$|()[{^?*+\\\" \n  -  It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. \n\nIn which case no issue will be raised.\n",
        "disable": false
      },
      {
        "real_name": "java:S2188",
        "display_name": "JavaS2188",
        "severity": "error",
        "category": "convention",
        "rule_title": "JUnit test cases should call super methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding a parent class method prevents that method from being called unless an explicit `super` call is made in the overriding\nmethod. In some cases not calling the `super` method is acceptable, but not with `setUp` and `tearDown` in a JUnit 3\n`TestCase`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S110",
        "display_name": "JavaS110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inheritance tree of classes should not be too deep",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object\noriented design which leads to a systematic use of 'inheritance' when 'composition' would be better suited.\n\nThis rule raises an issue when the inheritance tree, starting from `Object` has a greater depth than is allowed. \n\nFor the parameter of the rule, the following rules are applied:\n\n  -  `?` matches a single character \n  -  `*` matches zero or more characters \n  -  `**` matches zero or more packages \n\nExamples:\n\n  -  `java.fwk.AbstractFwkClass` will stop count when AbstractFwkClassclass is reached. \n  -  `java.fwk.*` will stop count when any member of java.fwkPackage package is reached. \n  -  `java.fwk.**` same as above, but including sub-packages. \n\nExceptions:\n\nThe rule stops counting when it encounters a class from one of the following packages (or sub-packages):\n\n  -  `android.**` \n  -  `com.intellij.**` \n  -  `com.persistit.**` \n  -  `javax.swing.**` \n  -  `org.eclipse.**` \n  -  `org.springframework.**` \n",
        "disable": false
      },
      {
        "real_name": "java:S3398",
        "display_name": "JavaS3398",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"private\" methods called only by inner classes should be moved to those classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `private` method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2189",
        "display_name": "JavaS2189",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Loops should not be infinite",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a `break`, every loop should have an end condition.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC01-J.](https://wiki.sei.cmu.edu/confluence/x/lzZGBQ) - Do not use an empty infinite loop \n",
        "disable": false
      },
      {
        "real_name": "java:S2068",
        "display_name": "JavaS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "java:S5332",
        "display_name": "JavaS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\nThese clients from [Apache commons net](https://commons.apache.org/proper/commons-net/) libraries are based on unencrypted protocols and\nare not recommended:\n\nUnencrypted HTTP connections, when using [okhttp](https://square.github.io/okhttp/https/) library for instance, should be avoided:\n\n \n\n## Compliant Solution\n\nUse instead these clients from [Apache commons net](https://commons.apache.org/proper/commons-net/) and <a\nhref=\"http://www.jcraft.com/jsch/\">JSch/ssh</a> library:\n\nPerform HTTP encrypted connections, with [okhttp](https://square.github.io/okhttp/https/) library for instance:\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "java:S2065",
        "display_name": "JavaS2065",
        "severity": "info",
        "category": "convention",
        "rule_title": "Fields in non-serializable classes should not be \"transient\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`transient` is used to mark fields in a `Serializable` class which will not be written out to file (or stream). In a class\nthat does not implement `Serializable`, this modifier is simply wasted keystrokes, and should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2186",
        "display_name": "JavaS2186",
        "severity": "error",
        "category": "convention",
        "rule_title": "JUnit assertions should not be used in \"run\" methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJUnit assertions should not be made from the `run` method of a `Runnable`, because failed assertions result in\n`AssertionError`s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S112",
        "display_name": "JavaS112",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Generic exceptions should never be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing such generic exceptions as `Error`, `RuntimeException`, `Throwable`, and `Exception` prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nGeneric exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).\n\nGeneric exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.\n\n## See\n\n  -  [MITRE, CWE-397](http://cwe.mitre.org/data/definitions/397.html) - Declaration of Throws for Generic Exception \n  -  [CERT, ERR07-J.](https://wiki.sei.cmu.edu/confluence/x/_DdGBQ) - Do not throw RuntimeException, Exception, or Throwable \n",
        "disable": false
      },
      {
        "real_name": "java:S4488",
        "display_name": "JavaS4488",
        "severity": "info",
        "category": "convention",
        "rule_title": "Composed \"@RequestMapping\" variants should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpring framework 4.3 introduced variants of the `@RequestMapping` annotation to better represent the semantics of the annotated methods.\nThe use of `@GetMapping`, `@PostMapping`, `@PutMapping`, `@PatchMapping` and `@DeleteMapping`\nshould be preferred to the use of the raw `@RequestMapping(method = RequestMethod.XYZ)`.\n\n# Noncompliant Code Example\n\n# Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2187",
        "display_name": "JavaS2187",
        "severity": "error",
        "category": "convention",
        "rule_title": "TestCases should contain tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in having a JUnit `TestCase` without any test methods. Similarly, you shouldn't have a file in the tests directory\nnamed `*Test`, `*Tests`, or `*TestCase`, but no tests in the file. Doing either of these things may lead someone to\nthink that uncovered classes have been tested.\n\nThis rule raises an issue when files in the test directory are named `*Test`, `*Tests`, or `*TestCase` or\nimplement `TestCase` but don't contain any tests.\n\nSupported frameworks:\n\n  -  JUnit3 \n  -  JUnit4 \n  -  JUnit5 \n  -  TestNG \n  -  Zohhak \n  -  ArchUnit \n  -  Pact \n",
        "disable": false
      },
      {
        "real_name": "java:S3034",
        "display_name": "JavaS3034",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Raw byte values should not be used in bitwise operations in combination with shifts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen reading bytes in order to build other primitive values such as `int`s or `long`s, the `byte` values are\nautomatically promoted, but that promotion can have unexpected results.\n\nFor instance, the binary representation of the integer 640 is `0b0000_0010_1000_0000`, which can also be written with the array of\n(unsigned) bytes `[2, 128]`. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the `byte` `0b1000_0000` is promoted to the `int`\n`0b1111_1111_1111_1111_1111_1111_1000_0000`). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. \n\nTo prevent such accidental value conversion, use bitwise and (`&amp;`) to combine the `byte` value with `0xff`\n(255) and turn all the higher bits back off.\n\nThis rule raises an issue any time a `byte` value is used as an operand without `&amp; 0xff`, when combined with shifts.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, NUM52-J.](https://wiki.sei.cmu.edu/confluence/x/kDZGBQ) - Be aware of numeric promotion behavior \n",
        "disable": false
      },
      {
        "real_name": "java:S103",
        "display_name": "JavaS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "java:S2066",
        "display_name": "JavaS2066",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"Serializable\" inner classes of non-serializable classes should be \"static\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSerializing a non-`static` inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. \n\nMaking the inner class `static` (i.e. \"nested\") avoids this problem, therefore inner classes should be `static` if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: \n\n  -  an inner class can only be instantiated within the context of an instance of the outer class. \n  -  a nested (`static`) class can be instantiated independently of the outer class. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT SER05-J.](https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ) - Do not serialize instances of inner classes \n",
        "disable": false
      },
      {
        "real_name": "java:S2063",
        "display_name": "JavaS2063",
        "severity": "error",
        "category": "convention",
        "rule_title": "Comparators should be \"Serializable\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA non-serializable `Comparator` can prevent an otherwise-`Serializable` ordered collection from being serializable. Since the\noverhead to make a `Comparator` serializable is usually low, doing so can be considered good defensive programming.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2184",
        "display_name": "JavaS2184",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Math operands should be cast before assignment",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen arithmetic is performed on integers, the result will always be an integer. You can assign that result to a `long`,\n`double`, or `float` with automatic type conversion, but having started as an `int` or `long`, the result\nwill likely not be what you expect. \n\nFor instance, if the result of `int` division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a `long`, it may have already overflowed before the assignment.\n\nIn either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  -  [MITRE, CWE-190](http://cwe.mitre.org/data/definitions/190) - Integer Overflow or Wraparound \n  <li> [CERT, NUM50-J.](https://wiki.sei.cmu.edu/confluence/x/AjdGBQ) - Convert integers to floating point for floating-point operations\n  </li>\n  <li> [CERT, INT18-C.](https://wiki.sei.cmu.edu/confluence/x/I9cxBQ) - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat2) - Risky Resource Management \n",
        "disable": false
      },
      {
        "real_name": "java:S3032",
        "display_name": "JavaS3032",
        "severity": "info",
        "category": "correctness",
        "rule_title": "JEE applications should not \"getClassLoader\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the standard `getClassLoader()` may not return the **right** class loader in a JEE context. Instead, go through the\n`currentThread`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2185",
        "display_name": "JavaS2185",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Silly math should not be performed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCertain math operations are just silly and should not be performed because their results are predictable.\n\nIn particular, `anyValue % 1` is silly because it will always return 0.\n\nCasting a non-floating-point value to floating-point and then passing it to `Math.round`, `Math.ceil`, or\n`Math.floor` is silly because the result will always be the original value. \n\nThese operations are silly with any constant value: `Math.abs`, `Math.ceil`, `Math.floor`, `Math.rint`,\n`Math.round`.\n\nAnd these oprations are silly with certain constant values:\n      |Operation      |Value    \n      |acos      |0.0 or 1.0    \n      |asin      |0.0 or 1.0    \n      |atan      |0.0 or 1.0    \n      |atan2      |0.0    \n      |cbrt      |0.0 or 1.0    \n      |cos      |0.0    \n      |cosh      |0.0    \n      |exp      |0.0 or 1.0    \n      |expm1      |0.0    \n      |log      |0.0 or 1.0    \n      |log10      |0.0 or 1.0    \n      |sin      |0.0    \n      |sinh      |0.0    \n      |sqrt      |0.0 or 1.0    \n      |tan      |0.0    \n      |tanh      |0.0    \n      |toDegrees      |0.0 or 1.0    \n      |toRadians      |0.0    \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S105",
        "display_name": "JavaS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "java:S2061",
        "display_name": "JavaS2061",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Custom serialization method signatures should meet requirements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWriters of `Serializable` classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, SER01-J.](https://wiki.sei.cmu.edu/confluence/x/WTdGBQ) - Do not deviate from the proper signatures of serialization methods\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S104",
        "display_name": "JavaS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "java:S3030",
        "display_name": "JavaS3030",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many \"static\" imports",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nImporting a class statically allows you to use its `public static` members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold value: 4\n",
        "disable": false
      },
      {
        "real_name": "java:S2062",
        "display_name": "JavaS2062",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"readResolve\" methods should be inheritable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `readResolve()` method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n`readResolve()`, should not set its visibility to `private` since it will then be unavailable to child classes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2183",
        "display_name": "JavaS2183",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Ints and longs should not be shifted by zero or more than their number of bits-1",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince an `int` is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts\n32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an `int` by 32 is the same as shifting it\nby 0, and shifting it by 33 is the same as shifting it by 1.\n\nSimilarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting `long` by 64 is the\nsame as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:\n\n  -  When the value shifted is a literal. \n  -  When there is a similar shift at the same position on line before or after. E.g.: \n",
        "disable": false
      },
      {
        "real_name": "java:S5693",
        "display_name": "JavaS5693",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing requests with excessive content length is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevents DoS attacks.\n\n## Ask Yourself Whether\n\n  -  size limits are not defined for the different resources of the web application. \n  -  the web application is not protected by [rate limiting](https://en.wikipedia.org/wiki/Rate_limiting) features. \n  -  the web application infrastructure has limited resources. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      -  lower or equal to 8mb for file uploads. \n      -  lower or equal to 2mb for other requests. \n    \nIt is recommended to customize the rule with the limit values that correspond to the web application.\n\n## Sensitive Code Example\n\nWith default limit value of 8388608 (8MB).\n\nA 100 MB file is allowed to be uploaded:\n\n## Compliant Solution\n\nFile upload size is limited to 8 MB:\n\n## See\n\n  <li> [Owasp Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html) - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [CWE-770](https://cwe.mitre.org/data/definitions/770.html) - Allocation of Resources Without Limits or Throttling \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n",
        "disable": false
      },
      {
        "real_name": "java:S106",
        "display_name": "JavaS106",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Standard outputs should not be used directly to log anything",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen logging a message there are several important requirements which must be fulfilled:\n\n  -  The user must be able to easily retrieve the logs \n  -  The format of all logged message must be uniform to allow the user to easily read the log \n  -  Logged data must actually be recorded \n  -  Sensitive data must only be logged securely \n\nIf a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, ERR02-J.](https://wiki.sei.cmu.edu/confluence/x/nzdGBQ) - Prevent exceptions while logging data \n",
        "disable": false
      },
      {
        "real_name": "java:S107",
        "display_name": "JavaS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n\n## Exceptions\n\nMethods annotated with :\n\n  -  Spring's `@RequestMapping` (and related shortcut annotations, like `@GetRequest`) \n  -  JAX-RS API annotations (like `@javax.ws.rs.GET`) \n  -  Bean constructor injection with `@org.springframework.beans.factory.annotation.Autowired` \n  -  CDI constructor injection with `@javax.inject.Inject` \n  -  `@com.fasterxml.jackson.annotation.JsonCreator` \n\nmay have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S2060",
        "display_name": "JavaS2060",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"Externalizable\" classes should have no-arguments constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `Externalizable` class is one which handles its own `Serialization` and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an `Externalizable` class without a\nno-arg constructor cannot be deserialized.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S108",
        "display_name": "JavaS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty unless it is a `synchronized` block. `synchronized`\nblocks are still considered empty even with comments because they can still affect program flow.\n",
        "disable": false
      },
      {
        "real_name": "java:S109",
        "display_name": "JavaS109",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Magic numbers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\n\nUsing magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\n\nThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\n\n-1, 0 and 1 are not considered magic numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores `hashCode` methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S3046",
        "display_name": "JavaS3046",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"wait\" should not be called when multiple locks are held",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two locks are held simultaneously, a `wait` call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S5344",
        "display_name": "JavaS5344",
        "severity": "error",
        "category": "security",
        "rule_title": "Passwords should not be stored in plain-text or with a fast hashing algorithm",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA user password should never be stored in clear-text, instead a hash should be produced from it using a secure algorithm:\n\n  -  not vulnerable to `brute force attacks`. \n  -  not vulnerable to `collision attacks` (see rule s4790). \n  -  and a salt should be added to the password to lower the risk of `rainbow table attacks` (see rule s2053). \n\nThis rule raises an issue when a password is stored in clear-text or with a hash algorithm vulnerable to `bruce force attacks`. These\nalgorithms, like `md5` or `SHA-family` functions are fast to compute the hash and therefore brute force attacks are possible\n(it's easier to exhaust the entire space of all possible passwords) especially with hardware like GPU, FPGA or ASIC. Modern password hashing\nalgorithms such as `bcrypt`, `PBKDF2` or `argon2` are recommended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP CheatSheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html) - Password Storage Cheat Sheet\n  </li>\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [MITRE, CWE-328](http://cwe.mitre.org/data/definitions/328) - Reversible One-Way Hash \n  -  [MITRE, CWE-327](http://cwe.mitre.org/data/definitions/327) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [MITRE, CWE-916](http://cwe.mitre.org/data/definitions/916) - Use of Password Hash With Insufficient Computational Effort \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S121",
        "display_name": "JavaS121",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control structures should use curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen the body of an `if` statement is a single `return`, `break` or `continue` and is on the same\nline.\n\n## See\n\n  -  [CERT, EXP19-C.](https://wiki.sei.cmu.edu/confluence/x/g9YxBQ) - Use braces for the body of an if, for, or while statement \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "java:S3047",
        "display_name": "JavaS3047",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiple loops over the same set should be combined",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S120",
        "display_name": "JavaS120",
        "severity": "info",
        "category": "convention",
        "rule_title": "Package names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S122",
        "display_name": "JavaS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2197",
        "display_name": "JavaS2197",
        "severity": "error",
        "category": "convention",
        "rule_title": "Modulus results should not be checked for direct equality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, NUM51-J.](https://wiki.sei.cmu.edu/confluence/x/pDdGBQ) - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  -  [CERT, INT10-C](https://wiki.sei.cmu.edu/confluence/x/_NUxBQ) - Do not assume a positive remainder when using the % operator \n",
        "disable": false
      },
      {
        "real_name": "java:S2077",
        "display_name": "JavaS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3042",
        "display_name": "JavaS3042",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"writeObject\" should not be the only \"synchronized\" code in a class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n`writeObject` `synchronized`, but it's highly suspicious if this serialization-related method is the only\n`synchronized` code in a `class`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S114",
        "display_name": "JavaS114",
        "severity": "info",
        "category": "convention",
        "rule_title": "Interface names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S113",
        "display_name": "JavaS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools work better when files end with an empty line.\n\nThis rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "java:S2196",
        "display_name": "JavaS2196",
        "severity": "info",
        "category": "convention",
        "rule_title": "Switches should be used for sequences of simple \"String\" tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince Java 7, `String`s can be used as `switch` arguments. So when a single `String` is tested against three or\nmore values in an `if`/`else if` structure, it should be converted to a switch instead for greater readability.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3282",
        "display_name": "JavaS3282",
        "severity": "error",
        "category": "convention",
        "rule_title": "EJB interceptor exclusions should be declared as annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S116",
        "display_name": "JavaS116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Field names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S115",
        "display_name": "JavaS115",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constant names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S118",
        "display_name": "JavaS118",
        "severity": "info",
        "category": "convention",
        "rule_title": "Abstract class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n`abstract` class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.\n\n## Noncompliant Code Example\n\nWith the default regular expression: `^Abstract[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3281",
        "display_name": "JavaS3281",
        "severity": "error",
        "category": "security",
        "rule_title": "Default EJB interceptors should be declared in \"ejb-jar.xml\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDefault interceptors, such as application security interceptors, must be listed in the `ejb-jar.xml` file, or they will not be treated\nas default.\n\nThis rule applies to projects that contain JEE Beans (any one of `javax.ejb.Singleton`, `MessageDriven`,\n`Stateless` or `Stateful`).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S117",
        "display_name": "JavaS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and method parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n\n## Exceptions\n\nLoop counters are ignored by this rule.\n\nas well as one-character `catch` variables: \n",
        "disable": false
      },
      {
        "real_name": "java:S119",
        "display_name": "JavaS119",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.\n\nThis rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4347",
        "display_name": "JavaS4347",
        "severity": "error",
        "category": "security",
        "rule_title": "\"SecureRandom\" seeds should not be predictable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `java.security.SecureRandom` class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it\nwith a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the\n`SecureRandom` implementation.\n\nThis rule raises an issue when `SecureRandom.setSeed()` or `SecureRandom(byte[])` are called with a seed that is either\nof:\n\n  -  a constant \n  -  `System.currentTimeMillis()` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-332](https://cwe.mitre.org/data/definitions/332.html) - Insufficient Entropy in PRNG \n  -  [MITRE, CWE-336](https://cwe.mitre.org/data/definitions/336.html) - Same Seed in Pseudo-Random Number Generator (PRNG) \n  -  [MITRE, CWE-337](https://cwe.mitre.org/data/definitions/337.html) - Predictable Seed in Pseudo-Random Number Generator (PRNG) \n  <li> [CERT, MSC63J.](https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded) - Ensure that\n  SecureRandom is properly seeded </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4349",
        "display_name": "JavaS4349",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"write(byte[],int,int)\" should be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen directly subclassing `java.io.OutputStream` or `java.io.FilterOutputStream`, the only requirement is that you implement\nthe method `write(int)`. However most uses for such streams don't write a single byte at a time and the default implementation for\n`write(byte[],int,int)` will call `write(int)` for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n`write(byte[],int,int)`.\n\nThis rule raises an issue when a direct subclass of `java.io.OutputStream` or `java.io.FilterOutputStream` doesn't provide an\noverride of `write(byte[],int,int)`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the class is declared `abstract`.\n",
        "disable": false
      },
      {
        "real_name": "java:S2047",
        "display_name": "JavaS2047",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The names of methods with boolean return values should start with \"is\" or \"has\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWell-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nOverriding methods are excluded.\n",
        "disable": false
      },
      {
        "real_name": "java:S2168",
        "display_name": "JavaS2168",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Double-checked locking should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDouble-checked locking is the practice of checking a lazy-initialized object's state both before and after a `synchronized` block is\nentered to determine whether or not to initialize the object.\n\nIt does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n`float` or `int`. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.\n\nThere are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But `synchronized`\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using `synchronized` altogether,\nyou can use an inner `static class` to hold the reference instead. Inner static classes are guaranteed to load lazily.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nWith inner static holder:\n\nUsing \"volatile\":\n\n## See\n\n  -  [The \"Double-Checked Locking is Broken\" Declaration](https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html) \n  -  [CERT, LCK10-J.](https://wiki.sei.cmu.edu/confluence/x/6zdGBQ) - Use a correct form of the double-checked locking idiom \n  -  [MITRE, CWE-609](https://cwe.mitre.org/data/definitions/609.html) - Double-checked locking \n  -  [JLS 12.4](https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4) - Initialization of Classes and Interfaces \n  -  Wikipedia: [Double-checked locking](https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java) \n",
        "disable": false
      },
      {
        "real_name": "java:S5679",
        "display_name": "JavaS5679",
        "severity": "warning",
        "category": "security",
        "rule_title": "OpenSAML2 should be configured to prevent authentication bypass",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn 2018, Duo Security found a new vulnerability class that affects SAML-based single sign-on (SSO) systems and this led to the following\nvulnerabilities being disclosed: [CVE-2017-11427](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11427), <a\nhref=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11428\">CVE-2017-11428</a>, <a\nhref=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11429\">CVE-2017-11429</a>, <a\nhref=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11430\">CVE-2017-11430</a>, <a\nhref=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0489\">CVE-2018-0489</a>, <a\nhref=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7340\">CVE-2018-7340</a>.\n\nFrom a specially crafted `&lt;SAMLResponse&gt;` file, an attacker having already access to the SAML system with his own account can\nbypass the authentication mechanism and be authenticated as another user.\n\nThis is due to the fact that SAML protocol rely on XML format and how the underlying XML parser interprets XML comments.\n\nIf an attacker manage to change the `&lt;NameID&gt;` field identifying the authenticated user with XML comments, he can exploit the\nvulnerability.\n\nHere is an example of a potential payload:\n\nThe attacker will manage to generate a valid &lt;SAMLResponse&gt; content with the account \"admin@domain.com.evil.com\". He will modify it with XML\ncomments to finally be authenticated as \"admin@domain.com\". To prevent this vulnerability on application using Spring Security SAML relying on\nOpenSAML2, XML comments should be ignored thanks to the property `ignoreComments` set to `true`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  <li> [OWASP Top 10 2017 Category A9](https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities) - Using\n  Components with Known Vulnerabilities </li>\n  <li> <a href=\"https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\">Duo Finds SAML Vulnerabilities Affecting\n  Multiple Implementations</a> </li>\n  <li> <a href=\"https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability\">Spring Security SAML and this week's SAML\n  Vulnerability</a> </li>\n  -  [Spring Security SAML: Issue #228](https://github.com/spring-projects/spring-security-saml/issues/228) \n",
        "disable": false
      },
      {
        "real_name": "java:S4348",
        "display_name": "JavaS4348",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"iterator\" should not return \"this\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are two classes in the Java standard library that deal with iterations: `Iterable&lt;T&gt;` and `Iterator&lt;T&gt;`. An\n`Iterable&lt;T&gt;` represents a data structure that can be the target of the \"for-each loop\" statement, and an\n`Iterator&lt;T&gt;` represents the state of an ongoing traversal. An `Iterable&lt;T&gt;` is generally expected to support\nmultiple traversals.\n\nAn `Iterator&lt;T&gt;` that also implements `Iterable&lt;t&gt;` by returning itself as its `iterator()` will not\nsupport multiple traversals since its state will be carried over.\n\nThis rule raises an issue when the `iterator()` method of a class implementing both `Iterable&lt;T&gt;` and\n`Iterator&lt;t&gt;` returns `this`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1199",
        "display_name": "JavaS1199",
        "severity": "info",
        "category": "convention",
        "rule_title": "Nested code blocks should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2166",
        "display_name": "JavaS2166",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend `Exception` or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3014",
        "display_name": "JavaS3014",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"ThreadGroup\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is little valid reason to use the methods of the `ThreadGroup` class. Some are deprecated (`allowThreadSuspension()`,\n`resume()`, `stop()`, and `suspend()`), some are obsolete, others aren't thread-safe, and still others are insecure\n(`activeCount()`, `enumerate()`) . For these reasons, any use of `ThreadGroup` is suspicious and should be\navoided.\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, THI01-J.](https://wiki.sei.cmu.edu/confluence/x/YzdGBQ) - Do not invoke ThreadGroup methods \n",
        "disable": false
      },
      {
        "real_name": "java:S2167",
        "display_name": "JavaS2167",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"compareTo\" should not return \"Integer.MIN_VALUE\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is the sign, rather than the magnitude of the value returned from `compareTo` that matters. Returning `Integer.MIN_VALUE`\ndoes **not** convey a higher degree of inequality, and doing so can cause errors because the return value of `compareTo` is sometimes\ninversed, with the expectation that negative values become positive. However, inversing `Integer.MIN_VALUE` yields\n`Integer.MIN_VALUE` rather than `Integer.MAX_VALUE`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3374",
        "display_name": "JavaS3374",
        "severity": "error",
        "category": "security",
        "rule_title": "Struts validation forms should have unique names",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Common Weakness Enumeration,\n\n> \n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n\n\nIn such a case, it is likely that the two forms should be combined. At the very least, one should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-102](https://cwe.mitre.org/data/definitions/102.html) - Struts: Duplicate Validation Forms \n  <li> [OWASP, Improper Data Validation](https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation) - Struts: Duplicate\n  Validation Forms </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S2164",
        "display_name": "JavaS2164",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Math should not be performed on floats",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor small numbers, `float` math has enough precision to yield the expected value, but for larger numbers, it does not.\n`BigDecimal` is the best alternative, but if a primitive is required, use a `double`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the mathematical expression is only used to build a string.\n\n## See\n\n  <li> [CERT, FLP02-C.](https://wiki.sei.cmu.edu/confluence/x/CtcxBQ) - Avoid using floating-point numbers when precise computation is\n  needed </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1197",
        "display_name": "JavaS1197",
        "severity": "info",
        "category": "convention",
        "rule_title": "Array designators \"[]\" should be on the type, not the variable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArray designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3011",
        "display_name": "JavaS3011",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Reflection should not be used to increase accessibility of classes, methods, or fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, SEC05-J.](https://wiki.sei.cmu.edu/confluence/x/_jZGBQ) - Do not use reflection to increase accessibility of classes,\n  methods, or fields </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1075",
        "display_name": "JavaS1075",
        "severity": "info",
        "category": "convention",
        "rule_title": "URIs should not be hardcoded",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.\n\nFurther even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.\n\nThis rule raises an issue when URI's or path delimiters are hard coded.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "java:S2165",
        "display_name": "JavaS2165",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"finalize\" should not set fields to \"null\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no point in setting class fields to `null` in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3012",
        "display_name": "JavaS3012",
        "severity": "info",
        "category": "convention",
        "rule_title": "Arrays should not be copied using loops",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use\n`Arrays.copyOf` to copy an entire array into another array, use `System.arraycopy` to copy only a subset of an array into\nanother array, and use `Arrays.asList` to feed the constructor of a new list with an array.\n\nNote that `Arrays.asList` simply puts a `Collections` wrapper around the original array, so further steps are required if a\nnon-fixed-size `List` is desired.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nRule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are\ncopied conditionally are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S3254",
        "display_name": "JavaS3254",
        "severity": "info",
        "category": "convention",
        "rule_title": "Default annotation parameter values should not be passed as arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpecifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2162",
        "display_name": "JavaS2162",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"equals\" methods should be symmetric and work for subclasses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA key facet of the `equals` contract is that if `a.equals(b)` then `b.equals(a)`, i.e. that the relationship is\nsymmetric. \n\nUsing `instanceof` breaks the contract when there are subclasses, because while the child is an `instanceof` the parent, the\nparent is not an `instanceof` the child. For instance, assume that `Raspberry extends Fruit` and adds some fields (requiring a\nnew implementation of `equals`):\n\nIf similar `instanceof` checks were used in the classes' `equals` methods, the symmetry principle would be broken:\n\nAdditionally, non `final` classes shouldn't use a hardcoded class name in the `equals` method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.\n\nFurther, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n`thisClass.equals(unrelatedClass)` can return true, `unrelatedClass.equals(thisClass)` will not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MET08-J.](https://wiki.sei.cmu.edu/confluence/x/AzZGBQ) - Preserve the equality contract when overriding the equals() method\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S1195",
        "display_name": "JavaS1195",
        "severity": "info",
        "category": "convention",
        "rule_title": "Array designators \"[]\" should be located after the type in method signatures",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Java Language Specification: \n\n> \n  For compatibility with older versions of the Java SE platform,\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  This obsolescent syntax should not be used in new code.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3373",
        "display_name": "JavaS3373",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"action\" mappings should not have too many \"forward\" entries",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt makes sense to handle all related actions in the same place. Thus, the same `&lt;action&gt;` might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which `&lt;forward/&gt;` handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. \n\nSo to ease maintenance, this rule raises an issue when an `&lt;action&gt;` has more than the allowed number of\n`&lt;forward/&gt;` tags.\n\n## Noncompliant Code Example\n\nWith the default threshold of 4:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3252",
        "display_name": "JavaS3252",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"static\" base class members should not be accessed via derived types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the interest of code clarity, `static` members of a `base` class should never be accessed using a derived type's name.\nDoing so is confusing and could create the illusion that two different static members exist.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5790",
        "display_name": "JavaS5790",
        "severity": "error",
        "category": "correctness",
        "rule_title": "JUnit5 inner test classes should be annotated with @Nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf not annotated with `@Nested`, an inner class containing some tests will never be executed during tests execution. While you could\nstill be able to manually run its tests in an IDE, it won’t be the case during the build. By contrast, a static nested class containing some tests\nshould not be annotated with `@Nested`, JUnit5 will not share setup and state with an instance of its enclosing class.\n\nThis rule raises an issue on inner classes and static nested classes containing JUnit5 test methods which has a wrong usage of `@Nested`\nannotation.\n\nNote: This rule does not check if the context in which JUnit 5 is running (e.g. Maven Surefire Plugin) is properly configured to execute static\nnested classes, it could not be the case using the default configuration.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3010",
        "display_name": "JavaS3010",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Static fields should not be updated in constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssigning a value to a `static` field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\n\nInstead remove the field's `static` modifier, or initialize it statically.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1194",
        "display_name": "JavaS1194",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"java.lang.Error\" should not be extended",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`java.lang.Error` and its subclasses represent abnormal conditions, such as `OutOfMemoryError`, which should only be\nencountered by the Java Virtual Machine.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1193",
        "display_name": "JavaS1193",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exception types should not be tested using \"instanceof\" in catch blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types\">CERT,\n  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5793",
        "display_name": "JavaS5793",
        "severity": "info",
        "category": "convention",
        "rule_title": "Migrate your tests from JUnit4 to the new JUnit5 annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAs mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:\n\n> \n  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed\n  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base\n  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>\n\n\nHowever, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to\nJUnit5, hence helping migration of a project.\n\nHere is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:\n      |JUnit4      |JUnit5    \n      |`org.junit.Test`      |`org.junit.jupiter.api.Test`    \n      |`org.junit.Before`      |`org.junit.jupiter.api.BeforeEach`    \n      |`org.junit.After`      |`org.junit.jupiter.api.AfterEach`    \n      |`org.junit.BeforeClass`      |`org.junit.jupiter.api.BeforeAll`    \n      |`org.junit.AfterClass`      |`org.junit.jupiter.api.AfterAll`    \n      |`org.junit.Ignore`      |`org.junit.jupiter.api.Disabled`    \n\nNote that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the\nannotation won't work immediately:\n      |JUnit4      |JUnit5    \n      |`org.junit.experimental.categories.Category`      |`org.junit.jupiter.api.Tag`    \n      |`org.junit.Rule`      |`org.junit.jupiter.api.extension.ExtendWith`    \n      |`org.junit.ClassRule`      |`org.junit.jupiter.api.extension.RegisterExtension`    \n      |`org.junit.runner.RunWith`      |`org.junit.jupiter.api.extension.ExtendWith`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JUnit 5: Migrating from JUnit4](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4) \n",
        "disable": false
      },
      {
        "real_name": "java:S2160",
        "display_name": "JavaS2160",
        "severity": "info",
        "category": "convention",
        "rule_title": "Subclasses that add fields should override \"equals\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExtend a class that overrides `equals` and add fields without overriding `equals` in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.\n\nThis rule looks for classes that do all of the following:\n\n  -  extend classes that override `equals`. \n  -  do not themselves override `equals`. \n  -  add fields. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S1192",
        "display_name": "JavaS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having less than 5 characters are excluded.\n",
        "disable": false
      },
      {
        "real_name": "java:S1191",
        "display_name": "JavaS1191",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes from \"sun.*\" packages should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClasses in the `sun.*` or `com.sun.*` packages are considered implementation details, and are not part of the Java API.\n\nThey can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.\n\nSuch classes are almost always wrapped by Java API classes that should be used instead.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S1190",
        "display_name": "JavaS1190",
        "severity": "error",
        "category": "convention",
        "rule_title": "Future keywords should not be used as names",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThrough Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. \n\nFollowing keywords are marked as invalid identifiers \n      |Keyword      |Added    \n      |`_`      |9    \n      |`enum`      |5.0    \n\n`assert` and `strictfp` are another example of valid identifiers which became keywords in later versions, but are not\nsupported by this rule.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5689",
        "display_name": "JavaS5689",
        "severity": "info",
        "category": "security",
        "rule_title": "Disclosing fingerprints from web application technologies is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDisclosing technology fingerprints allows an attacker to gather information about the technologies used to develop the web application and to\nperform relevant security assessments more quickly (like the identification of known vulnerable components).\n\n## Ask Yourself Whether\n\n  -  The `x-powered-by` HTTP header or similar is used by the application. \n  -  Technologies used by the application are confidential and should not be easily guessed. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nIt's recommended to not disclose technologies used on a website, with `x-powered-by` HTTP header for example. \n\nIn addition, it's better to completely disable this HTTP header rather than setting it a random value.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\nDon't use `x-powered-by` or `Server` HTTP header or any other means disclosing fingerprints of the application. \n\n## See\n\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html\">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Information Exposure \n",
        "disable": false
      },
      {
        "real_name": "java:S2059",
        "display_name": "JavaS2059",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Serializable\" inner classes of \"Serializable\" classes should be static",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSerializing a non-`static` inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. \n\nMaking the inner class `static` (i.e. \"nested\") avoids this problem, therefore inner classes should be `static` if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: \n\n  -  an inner class can only be instantiated within the context of an instance of the outer class. \n  -  a nested (`static`) class can be instantiated independently of the outer class. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, SER05-J.](https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ) - Do not serialize instances of inner classes \n",
        "disable": false
      },
      {
        "real_name": "java:S5322",
        "display_name": "JavaS5322",
        "severity": "error",
        "category": "security",
        "rule_title": "Receiving intents is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Android applications, receiving intents is security-sensitive. For example, it has led in the past to the following vulnerability:\n\n  -  [CVE-2019-1677](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1677) \n  -  [CVE-2015-1275](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1275) \n\nOnce a receiver is registered, any app can broadcast potentially malicious intents to your application.\n\nThis rule raises an issue when a receiver is registered without specifying any \"broadcast permission\".\n\n## Ask Yourself Whether\n\n  -  The data extracted from intents is not sanitized. \n  -  Intents broadcast is not restricted. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nRestrict the access to broadcasted intents. See <a\nhref=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> for more\ninformation.\n\n## Sensitive Code Example\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-925](https://cwe.mitre.org/data/definitions/925.html) - Improper Verification of Intent by Broadcast Receiver \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> [Android documentation](https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions) -\n  Broadcast Overview - Security considerations and best practices </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S5443",
        "display_name": "JavaS5443",
        "severity": "error",
        "category": "security",
        "rule_title": "Using publicly writable directories is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n`/tmp` in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2012-2451](https://nvd.nist.gov/vuln/detail/CVE-2012-2451) \n  -  [CVE-2015-1838](https://nvd.nist.gov/vuln/detail/CVE-2015-1838) \n\nThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like `/tmp` (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., `TMP` and `TMPDIR`.\n\n  -  `/tmp` \n  -  `/var/tmp` \n  -  `/usr/tmp` \n  -  `/dev/shm` \n  -  `/dev/mqueue` \n  -  `/run/lock` \n  -  `/var/run/lock` \n  -  `/Library/Caches` \n  -  `/Users/Shared` \n  -  `/private/tmp` \n  -  `/private/var/tmp` \n  -  `\\Windows\\Temp` \n  -  `\\Temp` \n  -  `\\TMP` \n\n## Ask Yourself Whether\n\n  -  Files are read from or written into a publicly writable folder \n  -  The application creates files with predictable names into a publicly writable folder \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      -  The generated filename is unpredictable \n      -  The file is readable and writable only by the creating user ID \n      -  The file descriptor is not inherited by child processes \n      -  The file will be destroyed as soon as it is closed \n    \n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "java:S2057",
        "display_name": "JavaS2057",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Serializable\" classes should have a \"serialVersionUID\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `serialVersionUID` field is strongly recommended in all `Serializable` classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.\n\n`serialVersionUID`'s should be declared with all of these modifiers: `static final long`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nSwing and AWT classes, `abstract` classes, `Throwable` and its subclasses (`Exception`s and `Error`s),\nand classes marked with `@SuppressWarnings(\"serial\")` are ignored.\n\n## See\n\n  -  [CERT, SER00-J.](https://wiki.sei.cmu.edu/confluence/x/ajdGBQ) - Enable serialization compatibility during class evolution \n",
        "disable": false
      },
      {
        "real_name": "java:S2177",
        "display_name": "JavaS2177",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Child class methods named for parent class methods should be overrides",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:\n\n  -  the parent class method is `static` and the child class method is not. \n  -  the arguments or return types of the child method are in different packages than those of the parent method. \n  -  the parent class method is `private`. \n\nTypically, these things are done unintentionally; the private parent class method is overlooked, the `static` keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2178",
        "display_name": "JavaS2178",
        "severity": "error",
        "category": "convention",
        "rule_title": "Short-circuit logic should be used in boolean contexts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP46-C.](https://wiki.sei.cmu.edu/confluence/x/WNYxBQ) - Do not use a bitwise operator with a Boolean-like operand \n",
        "disable": false
      },
      {
        "real_name": "java:S5445",
        "display_name": "JavaS5445",
        "severity": "error",
        "category": "security",
        "rule_title": "Insecure temporary file creation methods should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `File.createTempFile` as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, `Files.createTempDirectory` (Java 7+) should be used.\n\nThis rule raises an issue when the following steps are taken in immediate sequence:\n\n  -  call to `File.createTempFile` \n  -  delete resulting file \n  -  call `mkdir` on the File object \n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A9](https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities) - Using\n  Components with Known Vulnerabilities </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "java:S2175",
        "display_name": "JavaS2175",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Inappropriate \"Collection\" calls should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `java.util.Collection` API has methods that accept `Object` parameters such as `Collection.remove(Object o)`,\nand `Collection.contains(Object o)`. When the actual type of the object provided to these methods is not consistent with the type declared\non the `Collection` instantiation, those methods will always return `false` or `null`. This is most likely unintended\nand hides a design problem.\n\nThis rule raises an issue when the type of the argument of the following APIs is unrelated to the type used for the `Collection`\ndeclaration:\n\n  -  `Collection.remove(Object o)` \n  -  `Collection.removeAll(Collection&lt;?&gt;)` \n  -  `Collection.contains(Object o)` \n  -  `List.indexOf(Object o)` \n  -  `List.lastIndexOf(Object o)` \n  -  `Map.containsKey(Object key)` \n  -  `Map.containsValue(Object value)` \n  -  `Map.get(Object key)` \n  -  `Map.getOrDefault(Object key, V defaultValue)` \n  -  `Map.remove(Object key)` \n  -  `Map.remove(Object key, Object value)` \n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, EXP04-J.](https://wiki.sei.cmu.edu/confluence/x/uDdGBQ) - Do not pass arguments to certain Java Collections Framework methods\n  that are a different type than the collection parameter type </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S101",
        "display_name": "JavaS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5324",
        "display_name": "JavaS5324",
        "severity": "error",
        "category": "security",
        "rule_title": "Accessing Android external storage is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Android applications, accessing external storage is security-sensitive. For example, it has led in the past to the following vulnerability:\n\n  -  [CVE-2018-15004](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15004) \n  -  [CVE-2018-15002](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15002) \n  -  [CVE-2018-14995](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14995) \n\nAny application having the permissions `WRITE_EXTERNAL_STORAGE` or `READ_EXTERNAL_STORAGE` can access files stored on an\nexternal storage, be it a private or a public file.\n\nThis rule raises an issue when the following functions are called:\n\n  -  `android.os.Environment.getExternalStorageDirectory` \n  -  `android.os.Environment.getExternalStoragePublicDirectory` \n  -  `android.content.Context.getExternalFilesDir` \n  -  `android.content.Context.getExternalFilesDirs` \n  -  `android.content.Context.getExternalMediaDirs` \n  -  `android.content.Context.getExternalCacheDir` \n  -  `android.content.Context.getExternalCacheDirs` \n  -  `android.content.Context.getObbDir` \n  -  `android.content.Context.getObbDirs` \n\n## Ask Yourself Whether\n\n  -  Data written to the external storage is security-sensitive and is not encrypted. \n  -  Data read from files is not validated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nValidate any data read from files.\n\nAvoid writing sensitive information to an external storage. If this is required, make sure that the data is encrypted properly.\n\n## Sensitive Code Example\n\n## See\n\n  <li> [Android Security tips on external file storage](https://developer.android.com/training/articles/security-tips#ExternalStorage)\n  </li>\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-312](https://cwe.mitre.org/data/definitions/312.html) - Cleartext Storage of Sensitive Information \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat2) - Risky Resource Management \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2055",
        "display_name": "JavaS2055",
        "severity": "info",
        "category": "correctness",
        "rule_title": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `Serializable` object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. \n\nIn order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n`Serializable` class must have a no-arg constructor. Otherwise the class is `Serializable` but not deserializable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2176",
        "display_name": "JavaS2176",
        "severity": "error",
        "category": "convention",
        "rule_title": "Class names should not shadow interfaces or superclasses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S100",
        "display_name": "JavaS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n\n## Exceptions\n\nOverriding methods are excluded. \n",
        "disable": false
      },
      {
        "real_name": "java:S3020",
        "display_name": "JavaS3020",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"toArray\" should be passed an array of the proper type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGiven no arguments, the `Collections.toArray` method returns an `Object []`, which will cause a\n`ClassCastException` at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2053",
        "display_name": "JavaS2053",
        "severity": "error",
        "category": "security",
        "rule_title": "Hashes should include an unpredictable salt",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn cryptography, a \"salt\" is an extra piece of data which is included when hashing a password. This makes `rainbow-table attacks` more\ndifficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the\nhash value in databases of precomputed hashes (called `rainbow-tables`).\n\nThis rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as `PBKDF2`, is used\nwith a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as `sha1` or `md5`\nas they should not be used to hash passwords.\n\n## Recommended Secure Coding Practices\n\n  -  Use hashing functions generating their own secure salt or generate a secure random value of at least 16 bytes. \n  -  The salt should be unique by user password. \n\n## Noncompliant Code Example\n\nBelow, the hashed password use a predictable salt:\n\n## Compliant Solution\n\nUse `java.security.SecureRandom` to generate an unpredictable salt:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-759](http://cwe.mitre.org/data/definitions/759.html) - Use of a One-Way Hash without a Salt \n  -  [MITRE, CWE-760](http://cwe.mitre.org/data/definitions/760.html) - Use of a One-Way Hash with a Predictable Salt \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2293",
        "display_name": "JavaS2293",
        "severity": "info",
        "category": "convention",
        "rule_title": "The diamond operator (\"<>\") should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava 7 introduced the diamond operator (`&lt;&gt;`) to reduce the verbosity of generics code. For instance, instead of having to declare\na `List`'s type in both its declaration and its constructor, you can now simplify the constructor declaration with `&lt;&gt;`,\nand the compiler will infer the type.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5320",
        "display_name": "JavaS5320",
        "severity": "error",
        "category": "security",
        "rule_title": "Broadcasting intents is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Android applications, broadcasting intents is security-sensitive. For example, it has led in the past to the following vulnerability:\n\n  -  [CVE-2018-9489](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9489) \n\nBy default, broadcasted intents are visible to every application, exposing all sensitive information they contain.\n\nThis rule raises an issue when an intent is broadcasted without specifying any \"receiver permission\".\n\n## Ask Yourself Whether\n\n  -  The intent contains sensitive information. \n  -  Intent reception is not restricted. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nRestrict the access to broadcasted intents. See <a\nhref=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> for more\ninformation.\n\n## Sensitive Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-927](https://cwe.mitre.org/data/definitions/927.html) - Use of Implicit Intent for Sensitive Communication \n  <li> [Android documentation](https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions) -\n  Broadcast Overview - Security considerations and best practices </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4351",
        "display_name": "JavaS4351",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"compareTo\" should not be overloaded",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen implementing the `Comparable&lt;T&gt;.compareTo` method, the parameter's type has to match the type used in the\n`Comparable` declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the\nintent.\n\nThis rule raises an issue when the parameter of the `compareTo` method of a class implementing `Comparable&lt;T&gt;` is not\nsame as the one used in the `Comparable` declaration.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4288",
        "display_name": "JavaS4288",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Spring components should use constructor injection",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpring `@Controller`, `@Service`, and `@Repository` classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few `static` members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.\n\nThis rule raise an issue when any non-`static` member of a Spring component has an injection annotation, or if the constructor of Spring\ncomponent does not have injection annotation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6103",
        "display_name": "JavaS6103",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "AssertJ assertions with \"Consumer\" arguments should contain assertion inside consumers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertJ assertions taking `Consumer` objects as arguments are expected to contain \"requirements\", which should themselves be expressed\nas assertions. This concerns the following methods: <a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#allSatisfy-java.util.function.Consumer-\">allSatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#anySatisfy-java.util.function.Consumer-\">anySatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#hasOnlyOneElementSatisfying-java.util.function.Consumer-\">hasOnlyOneElementSatisfying</a>,&nbsp;<a\nhref=\"https://tinyurl.com/yxnzt6pj\">isInstanceOfSatisfying</a>,&nbsp;<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#noneSatisfy-java.util.function.Consumer-\">noneSatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfies-java.util.function.Consumer-\">satisfies</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfiesAnyOf-java.util.function.Consumer-java.util.function.Consumer-\">satisfiesAnyOf</a>,&nbsp;<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#zipSatisfy-java.lang.Iterable-java.util.function.BiConsumer-\">zipSatisfy</a>.\n\nThese methods are assuming the&nbsp;`Consumer`&nbsp;will do the assertions itself. If you do not do any assertion in the\n`Consumer`, it probably means that you are inadvertently only partially testing your object.\n\nThis rule raises an issue when a `Consumer` argument of any of the above methods does not contain any assertion.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3077",
        "display_name": "JavaS3077",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Non-primitive fields should not be \"volatile\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking an array `volatile` means that the array itself will always be read fresh and never thread cached, but the items **in** the\narray will not be. Similarly, marking a mutable object field `volatile` means the object **reference** is `volatile` but\nthe object itself is not, and other threads may not see updates to the object state.\n\nThis can be salvaged with arrays by using the relevant AtomicArray class, such as `AtomicIntegerArray`, instead. For mutable objects,\nthe `volatile` should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal\nstorage.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, CON50-J.](https://wiki.sei.cmu.edu/confluence/x/UzdGBQ) - Do not assume that declaring a reference volatile guarantees safe\n  publication of the members of the referenced object </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S3078",
        "display_name": "JavaS3078",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"volatile\" variables should not be used with compound operators",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing compound operators as well as increments and decrements (and toggling, in the case of `boolean`s) on primitive fields are not\natomic operations. That is, they don't happen in a single step. For instance, when a `volatile` primitive field is incremented or\ndecremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as\n`AtomicInteger`, or synchronize the access.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, VNA02-J.](https://wiki.sei.cmu.edu/confluence/x/SjdGBQ) - Ensure that compound operations on shared variables are atomic\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "java:S4165",
        "display_name": "JavaS4165",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe transitive property says that if `a == b` and `b == c`, then `a == c`. In such cases, there's no point in\nassigning `a` to `c` or vice versa because they're already equivalent. \n\nThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6104",
        "display_name": "JavaS6104",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values.",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMap <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-\">computeIfAbsent</a>&nbsp;and <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-\">computeIfPresent</a> methods are\nconvenient to avoid the cumbersome process to check if a key exists or not, followed by the addition of the entry. However, when the function used to\ncompute the value returns `null`, the entry `key-&gt;null` will not be added to the Map. Furthermore, in the case of\n`computeIfPresent`, if the key is present the entry will be removed. These methods should therefore not be used to conditionally add an\nentry with a null value. The traditional way should be used instead.\n\nThis rule raises an issue when `computeIfAbsent` or `computeIfPresent` is used with a lambda always returning null.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See also\n\n  -  {rule:java:S3824} - \"Map.get\" and value test should be replaced with single method call \n",
        "disable": false
      },
      {
        "real_name": "java:S4042",
        "display_name": "JavaS4042",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"java.nio.Files#delete\" should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `java.io.File#delete` fails, this `boolean` method simply returns `false` with no indication of the cause. On\nthe other hand, when `java.nio.file.Files#delete` fails, this `void` method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, `java.nio.file.Files#delete` is\nthe preferred option.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4174",
        "display_name": "JavaS4174",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local constants should follow naming conventions for constants",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all local, `final`, initialized, primitive\nvariables, have names that match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5261",
        "display_name": "JavaS5261",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"else\" statements should be clearly matched with an \"if\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe dangling `else` problem appears when nested `if`/`else`&nbsp;statements are written without curly braces. In\nthis case, `else` is associated with the nearest&nbsp;`if` but that is not always obvious and sometimes the indentation can also\nbe misleading.\n\nThis rules reports `else` statements that are difficult to understand, because they are inside nested `if` statements without\ncurly braces.\n\nAdding curly braces can generally make the code clearer (see rule {rule:java:S121} ), and in this situation of dangling `else`, it\nreally clarifies the intention of the code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [https://en.wikipedia.org/wiki/Dangling_else](https://en.wikipedia.org/wiki/Dangling_else) \n",
        "disable": false
      },
      {
        "real_name": "java:S6205",
        "display_name": "JavaS6205",
        "severity": "info",
        "category": "convention",
        "rule_title": "Switch arrow labels should not use redundant keywords",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Switch Expressions, an arrow label consisting of a block with a single `yield` can be simplified to directly return the value,\nresulting in cleaner code.\n\nSimilarly, for Switch Statements and arrow labels, a `break` in a block is always redundant and should not be used. Furthermore, if the\nresulting block contains only one statement, the curly braces of that block can also be omitted.\n\nThis rule reports an issue when a case of a Switch Expression contains a block with a single `yield` or when a Switch Statement contains\na block with a `break`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 361: Switch Expressions](https://openjdk.java.net/jeps/361) \n",
        "disable": false
      },
      {
        "real_name": "java:S4266",
        "display_name": "JavaS4266",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Stream.collect()\" calls should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using the `Stream` API, call chains should be simplified as much as possible to improve readability and maintainability.\n\nThis rule raises an issue when one of the following substitution can be made:\n      |Original      |Preferred    \n      |`stream.collect(counting())`      |`stream.count()`    \n      |`stream.collect(maxBy(comparator))`      |`stream.max(comparator)`    \n      |`stream.collect(minBy(comparator))`      |`stream.min(comparator)`    \n      |`stream.collect(mapping(mapper))`      |`stream.map(mapper).collect()`    \n      |`stream.collect(reducing(...))`      |`stream.reduce(...)`    \n      |`stream.collect(summingInt(mapper))`      |`stream.mapToInt(mapper).sum()`    \n      |`stream.collect(summingLong(mapper))`      |`stream.mapToLong(mapper).sum()`    \n      |`stream.collect(summingDouble(mapper))`      |`stream.mapToDouble(mapper).sum()`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S6208",
        "display_name": "JavaS6208",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comma-separated labels should be used in Switch with colon case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.\nInstead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will\nresult in a more concise code and improved readability.\n\nThis rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 361: Switch Expressions](https://openjdk.java.net/jeps/361) \n",
        "disable": false
      },
      {
        "real_name": "java:S6202",
        "display_name": "JavaS6202",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Operator \"instanceof\" should be used instead of \"A.class.isInstance()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `instanceof` construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time\nerror will occur in case of incompatible types. The method <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-\">isInstance()</a> from `java.lang.Class`\nworks differently and does type check at runtime only, incompatible types will therefore not be detected early in the developement, potentially\nresulting in dead code. The `isInstance()` method should only be used in dynamic cases when the `instanceof` operator can't be\nused.\n\nThis rule raises an issue when `isInstance()` is used and could be replaced with an `instanceof` check.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4144",
        "display_name": "JavaS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into account.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S6203",
        "display_name": "JavaS6203",
        "severity": "info",
        "category": "convention",
        "rule_title": "Text blocks should not be used in complex expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,\nthey should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a\nvariable or a field.\n\nThis rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n * [JEP 378: Text Blocks](https://openjdk.java.net/jeps/378)\n\n * [Programmer's Guide To Text Blocks](https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html), by Jim Laskey and Stuart\nMarks\n",
        "disable": false
      },
      {
        "real_name": "java:S4143",
        "display_name": "JavaS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Map values should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "java:S3052",
        "display_name": "JavaS3052",
        "severity": "info",
        "category": "convention",
        "rule_title": "Fields should not be initialized to default values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`final` fields are ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S888",
        "display_name": "JavaS888",
        "severity": "error",
        "category": "convention",
        "rule_title": "Equality operators should not be used in \"for\" loop termination conditions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting `for` loop termination using an equality operator (`==` and `!=`) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\n\n  -  starts below the ending value and is incremented by 1 on each iteration. \n  -  starts above the ending value and is decremented by 1 on each iteration. \n\nEquality operators are also ignored when the test is against `null`.\n\n## See\n\n  -  [MITRE, CWE-835](http://cwe.mitre.org/data/definitions/835) - Loop with Unreachable Exit Condition ('Infinite Loop') \n  -  [CERT, MSC21-C.](https://wiki.sei.cmu.edu/confluence/x/x9YxBQ) - Use robust loop termination conditions \n",
        "disable": false
      },
      {
        "real_name": "java:S5128",
        "display_name": "JavaS5128",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Bean Validation\" (JSR 380) should be properly configured",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Bean Validation` as per defined by JSR 380 can be triggered programmatically or also executed by the `Bean Validation`\nproviders. However something should tell the `Bean Validation` provider that a variable must be validated otherwise no validation will\nhappen. This can be achieved by annotating a variable with `javax.validation.Valid` and unfortunally it's easy to forget to add this\nannotation on complex Beans.\n\nNot annotating a variable with `@Valid` means `Bean Validation` will not be triggered for this variable, but readers may\noverlook this omission and assume the variable will be validated.\n\nThis rule will run by default on all `Class`'es and therefore can generate a lot of noise. This rule should be restricted to run only on\ncertain layers. For this reason, the \"Restrict Scope of Coding Rules\" feature should be used to check for missing `@Valid` annotations only\non some packages of the application.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Bean Validation 2.0 (JSR 380)](https://beanvalidation.org/2.0/spec/) \n",
        "disable": false
      },
      {
        "real_name": "java:S6213",
        "display_name": "JavaS6213",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Restricted Identifiers should not be used as Identifiers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven if it is technically possible, [Restricted Identifiers](https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8)\nshould not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.\n\nNote that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.\n\nThis rule reports an issue when restricted identifiers:\n\n  -  var \n  -  yield \n  -  record \n\nare used as identifiers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JLS16, 3.8: Identifiers](https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8) \n",
        "disable": false
      },
      {
        "real_name": "java:S4036",
        "display_name": "JavaS4036",
        "severity": "info",
        "category": "security",
        "rule_title": "Searching OS commands in PATH is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen executing an OS command and unless you specify the full path to the executable, then the locations in your application's `PATH`\nenvironment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in\n`PATH` is a directory under his control. \n\n## Ask Yourself Whether\n\n  -  The directories in the PATH environment variable may be defined by not trusted entities. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nFully qualified/absolute path should be used to specify the OS command to execute.\n\n## Sensitive Code Example\n\nThe full path of the command is not specified and thus the executable will be searched in all directories listed in the `PATH`\nenvironment variable:\n\n## Compliant Solution\n\nThe command is defined by its full path:\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-426](https://cwe.mitre.org/data/definitions/426.html) - Untrusted Search Path \n  -  [MITRE, CWE-427](https://cwe.mitre.org/data/definitions/427.html) - Uncontrolled Search Path Element \n",
        "disable": false
      },
      {
        "real_name": "java:S6212",
        "display_name": "JavaS6212",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local-Variable Type Inference should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Java 10 [Local-Variable Type Inference](https://openjdk.java.net/jeps/286) was introduced. It allows you to omit the expected type of\na variable by declaring it with the `var` keyword. \n\nWhile it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the\nright in an assignment, using the `var` will result in a more concise code.\n\nThis rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [JEP 286: Local-Variable Type Inference](https://openjdk.java.net/jeps/286) \n",
        "disable": false
      },
      {
        "real_name": "java:S4276",
        "display_name": "JavaS4276",
        "severity": "info",
        "category": "convention",
        "rule_title": "Functional Interfaces should be as specialised as possible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `java.util.function` package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance `IntFunction&lt;Foo&gt;`\nshould be preferred over `Function&lt;Integer, Foo&gt;`.\n\nThis rule raises an issue when any of the following substitution is possible:\n      |Current Interface      |Preferred Interface    \n      |`Function&lt;Integer, R&gt;`      |`IntFunction&lt;R&gt;`    \n      |`Function&lt;Long, R&gt;`      |`LongFunction&lt;R&gt;`    \n      |`Function&lt;Double, R&gt;`      |`DoubleFunction&lt;R&gt;`    \n      |`Function&lt;Double,Integer&gt;`       | `DoubleToIntFunction`     \n      |`Function&lt;Double,Long&gt;`       | `DoubleToLongFunction`     \n      |`Function&lt;Long,Double&gt;`       | `LongToDoubleFunction`     \n      |`Function&lt;Long,Integer&gt;`       | `LongToIntFunction`    \n      |`Function&lt;R,Integer&gt;`       | `ToIntFunction&lt;R&gt;`    \n      |`Function&lt;R,Long&gt;`       | `ToLongFunction&lt;R&gt;`    \n      |`Function&lt;R,Double&gt;`       | `ToDoubleFunction&lt;R&gt;`    \n      |`Function&lt;T,T&gt;`       | `UnaryOperator&lt;T&gt;`     \n      |`BiFunction&lt;T,T,T&gt;`       | `BinaryOperator&lt;T&gt;`     \n      |`Consumer&lt;Integer&gt;`      |`IntConsumer`    \n      |`Consumer&lt;Double&gt;`      |`DoubleConsumer`    \n      |`Consumer&lt;Long&gt;`      |`LongConsumer`    \n      |`BiConsumer&lt;T,Integer&gt;`       | `ObjIntConsumer&lt;T&gt;`    \n      |`BiConsumer&lt;T,Long&gt;`       | `ObjLongConsumer&lt;T&gt;`    \n      |`BiConsumer&lt;T,Double&gt;`       | `ObjDoubleConsumer&lt;T&gt;`    \n      |`Predicate&lt;Integer&gt;`      |`IntPredicate`    \n      |`Predicate&lt;Double&gt;`      |`DoublePredicate`    \n      |`Predicate&lt;Long&gt;`      |`LongPredicate`    \n      |`Supplier&lt;Integer&gt;`      |`IntSupplier`    \n      |`Supplier&lt;Double&gt;`      |`DoubleSupplier`    \n      |`Supplier&lt;Long&gt;`      |`LongSupplier`    \n      |`Supplier&lt;Boolean&gt;`       | `BooleanSupplier`    \n      |`UnaryOperator&lt;Integer&gt;`      |`IntUnaryOperator`    \n      |`UnaryOperator&lt;Double&gt;`      |`DoubleUnaryOperator`    \n      |`UnaryOperator&lt;Long&gt;`      |`LongUnaryOperator`    \n      |`BinaryOperator&lt;Integer&gt;`       | `IntBinaryOperator`    \n      |`BinaryOperator&lt;Long&gt;`       | `LongBinaryOperator`    \n      |`BinaryOperator&lt;Double&gt;`       | `DoubleBinaryOperator`    \n      |`Function&lt;T, Boolean&gt;`       | `Predicate&lt;T&gt;`    \n      |`BiFunction&lt;T,U,Boolean&gt;`       | `BiPredicate&lt;T,U&gt;`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S4034",
        "display_name": "JavaS4034",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Stream\" call chains should be simplified when possible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using the `Stream` API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.\n\nThis rule raises an issue when one of the following substitution is possible:\n      |Original      |Preferred    \n      |`stream.filter(predicate).findFirst().isPresent()`      |`stream.anyMatch(predicate)`    \n      |`stream.filter(predicate).findAny().isPresent()`      |`stream.anyMatch(predicate)`    \n      |`!stream.anyMatch(predicate)`      |`stream.noneMatch(predicate)`    \n      |`!stream.anyMatch(x -&gt; !(...))`      |`stream.allMatch(...)`    \n      |`stream.map(mapper).anyMatch(Boolean::booleanValue)`      |`stream.anyMatch(predicate)`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3066",
        "display_name": "JavaS3066",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"enum\" fields should not be publicly mutable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`enum`s are generally thought of as constant, but an `enum` with a `public` field or `public` setter is\nnon-constant. Ideally fields in an `enum` are `private` and set in the constructor, but if that's not possible, their visibility\nshould be reduced as much as possible.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3067",
        "display_name": "JavaS3067",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"getClass\" should not be used for synchronization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`getClass` should not be used for synchronization in non-`final` classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the `synchronized`\nkeyword.\n\nInstead, hard code the name of the class on which to synchronize or make the class `final`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, LCK02-J.](https://wiki.sei.cmu.edu/confluence/x/qTdGBQ) - Do not synchronize on the class object returned by getClass() \n",
        "disable": false
      },
      {
        "real_name": "java:S5247",
        "display_name": "JavaS5247",
        "severity": "warning",
        "category": "security",
        "rule_title": "Disabling auto-escaping in template engines is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo reduce the risk of cross-site scripting attacks, templating systems, such as `Twig`, `Django`, `Smarty`,\n`Groovy's template engine`, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).\n\nAuto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into [html entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity)) will not be relevant\nwhen variables are used in a [html attribute](https://en.wikipedia.org/wiki/HTML_attribute) because '`:`' character is not\nescaped and thus an attack as below is possible:\n\n## Ask Yourself Whether\n\n  <li> Templates are used to render web content and\n    <ul>\n      -  dynamic variables in templates come from untrusted locations or are user-controlled inputs \n      -  there is no local mechanism in place to sanitize or validate the inputs. \n    \nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nEnable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.\n\n## Sensitive Code Example\n\nWith [JMustache by samskivert](https://github.com/samskivert/jmustache):\n\nWith [Freemarker](https://freemarker.apache.org/):\n\n## Compliant Solution\n\nWith [JMustache by samskivert](https://github.com/samskivert/jmustache):\n\nWith [Freemarker](https://freemarker.apache.org/). See <a\nhref=\"https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#setAutoEscapingPolicy-int-\">\"setAutoEscapingPolicy\"\ndocumentation</a> for more details. \n\n## See\n\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [MITRE, CWE-79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> [MITRE, CWE-80](https://cwe.mitre.org/data/definitions/80.html) - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> [MITRE, CWE-83](https://cwe.mitre.org/data/definitions/83.html) - Improper Neutralization of Script in Attributes in a Web Page\n  </li>\n  -  [MITRE, CWE-84](https://cwe.mitre.org/data/definitions/84.html) - Improper Neutralization of Encoded URI Schemes in a Web Page \n",
        "disable": false
      },
      {
        "real_name": "java:S4032",
        "display_name": "JavaS4032",
        "severity": "info",
        "category": "convention",
        "rule_title": "Packages containing only \"package-info.java\" should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value. \n",
        "disable": false
      },
      {
        "real_name": "java:S2096",
        "display_name": "JavaS2096",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"main\" should not \"throw\" anything",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason for a `main` method to `throw` anything. After all, what's going to catch it? \n\nInstead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and `exit` with a non-zero (i.e. non-success) exit code if necessary.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S3064",
        "display_name": "JavaS3064",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Assignment of lazy-initialized members should be the last step with double-checked locking",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDouble-checked locking can be used for lazy initialization of `volatile` fields, but only if field assignment is the last step in the\n`synchronized` block. Otherwise you run the risk of threads accessing a half-initialized object.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, LCK10-J.](https://wiki.sei.cmu.edu/confluence/x/6zdGBQ) - Use a correct form of the double-checked locking idiom \n\n### See Also\n\n  -  {rule:java:S2168} - Double-checked locking should not be used \n",
        "disable": false
      },
      {
        "real_name": "java:S3065",
        "display_name": "JavaS3065",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Min and max used in combination should not always return the same value",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen using `Math.min()` and `Math.max()` together for bounds checking, it's important to feed the right operands to each\nmethod. `Math.min()` should be used with the **upper** end of the range being checked, and `Math.max()` should be\nused with the **lower** end of the range. Get it backwards, and the result will always be the same end of the range.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nSwapping method `min()` and `max()` invocations without changing parameters.\n\nor swapping bounds `UPPER` and `LOWER` used as parameters without changing the invoked methods.\n",
        "disable": false
      },
      {
        "real_name": "java:S5361",
        "display_name": "JavaS5361",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"String#replace\" should be preferred to \"String#replaceAll\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe underlying implementation of `String::replaceAll` calls the `java.util.regex.Pattern.compile()` method each time it is\ncalled even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.\n\nWhen `String::replaceAll` is used, the first argument should be a real regular expression. If it’s not the case,\n`String::replace` does exactly the same thing as `String::replaceAll` without the performance drawback of the regex.\n\nThis rule raises an issue for each `String::replaceAll` used with a `String` as first parameter which doesn’t contains\nspecial regex character or pattern.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr, with a regex:\n\n## See\n\n  -  {rule:java:S4248} - Regex patterns should not be created needlessly \n",
        "disable": false
      },
      {
        "real_name": "java:S2097",
        "display_name": "JavaS2097",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"equals(Object obj)\" should test argument type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause the `equals` method takes a generic `Object` as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S2094",
        "display_name": "JavaS2094",
        "severity": "info",
        "category": "convention",
        "rule_title": "Classes should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n`interface`. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEmpty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.\n",
        "disable": false
      },
      {
        "real_name": "java:S4275",
        "display_name": "JavaS4275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Getters and setters should access the expected fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGetters and setters provide a way to enforce encapsulation by providing `public` methods that give controlled access to\n`private` fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed\ngetters and setters, which can result in the wrong field being accessed by a getter or setter.\n\nThis rule raises an issue in any of these cases:\n\n  -  A setter does not update the field with the corresponding name. \n  -  A getter does not access the field with the corresponding name. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "java:S5122",
        "display_name": "JavaS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\nJava servlet framework:\n\nSpring MVC framework:\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a>\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a>\n\n## Compliant Solution\n\nJava Servlet framework:\n\nSpring MVC framework:\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a>\n\n<a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a>\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S2095",
        "display_name": "JavaS2095",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Resources should be closed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConnections, streams, files, and other classes that implement the `Closeable` interface or its super-interface,\n`AutoCloseable`, needs to be closed after use. Further, that `close` call must be made in a `finally` block otherwise\nan exception could keep the call from being made. Preferably, when class implements `AutoCloseable`, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.\n\nFailure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box the application\nis on to their knees.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nInstances of the following classes are ignored by this rule because `close` has no effect:\n\n  -  `java.io.ByteArrayOutputStream` \n  -  `java.io.ByteArrayInputStream` \n  -  `java.io.CharArrayReader` \n  -  `java.io.CharArrayWriter` \n  -  `java.io.StringReader` \n  -  `java.io.StringWriter` \n\nJava 7 introduced the try-with-resources statement, which implicitly closes `Closeables`. All resources opened in a try-with-resources\nstatement are ignored by this rule. \n\n## See\n\n  -  [MITRE, CWE-459](http://cwe.mitre.org/data/definitions/459.html) - Incomplete Cleanup \n  -  [MITRE, CWE-772](http://cwe.mitre.org/data/definitions/772.html) - Missing Release of Resource after Effective Lifetime \n  -  [CERT, FIO04-J.](https://wiki.sei.cmu.edu/confluence/x/vjdGBQ) - Release resources when they are no longer needed \n  -  [CERT, FIO42-C.](https://wiki.sei.cmu.edu/confluence/x/QtUxBQ) - Close files when they are no longer needed \n  -  [Try With Resources](https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html) \n",
        "disable": false
      },
      {
        "real_name": "java:S4274",
        "display_name": "JavaS4274",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Asserts should not be used to check the parameters of a public method",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `assert` is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, `assert`s that fail throw `AssertionError`s, rather\nthan throwing some type of `Exception`. Throwing `Error`s is completely outside of the normal realm of expected\n`catch`/`throw` behavior in normal programs.\n\nThis rule raises an issue when a `public` method uses one or more of its parameters with `assert`s.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[Programming With Assertions](https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html)\n",
        "disable": false
      },
      {
        "real_name": "java:S2092",
        "display_name": "JavaS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content) or not (ie\n  HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\nIf you create a security-sensitive cookie in your JAVA code:\n\nBy default the [`secure`](https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)) flag is set\nto **false:**\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "java:S899",
        "display_name": "JavaS899",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Return values should not be ignored when they contain the operation status code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.\n\nThis rule raises an issue when the return values of the following are ignored:\n\n  -  `java.io.File` operations that return a status code (except `mkdirs`) \n  -  `Iterator.hasNext()` \n  -  `Enumeration.hasMoreElements()` \n  -  `Lock.tryLock()` \n  -  non-void `Condition.await*` methods \n  -  `CountDownLatch.await(long, TimeUnit)` \n  -  `Semaphore.tryAcquire` \n  -  `BlockingQueue`: `offer`, `remove` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n  -  [CERT, FIO02-J.](https://wiki.sei.cmu.edu/confluence/x/TTZGBQ) - Detect and handle file-related errors \n  -  [MITRE, CWE-754](http://cwe.mitre.org/data/definitions/754) - Improper Check for Unusual Exceptional Conditions \n",
        "disable": false
      },
      {
        "real_name": "java:S2093",
        "display_name": "JavaS2093",
        "severity": "error",
        "category": "convention",
        "rule_title": "Try-with-resources should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJava 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older `try`/`catch`/`finally` version.\n\nThis rule checks that `close`-able resources are opened in a try-with-resources statement.\n\n**Note** that this rule is automatically disabled when the project's `sonar.java.source` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  <li> [CERT, ERR54-J.](https://wiki.sei.cmu.edu/confluence/x/6DZGBQ) - Use a try-with-resources statement to safely handle closeable\n  resources </li>\n",
        "disable": false
      }
    ]
  }
]