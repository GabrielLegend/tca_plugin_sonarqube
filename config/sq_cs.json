[
  {
    "name": "tca_plugin_sonarqube_cs",
    "display_name": "SonarQubeCs",
    "description": "C# static analyzer(need compile)",
    "license": "LGPL-3.0",
    "task_processes": [
      "analyze",
      "datahandle"
    ],
    "scan_app": "codelint",
    "scm_url": "https://github.com/GabrielLegend/tca_plugin_sonarqube.git",
    "run_cmd": "python src/sq_cs.py",
    "envs": "python_version = 3",
    "build_flag": true,
    "checkrule_set": [
      {
        "real_name": "common-cs:DuplicatedBlocks",
        "display_name": "CommonCsDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-cs:FailedUnitTests",
        "display_name": "CommonCsFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-cs:SkippedUnitTests",
        "display_name": "CommonCsSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-cs:InsufficientCommentDensity",
        "display_name": "CommonCsInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-cs:InsufficientLineCoverage",
        "display_name": "CommonCsInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-cs:InsufficientBranchCoverage",
        "display_name": "CommonCsInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2225",
        "display_name": "CsharpsquidS2225",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ToString()\" method should not return null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `ToString()` on an object should always return a string. Returning `null` instead contravenes the method's implicit\ncontract.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE CWE-476](http://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2346",
        "display_name": "CsharpsquidS2346",
        "severity": "error",
        "category": "convention",
        "rule_title": "Flags enumerations zero-value members should be named \"None\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConsistent use of \"None\" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other\nstate, since there is no way to check that the bit `0` is set.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2589",
        "display_name": "CsharpsquidS2589",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Boolean expressions should not be gratuitous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570) - Expression is Always False \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2223",
        "display_name": "CsharpsquidS2223",
        "severity": "error",
        "category": "convention",
        "rule_title": "Non-constant static fields should not be visible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `static` field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads\nneeds synchronization with `lock`s. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best\nsuited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked `readonly` or\nconverted to constants.\n\n## Noncompliant Code Example\n\nor\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2344",
        "display_name": "CsharpsquidS2344",
        "severity": "info",
        "category": "convention",
        "rule_title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3433",
        "display_name": "CsharpsquidS3433",
        "severity": "error",
        "category": "convention",
        "rule_title": "Test method signatures should be correct",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method is detected as test method if marked with one of the following attributes `[TestMethod]` or `[DataTestMethod]` (for\nmstest), `[Fact]` or `[Theory]` (for xunit) or `[Test]`, `[TestCase]`, `[TestCaseSource]` or\n`[Theory]` (for nunit). However, whether or not they have a test attribute, non-`public` methods are not recognized as tests,\nand therefore not executed. Neither are `async` `void` methods, or methods with generics anywhere in their signatures. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAccessibility is ignored for xUnit `Fact` test methods, since they do not need to be `public`.\n\n`[Theory]` test methods in xUnit and `[TestCase]` and `[TestCaseSource]` test methods in nunit can be generic.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1135",
        "display_name": "CsharpsquidS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2345",
        "display_name": "CsharpsquidS2345",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Flags enumerations should explicitly initialize all their members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFlags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to\n0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or\noperator in a useful way.\n\nInstead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three\nmembers of the enumeration is not initialized.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4524",
        "display_name": "CsharpsquidS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be first or last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nfirst or the last one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1134",
        "display_name": "CsharpsquidS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3431",
        "display_name": "CsharpsquidS3431",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"[ExpectedException]\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that's not usually the case with\nthe `[ExpectedException]` attribute since an exception could be thrown from almost any line in the method.\n\nThis rule detects MSTest and NUnit `ExpectedException` attribute.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThis rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2221",
        "display_name": "CsharpsquidS2221",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Exception\" should not be caught when not required by called methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCatching `System.Exception` seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception\ntypes, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively\neach exception type should be in a separate `catch` block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe final option is to catch `System.Exception` and `throw` it in the last statement in the `catch` block. This is\nthe least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.\n\n## See\n\n  -  [MITRE, CWE-396](http://cwe.mitre.org/data/definitions/396.html) - Declaration of Catch for Generic Exception \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2342",
        "display_name": "CsharpsquidS2342",
        "severity": "info",
        "category": "convention",
        "rule_title": "Enumeration types should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all `enum` names match a provided regular\nexpression.\n\nThe default configuration is the one recommended by Microsoft:\n\n  -  Pascal casing, starting with an upper case character, e.g. BackColor \n  -  Short abbreviations of 2 letters can be capitalized, e.g. GetID \n  -  Longer abbreviations need to be lower case, e.g. GetHtml \n  -  If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) \n\n## Noncompliant Code Example\n\nWith the default regular expression for non-flags enums: `^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$`\n\nWith the default regular expression for flags enums: `^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2583",
        "display_name": "CsharpsquidS2583",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Conditionally executed code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConditional expressions which are always `true` or `false` can lead to dead code. Such code is always buggy and should never\nbe used in production.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will not raise an issue in either of these cases:\n\n  -  When the condition is a single `const bool` \n\n  -  When the condition is the literal `true` or `false`. \n\nIn these cases it is obvious the code is as intended.\n\n## See\n\n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2115",
        "display_name": "CsharpsquidS2115",
        "severity": "error",
        "category": "security",
        "rule_title": "A secure password should be used when connecting to a database",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen relying on the password authentication mode for the database connection, a secure password should be chosen.\n\nThis rule raises an issue when an empty password is used.\n\n## Noncompliant Code Example\n\nIn [Web.config](https://docs.microsoft.com/en-us/troubleshoot/aspnet/create-web-config)\n\n## Compliant Solution\n\nIn [Web.config](https://docs.microsoft.com/en-us/troubleshoot/aspnet/create-web-config)\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html) - Broken\n  Authentication </li>\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [MITRE, CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2357",
        "display_name": "CsharpsquidS2357",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Fields should be private",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n\n## Exceptions\n\n`struct`s are ignored, as are `static` and `const` fields in classes. \n\nFurther, an issue is only raised when the real accessibility is `public`, taking into account the class accessibility.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1147",
        "display_name": "CsharpsquidS1147",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exit methods should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `Environment.Exit(exitCode)` or `Application.Exit()` terminates the process and returns an exit code to the operating\nsystem..\n\nEach of these methods should be used with extreme care, and only when the intent is to stop the whole application.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThese methods are ignored inside `Main`.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2479",
        "display_name": "CsharpsquidS2479",
        "severity": "error",
        "category": "convention",
        "rule_title": "Whitespace and control characters in string literals should be explicit",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNon-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII `\\n,\\t,`... or Unicode `U+000D, U+0009,`...).\n\nThis rule raises an issue when the following characters are seen in a literal string:\n\n  -  [ASCII control character](https://en.wikipedia.org/wiki/ASCII#Control_characters). (character index &lt; 32 or = 127) \n  -  Unicode [whitespace characters](https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace). \n  -  Unicode [C0 control characters](https://en.wikipedia.org/wiki/C0_and_C1_control_codes) \n  -  Unicode characters `U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029` \n\nNo issue will be raised on the simple space character. Unicode `U+0020`, ASCII 32.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nVerbatim string literals have no escape character mechanism.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3447",
        "display_name": "CsharpsquidS3447",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of `ref` or `out` in combination with `[Optional]` is both confusing and contradictory.\n`[Optional]` indicates that the parameter doesn't have to be provided, while `out` and `ref` mean that the parameter\nwill be used to return data to the caller (`ref` additionally indicates that the parameter may also be used to pass data into the\nmethod).\n\nThus, making it `[Optional]` to provide the parameter in which you will be passing back the method results doesn't make sense. In fact,\nthe compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the `[Optional]` parameter has been\nomitted, not the source of the problem, the method declaration. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2234",
        "display_name": "CsharpsquidS2234",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameters should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3444",
        "display_name": "CsharpsquidS3444",
        "severity": "info",
        "category": "convention",
        "rule_title": "Interfaces should not simply inherit from base interfaces with colliding members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived\ninterface will result in the compiler error `CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'`.\n\nSo instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the\nambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:\n\n  -  renaming the member in one of the base interfaces to remove the collision \n  -  also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2114",
        "display_name": "CsharpsquidS2114",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collections should not be passed as arguments to their own methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. \n\nFurther, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in an\nunexpected behavior. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3445",
        "display_name": "CsharpsquidS3445",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exceptions should not be explicitly rethrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen rethrowing an exception, you should do it by simply calling `throw;` and not `throw exc;`, because the stack trace is\nreset with the second syntax, making debugging a lot harder.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1144",
        "display_name": "CsharpsquidS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused private types or members should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` or `internal` types or `private` members that are never executed or referenced are dead code:\nunnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to\nunderstand the program and preventing bugs from being introduced.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise issues on:\n\n  -  Empty constructors \n  -  Attributed members \n  -  `Main` method \n  -  Methods with event handler signature `void Foo(object, EventArgs)` that are declared in partial class \n  -  Empty serialization constructor on type with `System.SerializableAttribute` attribute. \n  -  Internals in assemblies that have a `System.Runtime.CompilerServices.InternalsVisibleToAttribute` attribute. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3442",
        "display_name": "CsharpsquidS3442",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"abstract\" classes should not have \"public\" constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince `abstract` classes can't be instantiated, there's no point in their having `public` or `internal`\nconstructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a\nconstructor, but make that constructor `private` or `protected`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1264",
        "display_name": "CsharpsquidS1264",
        "severity": "info",
        "category": "convention",
        "rule_title": "A \"while\" loop should be used instead of a \"for\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the condition expression is defined in a `for` loop, and the initialization and increment expressions are missing, a\n`while` loop should be used instead to increase readability. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3440",
        "display_name": "CsharpsquidS3440",
        "severity": "info",
        "category": "convention",
        "rule_title": "Variables should not be checked against the values they're about to be assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the\nassignment.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nProperties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to\nundesired side effects.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3443",
        "display_name": "CsharpsquidS3443",
        "severity": "error",
        "category": "convention",
        "rule_title": "Type should not be examined on \"System.Type\" instances",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you call `GetType()` on a `Type` variable, the return value will always be `typeof(System.Type)`. So there's no\nreal point in making that call. The same applies to passing a type argument to `IsInstanceOfType`. In both cases the results are entirely\npredictable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3441",
        "display_name": "CsharpsquidS3441",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant property names should be omitted in anonymous classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's\nproperty name and the assignment operator.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S881",
        "display_name": "CsharpsquidS881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n\n  -  It can significantly impair the readability of the code. \n  -  It introduces additional side effects into a statement, with the potential for undefined behavior. \n  -  It is safer to use these operators in isolation from any other arithmetic operators. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nThe following sequence is clearer and therefore safer:\n\n## See\n\n  -  [CERT, EXP30-C.](https://wiki.sei.cmu.edu/confluence/x/StYxBQ) - Do not depend on the order of evaluation for side effects \n  -  [CERT, EXP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/IXw-BQ) - Do not depend on the order of evaluation for side effects \n  <li> [CERT, EXP05-J.](https://wiki.sei.cmu.edu/confluence/x/NDdGBQ) - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3329",
        "display_name": "CsharpsquidS3329",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher Block Chaining IV's should be unpredictable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is used to randomize the encryption, ie under a given\nkey the same plaintext doesn't always produce the same ciphertext. The IV doesn't need to be secret but should be unpredictable to avoid\n\"Chosen-Plaintext Attack\".\n\nTo generate Initialization Vectors, NIST recommends to use a secure random number generator.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-329](http://cwe.mitre.org/data/definitions/329) - CWE-329: Not Using an Unpredictable IV with CBC Mode \n  -  [MITRE, CWE-330](http://cwe.mitre.org/data/definitions/330) - Use of Insufficiently Random Values \n  <li> [NIST, SP-800-38A](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf) - Recommendation for Block Cipher\n  Modes of Operation </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3449",
        "display_name": "CsharpsquidS3449",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Right operands of shift operators should be integers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNumbers can be shifted with the `&lt;&lt;` and `&gt;&gt;` operators, but the right operand of the operation needs to be an\n`int` or a type that has an implicit conversion to `int`. However, with `dynamic`, the compiler's type checking is\nturned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to `int` at runtime,\nthen a `RuntimeBinderException` will be raised.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3776",
        "display_name": "CsharpsquidS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of methods should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3655",
        "display_name": "CsharpsquidS3655",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Empty nullable value should not be accessed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNullable value types can hold either a value or `null`. The value held in the nullable type can be accessed with the `Value`\nproperty, but `.Value` throws an `InvalidOperationException` when the value is `null`. To avoid the exception, a\nnullable type should always be tested before `.Value` is accessed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  -  [MITRE, CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3897",
        "display_name": "CsharpsquidS3897",
        "severity": "info",
        "category": "convention",
        "rule_title": "Classes that provide \"Equals(<T>)\" should implement \"IEquatable<T>\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `IEquatable&lt;T&gt;` interface has only one method in it: `Equals(&lt;T&gt;)`. If you've already written\n`Equals(T)`, there's no reason not to explicitly implement `IEquatable&lt;T&gt;`. Doing so expands the utility of your class by\nallowing it to be used where an `IEquatable` is called for.\n\n****Note**: Classes that implement `IEquatable&lt;T&gt;` should also be `sealed`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3898",
        "display_name": "CsharpsquidS3898",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Value types should implement \"IEquatable<T>\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you're using a `struct`, it is likely because you're interested in performance. But by failing to implement\n`IEquatable&lt;T&gt;` you're loosing performance when comparisons are made because without `IEquatable&lt;T&gt;`, boxing and\nreflection are used to make comparisons. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2325",
        "display_name": "CsharpsquidS2325",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods and properties that don't access instance data should be static",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMethods and properties that don't access instance data can be `static` to prevent any misunderstanding about the contract of the method.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with the following names are excluded because they can't be made `static`:\n\n  -  Application_AuthenticateRequest \n  -  Application_BeginRequest \n  -  Application_End \n  -  Application_EndRequest \n  -  Application_Error \n  -  Application_Init \n  -  Application_Start \n  -  Session_End \n  -  Session_Start \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2688",
        "display_name": "CsharpsquidS2688",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"NaN\" should not be used in comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NaN` is not equal to anything, even itself. Testing for equality or inequality against `NaN` will yield predictable results,\nbut probably not the ones you want. \n\nInstead, the best way to see whether a variable is equal to `NaN` is to use `Number.isNaN()`, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since `NaN !== NaN`, when `a !== a`, you know it must equal `NaN`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, NUM07-J.](https://wiki.sei.cmu.edu/confluence/x/wzdGBQ) - Do not attempt comparisons with NaN \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2201",
        "display_name": "CsharpsquidS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.\n\nThis rule raises an issue when the results of the following methods are ignored:\n\n  -  LINQ method, \n  -  `[Pure]` method, \n  <li> any method on `string`, `int`, ..., `System.Collections.Immutable.ImmutableArray&lt;T&gt;`,\n  `ImmutableHashSet&lt;T&gt;`, ... </li>\n\nNotes:\n\n  <li> although `string.Intern` has a side effect, ignoring its return value is still suspicious as it is the only reference ensured to\n  point to the intern pool. </li>\n  -  Link methods can have side effects if they are misused. Example: \n\nSuch code should be rewritten as a normal loop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't report issues on method calls with `out` or `ref` arguments.\n\n## See\n\n  -  [CERT, EXP12-C.](https://wiki.sei.cmu.edu/confluence/x/mtYxBQ) - Do not ignore values returned by functions \n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3532",
        "display_name": "CsharpsquidS3532",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty \"default\" clauses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `default` clause should take appropriate action. Having an empty `default` is a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\n`default` clauses containing only a comment are ignored with the assumption that they are empty on purpose and the comment documents\nwhy.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1110",
        "display_name": "CsharpsquidS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2681",
        "display_name": "CsharpsquidS2681",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiline blocks should be enclosed in curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCurly braces can be omitted from a one-line block, such as with an `if` statement or `for` loop, but doing so can be\nmisleading and induce bugs.\n\nThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\n\nNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-483](http://cwe.mitre.org/data/definitions/483.html) - Incorrect Block Delimitation \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4502",
        "display_name": "CsharpsquidS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1118",
        "display_name": "CsharpsquidS1118",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Utility classes should not have public constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUtility classes, which are collections of `static` members, are not meant to be instantiated.\n\nC# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n`protected` constructor should be defined if you wish to subclass this utility class. Or the `static` keyword should be added to\nthe class declaration to prevent subclassing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2328",
        "display_name": "CsharpsquidS2328",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"GetHashCode\" should not reference mutable fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`GetHashCode` is used to file an object in a `Dictionary` or `Hashtable`. If `GetHashCode` uses\nnon-`readonly` fields and those fields change after the object is stored, the object immediately becomes mis-filed in the\n`Hashtable`. Any subsequent test to see if the object is in the `Hashtable` will return a false negative.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1117",
        "display_name": "CsharpsquidS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Local variables should not shadow class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4507",
        "display_name": "CsharpsquidS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\nThe .Net Core framework offers multiple features which help during debug.\n`Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage` and\n`Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage` are two of them. Make sure that those features are disabled in\nproduction.\n\nUse `if (env.IsDevelopment())` to disable debug code.\n\n## Sensitive Code Example\n\nThis rule raises issues when the following .Net Core methods are called:\n`Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage`,\n`Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage`. \n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2326",
        "display_name": "CsharpsquidS2326",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused type parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nType parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3415",
        "display_name": "CsharpsquidS3415",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assertion arguments should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe standard assertions library methods such as `AreEqual` and `AreSame` in **MSTest** and\n**NUnit**, or `Equal` and `Same` in **XUnit**, expect the first argument to be the expected value and\nthe second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error\nmessages will be confusing.\n\nThis rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1479",
        "display_name": "CsharpsquidS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of case clauses, it is usually an attempt to map two sets of data. A `Dictionary`\nshould be used instead to make the code more readable and maintainable.\n\n## Noncompliant Code Example\n\nWith a \"Maximum number of case\" set to 4\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores `switch`es over `Enum`s and empty, fall-through cases.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2327",
        "display_name": "CsharpsquidS2327",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"try\" statements with identical \"catch\" and/or \"finally\" blocks should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen multiple, adjacent `try` statements have duplicate `catch` and/or `finally` blocks, they should be merged to\nconsolidate the `catch/finally` logic for cleaner, more readable code. Note that this applies even when there is intervening code outside\nany `try` block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1116",
        "display_name": "CsharpsquidS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty statements should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty statements, i.e. `;`, are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1125",
        "display_name": "CsharpsquidS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2699",
        "display_name": "CsharpsquidS2699",
        "severity": "error",
        "category": "convention",
        "rule_title": "Tests should include assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.\n\nThis rule raises an exception when no assertions from any of the following frameworks are found in a test:\n\n  -  `MSTest` \n  -  `NUnit` \n  -  `XUnit` \n  -  `FluentAssertions` (4.x and 5.x) \n  -  `NSubstitute` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nTo create a custom assertion method declare an attribute with name `AssertionMethodAttribute` and mark the method with it:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2333",
        "display_name": "CsharpsquidS2333",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant modifiers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnnecessary keywords simply clutter the code and should be removed. Specifically:\n\n  -  `partial` on type declarations that are completely defined in one place \n  -  `sealed` on members of `sealed` classes \n  <li> `unsafe` method or block inside construct already marked with `unsafe`, or when there are no `unsafe`\n  constructs in the block </li>\n  -  `checked` and `unchecked` blocks with no integral-type arithmetic operations \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2696",
        "display_name": "CsharpsquidS2696",
        "severity": "error",
        "category": "convention",
        "rule_title": "Instance members should not write to \"static\" fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCorrectly updating a `static` field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. \n\nThis rule raises an issue each time a `static` field is updated from a non-static method or property.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4635",
        "display_name": "CsharpsquidS4635",
        "severity": "error",
        "category": "convention",
        "rule_title": "String offset-based methods should be preferred for finding substrings from offsets",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLooking for a given substring starting from a specified offset can be achieved by such code: `str.Substring(startIndex).IndexOf(char1)`.\nThis works well, but it creates a new `string` for each call to the `Substring` method. When this is done in a loop, a lot of\n`strings` are created for nothing, which can lead to performance problems if `str` is large.\n\nTo avoid performance problems, `string.Substring(startIndex)` should not be chained with the following methods:\n\n  -  `IndexOf` \n  -  `IndexOfAny` \n  -  `LastIndexOf` \n  -  `LastIndexOfAny` \n\nFor each of these methods, another method with an additional parameter is available to specify an offset.\n\nUsing these methods gives the same result while avoiding the creation of additional `String` instances.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1123",
        "display_name": "CsharpsquidS1123",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Obsolete\" attributes should include explanations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `Obsolete` attribute can be applied with or without arguments, but marking something `Obsolete` without including advice\nas to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the\nwarning is encountered.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1244",
        "display_name": "CsharpsquidS1244",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Floating point numbers should not be tested for equality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFloating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a `float` or a `double` through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.\n\nEven simple floating point assignments are not simple:\n\n(Results will vary based on compiler and compiler settings)\n\nTherefore, the use of the equality (`==`) and inequality (`!=`) operators on `float` or `double` values\nis almost always an error.\n\nThis rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1121",
        "display_name": "CsharpsquidS1121",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be made from within sub-expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAssignments inside lambda and delegate expressions are allowed. \n\nFurthermore, the following patterns are also accepted:\n\n## See\n\n  -  [MITRE, CWE-481](http://cwe.mitre.org/data/definitions/481.html) - Assigning instead of Comparing \n  -  [CERT, EXP45-C.](https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ) - Do not perform assignments in selection statements \n  -  [CERT, EXP51-J.](https://wiki.sei.cmu.edu/confluence/x/ITZGBQ) - Do not perform assignments in conditional expressions \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2330",
        "display_name": "CsharpsquidS2330",
        "severity": "error",
        "category": "convention",
        "rule_title": "Array covariance should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArray covariance is the principle that if an implicit or explicit reference conversion exits from type `A` to `B`, then the\nsame conversion exists from the array type `A[]` to `B[]`.\n\nWhile this array conversion can be useful in readonly situations to pass instances of `A[]` where `B[]` is expected, it must\nbe used with care, since assigning an instance of `B` into an array of `A` will cause an `ArrayTypeMismatchException`\nto be thrown at runtime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2692",
        "display_name": "CsharpsquidS2692",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"IndexOf\" checks should not be for positive numbers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost checks against an `IndexOf` value compare it with -1 because 0 is a valid index. Any checks which look for values <code>&gt;\n0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a `string`,\n`List`, or an array, consider using the `Contains` method instead.\n\nThis rule raises an issue when an `IndexOf` value retrieved from a `string`, `List` or array is tested against\n`&gt; 0`.\n\nThis rule also raises an issue when `IndexOfAny`, `LastIndexOf` or `LastIndexOfAny` from a `string` is\ntested against `&gt; 0`\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2219",
        "display_name": "CsharpsquidS2219",
        "severity": "info",
        "category": "convention",
        "rule_title": "Runtime type checking should be simplified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo check the type of an object there are several options:\n\n  -  `expr is SomeType` or `expr.GetType() == typeof(SomeType)` if the type is known at compile time, \n  -  `typeInstance.IsInstanceOfType(expr)` if the type is calculated during runtime. \n\nIf runtime calculated `Type`s need to be compared:\n\n  -  `typeInstance1.IsAssignableFrom(typeInstance2)`. \n\nDepending on whether the type is returned by a `GetType()` or `typeof()` call, the `IsAssignableFrom()` and\n`IsInstanceOfType()` might be simplified. Similarly, if the type is `sealed`, the type comparison with `==` can be\nconverted to an `is` call. Simplifying the calls also make `null` checking unnecessary because both `is` and\n`IsInstanceOfType` performs it already.\n\nFinally, utilizing the most concise language constructs for type checking makes the code more readable, so\n\n  -  `expr as T != null` checks should be simplified to `expr is T`, and \n  -  `expr is T` should be converted to `expr != null`, when `expr` is of type `T`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nCalling `GetType` on an object of `Nullable&lt;T&gt;` type returns the underlying generic type parameter `T`, thus\na comparison with `typeof(Nullable&lt;T&gt;)` can't be simplified to use the `is` operator, which doesn't make difference\nbetween `T` and `T?`.\n\nNo issue is reported on the following expressions:\n\n  -  `expr is T`&nbsp;when either operand of the `is` operator is a value type. In that case CS0183 or CS0184 reports \n  -  `expr is object`, as this is a common and efficient pattern to do null checks \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2339",
        "display_name": "CsharpsquidS2339",
        "severity": "error",
        "category": "convention",
        "rule_title": "Public constant members should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConstant members are copied at compile time to the call sites, instead of being fetched at runtime.\n\nAs an example, say you have a library with a constant `Version` member set to `1.0`, and a client application linked to it.\nThis library is then updated and `Version` is set to `2.0`. Unfortunately, even after the old DLL is replaced by the new one,\n`Version` will still be `1.0` for the client application. In order to see `2.0`, the client application would need to\nbe rebuilt against the new version of the library.\n\nThis means that you should use constants to hold values that by definition will never change, such as `Zero`. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.\n\nThis rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1006",
        "display_name": "CsharpsquidS1006",
        "severity": "error",
        "category": "convention",
        "rule_title": "Method overrides should not change parameter defaults",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDefault arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the\nvalue used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations.\n\nDefault parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented\ninterface. Thus, specifying default values is useless and confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> MISRA C++ 2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,\n  or else shall not specify any default arguments. </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1128",
        "display_name": "CsharpsquidS1128",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused \"using\" should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAlthough unnecessary `using` won't change anything to the produced application, removing them:\n\n  -  Will help readability and maintenance. \n  -  Will help reduce the number of items in the IDE auto-completion list when coding. \n  -  May avoid some name collisions. \n  -  May improve compilation time because the compiler has fewer namespaces to look-up when it resolves types. \n  -  The build will fail if this namespace is removed from the project. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1481",
        "display_name": "CsharpsquidS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nUnused locally created resources in a `using` statement are not reported.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3237",
        "display_name": "CsharpsquidS3237",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"value\" parameters should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn property and indexer `set` methods, and in event `add` and `remove` methods, the implicit `value`\nparameter holds the value the accessor was called with. Not using the `value` means that the accessor ignores the caller's intent which\ncould cause unexpected results at runtime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThis rule doesn't raise an issue when the setter is empty and part of the implementation of an `interface` . The assumption is that this\npart of the interface is not meaningful to that particular implementation. A good example of that would be a \"sink\" logger that discards any logs.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3427",
        "display_name": "CsharpsquidS3427",
        "severity": "error",
        "category": "convention",
        "rule_title": "Method overloads with default parameter values should not overlap",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values\nmakes the matter even harder to understand. \n\nThis rule raises an issue when an overload with default parameter values is hidden by one without the optional parameters. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2148",
        "display_name": "CsharpsquidS2148",
        "severity": "info",
        "category": "convention",
        "rule_title": "Underscores should be used to make large numbers readable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBeginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner\nhas no semantic meaning, but makes it easier for maintainers to understand the code.\n\nThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\n      |Base      | Minimum digits    \n      |binary      | 9     \n      |decimal      | 6     \n      |hexadecimal      | 9     \n\nIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\n\n**Note** that this rule is automatically disabled when the project's `C# version` is lower than `7`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3358",
        "display_name": "CsharpsquidS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ternary operators should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3598",
        "display_name": "CsharpsquidS3598",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "One-way \"OperationContract\" methods should have \"void\" return type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen declaring a Windows Communication Foundation (WCF) `OperationContract` method one-way, that service method won't return any result,\nnot even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return\ntype therefore does not make sense.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule doesn't report if `OperationContractAttribute.AsyncPattern` is set to `true`.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3235",
        "display_name": "CsharpsquidS3235",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant parentheses should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant parentheses are simply wasted keystrokes, and should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3236",
        "display_name": "CsharpsquidS3236",
        "severity": "info",
        "category": "convention",
        "rule_title": "Caller information arguments should not be provided explicitly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCaller information attributes: `CallerFilePathAttribute` and `CallerLineNumberAttribute` provide a way to get information\nabout the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not\nexplicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`CallerMemberName` is not checked to avoid False-Positives with WPF/UWP applications.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2386",
        "display_name": "CsharpsquidS2386",
        "severity": "info",
        "category": "convention",
        "rule_title": "Mutable fields should not be \"public static\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`public static` mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by\nreducing the accessibility of the field or by changing the return type to an immutable type.\n\nThis rule raises issues for `public static` fields with a type inheriting/implementing `System.Array` or\n`System.Collections.Generic.ICollection&lt;T&gt;`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported:\n\n  <li> If the type of the field inherits/implements one (at least) of the following types:\n    <ul>\n      -  `System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;` \n      -  `System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;` \n      -  `System.Collections.Immutable.IImmutableArray&lt;T&gt;` \n      -  `System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;` \n      -  `System.Collections.Immutable.IImmutableList&lt;T&gt;` \n      -  `System.Collections.Immutable.IImmutableSet&lt;T&gt;` \n      -  `System.Collections.Immutable.IImmutableStack&lt;T&gt;` \n      -  `System.Collections.Immutable.IImmutableQueue&lt;T&gt;` \n    \n## See\n\n  -  [MITRE, CWE-582](http://cwe.mitre.org/data/definitions/582.html) - Array Declared Public, Final, and Static \n  -  [MITRE, CWE-607](http://cwe.mitre.org/data/definitions/607.html) - Public Static Final Field References Mutable Object \n  -  [CERT, OBJ01-J.](https://wiki.sei.cmu.edu/confluence/x/LjdGBQ) - Limit accessibility of fields \n  -  [CERT, OBJ13-J.](https://wiki.sei.cmu.edu/confluence/x/VzZGBQ) - Ensure that references to mutable objects are not exposed \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4200",
        "display_name": "CsharpsquidS4200",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Native methods should be wrapped",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNative methods are functions that reside in libraries outside the virtual machine. Being able to call them is useful for interoperability with\napplications and libraries written in other programming languages, in particular when performing platform-specific operations. However doing so comes\nwith extra risks since it means stepping out of the security model of the virtual machine. It is therefore highly recommended to take extra steps,\nlike input validation, when invoking native methods. This is best done by making the native method `private` and by providing a wrapper\nthat performs these extra steps and verifications.\n\nThis rule raises an issue when a native method is declared `public` or its wrapper is too trivial.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3597",
        "display_name": "CsharpsquidS3597",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `ServiceContract` attribute specifies that a class or interface defines the communication contract of a Windows Communication\nFoundation (WCF) service. The service operations of this class or interface are defined by `OperationContract` attributes added to methods.\nIt doesn't make sense to define a contract without any service operations; thus, in a `ServiceContract` class or interface at least one\nmethod should be annotated with `OperationContract`. Similarly, WCF only serves `OperationContract` methods that are defined\ninside `ServiceContract` classes or interfaces; thus, this rule also checks that `ServiceContract` is added to the containing\ntype of `OperationContract` methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5773",
        "display_name": "CsharpsquidS5773",
        "severity": "warning",
        "category": "security",
        "rule_title": "Types allowed to be deserialized should be restricted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuring the deserialization process, the state of an object will be reconstructed from the serialized data stream which can contain dangerous\noperations. \n\nFor example, a well-known attack vector consists in serializing an object of type <code><a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.-ctor?view=netframework-4.8#System_CodeDom_Compiler_TempFileCollection__ctor\">TempFileCollection</a></code>\nwith arbitrary files (defined by an attacker) which will be deleted on the application deserializing this object (when the <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.finalize?view=netframework-4.8\">finalize() </a>method of\nthe TempFileCollection object is called). This kind of types are called \"[gadgets](https://github.com/pwntester/ysoserial.net)\".\n\nInstead of using `BinaryFormatter` and similar serializers, it is recommended to use safer alternatives in most of the cases, such as <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer?view=net-5.0\">XmlSerializer</a> or <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer?view=net-5.0\">DataContractSerializer</a>. If\nit's not possible then try to mitigate the risk by restricting the types allowed to be deserialized:\n\n  <li> by implementing an \"allow-list\" of types, but keep in mind that novel dangerous types are regularly discovered and this protection could be\n  insufficient over time. </li>\n  <li> or/and implementing a tamper protection, such as [message authentication codes](https://en.wikipedia.org/wiki/HMAC) (MAC). This way\n  only objects serialized with the correct MAC hash will be deserialized. </li>\n\n## Noncompliant Code Example\n\nFor <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter?view=netframework-4.8\">BinaryFormatter</a>,\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8\">NetDataContractSerializer</a>,\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8\">SoapFormatter</a>\nserializers:\n\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\">JavaScriptSerializer</a>\nshould not use SimpleTypeResolver or other weak resolvers:\n\n[LosFormatter](https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8) should not be used without\nMAC verification:\n\n## Compliant Solution\n\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter?view=netframework-4.8\">BinaryFormatter</a>,\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8\">NetDataContractSerializer\n</a>, <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8\">SoapFormatter</a>\nserializers should use a binder implementing a whitelist approach to limit types during deserialization (at least one exception should be thrown or a\nnull value returned):\n\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\">JavaScriptSerializer</a>\nshould use a resolver implementing a whitelist to limit types during deserialization (at least one exception should be thrown or a null value\nreturned):\n\n[LosFormatter](https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8) serializer with MAC\nverification:\n\n## See\n\n  <li> [docs.microsoft.com](https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide?s=03) -\n  BinaryFormatter security guide </li>\n  <li> [Are You My Type?](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf) - James Forshaw -\n  BlackHat 2012 </li>\n  -  [BlueHat v17 - Dangerous Contents - Securing .Net Deserialization](https://www.youtube.com/watch?v=oxlD8VWWHE8) \n  -  [Alvaro Muñoz: .NET Serialization: Detecting and Defending Vulnerable Endpoints](https://www.youtube.com/watch?v=qDoBlLwREYk0) \n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n  -  [MITRE, CWE-134](https://cwe.mitre.org/data/definitions/134.html) - Use of Externally-Controlled Format String \n  -  [MITRE, CWE-502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat2) - Risky Resource Management \n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md\">OWASP Deserialization Cheat\n  Sheet</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2387",
        "display_name": "CsharpsquidS2387",
        "severity": "error",
        "category": "convention",
        "rule_title": "Child class fields should not shadow parent class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores same-name fields that are `static` in both the parent and child classes. It also ignores `private` parent\nclass fields, but in all other such cases, the child class field should be renamed.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3234",
        "display_name": "CsharpsquidS3234",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`GC.SuppressFinalize` asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the\ndispose pattern where object finalization is already handled in `IDisposable.Dispose`. However, it has no effect if there is no finalizer\ndefined in the object's type, so using it in such cases is just confusing.\n\nThis rule raises an issue when `GC.SuppressFinalize` is called for objects of `sealed` types without a finalizer.\n\n**Note:** {rule:csharpsquid:S3971} is a stricter version of this rule. Typically it makes sense to activate only one of these 2\nrules.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3353",
        "display_name": "CsharpsquidS3353",
        "severity": "error",
        "category": "convention",
        "rule_title": "Unchanged local variables should be \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a variable that is unchanged after initialization `const` is an indication to future maintainers that \"no this isn't updated,\nand it's not supposed to be\". `const` should be used in these situations in the interests of code clarity.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4201",
        "display_name": "CsharpsquidS4201",
        "severity": "info",
        "category": "convention",
        "rule_title": "Null checks should not be used with \"is\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no need to null test in conjunction with an `is` test. `null` is not an instance of anything, so a null check is\nredundant.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1172",
        "display_name": "CsharpsquidS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused method parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\nThis rule raises an issue when a `private` method of a class/struct takes a parameter without using it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise any issue in the following contexts:\n\n  -  The `this` parameter of extension methods. \n  -  Methods decorated with attributes. \n  -  Empty methods. \n  -  Methods which only throw `NotImplementedException`. \n  -  Main methods. \n  -  `virtual`, `override` methods. \n  -  interface implementations. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5659",
        "display_name": "CsharpsquidS5659",
        "severity": "error",
        "category": "security",
        "rule_title": "JWT should be signed and verified with strong cipher algorithms",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.\n\n  -  Don't use `none` algorithm to sign or verify the validity of a token. \n  -  Don't use a token without verifying its signature before. \n\n## Noncompliant Code Example\n\n[jwt-dotnet](https://github.com/jwt-dotnet/jwt) library:\n\n## Compliant Solution\n\n[jwt-dotnet](https://github.com/jwt-dotnet/jwt) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-347](https://cwe.mitre.org/data/definitions/347.html) - Improper Verification of Cryptographic Signature \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4214",
        "display_name": "CsharpsquidS4214",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"P/Invoke\" methods should not be visible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMethods marked with the `System.Runtime.InteropServices.DllImportAttribute` attribute use Platform Invocation Services to access\nunmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.\n\nThis rule raises an issue when a method declared with `DllImport` is public or protected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4456",
        "display_name": "CsharpsquidS4456",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameter validation in yielding methods should be wrapped",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause of the way `yield` methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown\nduring the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.\n\nTherefore it is recommended to split the method into two: an outer method handling the validation (no longer lazy) and an inner (lazy) method to\nhandle the iteration.\n\nThis rule raises an issue when a method throws any exception derived from `ArgumentException` and contains the `yield`\nkeyword.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4457",
        "display_name": "CsharpsquidS4457",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameter validation in \"async\"/\"await\" methods should be wrapped",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause of the way `async/await` methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen\nonly when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.\n\nTherefore it is recommended to split the method into two: an outer method handling the parameter checks (without being `async/await`)\nand an inner method to handle the iterator block with the `async/await` pattern.\n\nThis rule raises an issue when an `async` method throws any exception derived from `ArgumentException` and contains\n`await` keyword.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3249",
        "display_name": "CsharpsquidS3249",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMaking a `base` call in an overriding method is generally a good idea, but not in `GetHashCode` and `Equals` for\nclasses that directly extend `object` because those methods are based on the object reference. Meaning that no two `objects`\nthat use those `base` methods will ever be equal or have the same hash.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't report on guard conditions checking for reference equality.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3005",
        "display_name": "CsharpsquidS3005",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ThreadStatic\" should not be used on non-static fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a non-`static` class field is annotated with `ThreadStatic`, the code seems to show that the field can have different\nvalues for different calling threads, but that's not the case, since the `ThreadStatic` attribute is simply ignored on\nnon-`static` fields. \n\nSo `ThreadStatic` should either be removed or replaced with a use of the `ThreadLocal&lt;T&gt;` class, which gives a similar\nbehavior for non-`static` fields.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3246",
        "display_name": "CsharpsquidS3246",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Generic type parameters should be co/contravariant when possible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the `out` and\n`in` modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.\n\nThe `out` keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the\nparameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most\nnotable example of this is `IEnumerable&lt;out T&gt;`, which allows the assignment of an `IEnumerable&lt;string&gt;` instance to\nan `IEnumerable&lt;object&gt;` variable, for instance.\n\nThe `in` keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.\nDoing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with\na sub-type. I.e. this is the inversion of covariance. The most notable example of this is the `Action&lt;in T&gt;` delegate, which allows\nthe assignment of an `Action&lt;object&gt;` instance to a `Action&lt;string&gt;` variable, for instance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3247",
        "display_name": "CsharpsquidS3247",
        "severity": "info",
        "category": "convention",
        "rule_title": "Duplicate casts should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause the `is` operator performs a cast if the object is not null, using `is` to check type and then casting the same\nargument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using `as`,\nfollowed by a null-check.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4211",
        "display_name": "CsharpsquidS4211",
        "severity": "warning",
        "category": "security",
        "rule_title": "Members should not have conflicting transparency annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTransparency attributes, `SecurityCriticalAttribute` and `SecuritySafeCriticalAttribute` are used to identify code that\nperforms security-critical operations. The second one indicates that it is safe to call this code from transparent, while the first one does not.\nSince the transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained\nin the first element a class, for instance, with a `SecurityCriticalAttribute` can not contain a method with a\n`SecuritySafeCriticalAttribute`.\n\nThis rule raises an issue when a member is marked with a `System.Security` security attribute that has a different transparency than the\nsecurity attribute of a container of the member.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5547",
        "display_name": "CsharpsquidS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Example\n\nFor [System.Security.Cryptography](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography?view=netcore-3.1) library,\nthese old cryptographic algorithms should no longer be used for any reason:\n\nFor Bouncycastle library, [AESFastEngine has a side channel leak](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-1000339), it\nis possible to gain information about the key used to initialize the cipher:\n\n## Compliant Solution\n\nFor [System.Security.Cryptography](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography?view=netcore-3.1) library,\nit's recommended to use `AesCryptoServiceProvider`:\n\nFor Bouncycastle library, it's recommended to use `AESEngine`:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1067",
        "display_name": "CsharpsquidS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3244",
        "display_name": "CsharpsquidS3244",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Anonymous delegates should not be used to unsubscribe from Events",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the\nprocess of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove **this item** from the subscription\nlist. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added.\nThe result: `NOOP`.\n\nInstead, save the delegate to a variable and use the variable to subscribe and unsubscribe.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5542",
        "display_name": "CsharpsquidS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\n      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. </li>\n      <li> The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block always gets\n      encrypted to the same ciphertext block. This mode should not be used. </li>\n    \n## Noncompliant Code Example\n\n[AesManaged](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesmanaged?view=netframework-4.8) object with\ninsecure mode:\n\n<a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8\">RSACryptoServiceProvider</a>\nobject without OAEP padding:\n\n## Compliant Solution\n\nAES with GCM mode with [bouncycastle](https://www.bouncycastle.org/) library: \n\nAES with GCM mode with [AesGcm](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=netcore-3.0)\nobject: \n\nRSA with OAEP padding with <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8\">RSACryptoServiceProvider</a>\nobject: \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2156",
        "display_name": "CsharpsquidS2156",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"sealed\" classes should not have \"protected\" members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe difference between `private` and `protected` visibility is that child classes can see and use `protected`\nmembers, but they cannot see `private` ones. Since a `sealed` class cannot have children, marking its members\n`protected` is confusingly pointless.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3366",
        "display_name": "CsharpsquidS3366",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"this\" should not be exposed from constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn single-threaded environments, the use of `this` in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\n\nThe classic example is a class with a `static` list of its instances. If the constructor stores `this` in the list, another\nthread could access the object before it's fully-formed. Even when the storage of `this` is the last instruction in the constructor,\nthere's still a danger if the class is not `final`. In that case, the initialization of subclasses won't be complete before\n`this` is exposed.\n\nThis rule raises an issue when `this` is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule ignores instances of assigning `this` directly to a `static` field of the same class because that case is covered\nby {rule:csharpsquid:S3010} .\n\n## See\n\n  <li> [CERT, TSM01-J.](https://wiki.sei.cmu.edu/confluence/x/iDdGBQ) - Do not let the this reference escape during object construction\n  </li>\n  -  [CERT, TSM03-J.](https://wiki.sei.cmu.edu/confluence/x/vzdGBQ) - Do not publish partially initialized objects \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1066",
        "display_name": "CsharpsquidS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3242",
        "display_name": "CsharpsquidS3242",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method parameters should be declared with base types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is\nprovided in the derived type is not requires then that limitation isn't required, and should be removed.\n\nThis rule raises an issue when a method declaration includes a parameter that is a derived type and accesses only members of the base type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4210",
        "display_name": "CsharpsquidS4210",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Windows Forms entry points should be marked with STAThread",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an assembly uses Windows Forms (classes and interfaces from the `System.Windows.Forms` namespace) its entry point should be marked\nwith the `STAThreadAttribute` to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one\nsupported by Windows Forms.\n\nThis rule raises an issue when the entry point (`static void Main` method) of an assembly using Windows Forms is not marked as STA.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1186",
        "display_name": "CsharpsquidS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed. \n  -  It is not yet, or never will be, supported. In this case a `NotSupportedException` should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe following methods are ignored:\n\n  -  empty `virtual` methods, \n  -  empty methods that override an `abstract` method, \n  -  empty overrides in test assemblies. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2275",
        "display_name": "CsharpsquidS2275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Composite format strings should not lead to unexpected behavior at runtime",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n`String.Format`, `StringBuilder.AppendFormat`, `Console.Write`, `Console.WriteLine`,\n`TextWriter.Write`, `TextWriter.WriteLine`, `Debug.WriteLine(String, Object[])`,\n`Trace.TraceError(String, Object[])`, `Trace.TraceInformation(String, Object[])`,\n`Trace.TraceWarning(String, Object[])` and `TraceSource.TraceInformation(String, Object[])`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  No issue is raised if the format string is not a `const`. \n\n  -  No issue is raised if the argument is not an inline creation array. \n\n  -  This rule doesn't check whether the format specifier (defined after the `:`) is actually valid. \n\n## See\n\n  -  [CERT, FIO47-C.](https://www.securecoding.cert.org/confluence/x/wQA1) - Use valid format strings \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4212",
        "display_name": "CsharpsquidS4212",
        "severity": "warning",
        "category": "security",
        "rule_title": "Serialization constructors should be secured",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present\non a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor\nto do this.\n\nThis rule raises an issue when a type implements the `System.Runtime.Serialization.ISerializable` interface, is not a delegate or\ninterface, is declared in an assembly that allows partially trusted callers and has a constructor that takes a\n`System.Runtime.Serialization.SerializationInfo` object and a `System.Runtime.Serialization.StreamingContext` object which is\nnot secured by a security check, but one or more of the regular constructors in the type is secured.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1185",
        "display_name": "CsharpsquidS1185",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overriding members should do more than simply call the same member in the base class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time\nthis is justified is in `sealed` overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides\nof `Equals` and `GetHashCode`.\n\nNOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIf there is an attribute in any level of the overriding chain, then the overridden member is ignored.\n\nIf there is a documentation comment on the overriding method, it will be ignored:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3240",
        "display_name": "CsharpsquidS3240",
        "severity": "info",
        "category": "convention",
        "rule_title": "The simplest possible condition syntax should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the interests of keeping code clean, the simplest possible conditional syntax should be used. That means \n\n  -  using the `??=` operator for a self-assign-if-not-null operation, \n  -  using the `??` operator for an assign-if-not-null operation, and \n  -  using the ternary operator `?:` for assignment to a single variable. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3241",
        "display_name": "CsharpsquidS3241",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods should not return values that are never used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPrivate methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their\ncallers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2368",
        "display_name": "CsharpsquidS2368",
        "severity": "error",
        "category": "convention",
        "rule_title": "Public methods should not have multidimensional array parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to\nuse them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used\ninternally.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3457",
        "display_name": "CsharpsquidS3457",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Composite format strings should be used correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n`String.Format`, `StringBuilder.AppendFormat`, `Console.Write`, `Console.WriteLine`,\n`TextWriter.Write`, `TextWriter.WriteLine`, `Debug.WriteLine(String, Object[])`,\n`Trace.TraceError(String, Object[])`, `Trace.TraceInformation(String, Object[])`,\n`Trace.TraceWarning(String, Object[])` and `TraceSource.TraceInformation(String, Object[])`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  No issue is raised if the format string is not a `const`. \n\n  -  No issue is raised if the argument is not an inline creation array. \n\n  -  This rule doesn't check whether the format specifier (defined after the `:`) is actually valid. \n\n## See\n\n  -  [CERT, FIO47-C.](https://wiki.sei.cmu.edu/confluence/x/J9YxBQ) - Use valid format strings \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3215",
        "display_name": "CsharpsquidS3215",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"interface\" instances should not be cast to concrete types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNeeding to cast from an `interface` to a concrete type indicates that something is wrong with the abstractions in use, likely that\nsomething is missing from the `interface`. Instead of casting to a discrete type, the missing functionality should be added to the\n`interface`. Otherwise there is a risk of runtime exceptions.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nCasting to `object` doesn't raise an issue, because it can never fail.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4423",
        "display_name": "CsharpsquidS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOlder versions of SSL/TLS protocol like \"SSLv3\" have been proven to be insecure.\n\nThis rule raises an issue when an SSL/TLS is configured at application level with an insecure version (ie: a protocol different from \"TLSv1.2\" or\n\"TLSv1.3\").\n\nNo issue is raised when the choice of the SSL/TLS version relies on the OS configuration. Be aware that the latest version of <a\nhref=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/protocols-in-tls-ssl--schannel-ssp-\">Windows 10 and Windows Server 2016 have TLSv1.0 and\nTLSv1.1 enabled by default</a>. Administrators can configure the OS to enforce TLSv1.2 minumum by <a\nhref=\"https://docs.microsoft.com/en-us/windows-server/security/tls/tls-registry-settings\">updateing registry settings</a> or by applying a group\npolicy.\n\n## Noncompliant Code Example\n\nFor [System.Net.Http.HttpClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient)\n\n## Compliant Solution\n\nFor [System.Net.Http.HttpClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient)\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n  <li> <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls\">Transport Layer Security (TLS) best practices with the .NET\n  Framework</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3216",
        "display_name": "CsharpsquidS3216",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"ConfigureAwait(false)\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAfter an `await`ed `Task` has executed, you can continue execution in the original, calling thread or any arbitrary thread.\nUnless the rest of the code needs the context from which the `Task` was spawned, `Task.ConfigureAwait(false)` should be used to\nkeep execution in the `Task` thread to avoid the need for context switching and the possibility of deadlocks.\n\nThis rule raises an issue when code in a class library targeting .Net Framework `await`s a `Task` and continues execution in\nthe original calling thread.\n\nThe rule does not raise for .Net Core libraries as there is no `SynchronizationContext` in .Net Core.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3458",
        "display_name": "CsharpsquidS3458",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty `case` clauses that fall through to the default are useless. Whether or not such a `case` is present, the\n`default` clause will be invoked. Such `case`s simply clutter the code, and should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2245",
        "display_name": "CsharpsquidS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\nAs the `System.Random` class relies on a pseudorandom number generator, it should not be used for security-critical applications or for\nprotecting sensitive data. In such context, the `System.Cryptography.RandomNumberGenerator` class which relies on a cryptographically\nstrong random number generator (RNG) should be used in place.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Only use random number generators which are <a\n  href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">recommended by\n  OWASP</a> or any other trusted organization. </li>\n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3456",
        "display_name": "CsharpsquidS3456",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"string.ToCharArray()\" should not be called redundantly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`ToCharArray` can be omitted when the operation on the array could have been done directly on the string, such as when iterating over\nthe characters in a string, and when accessing a character in a string via an array index. In those cases, explicit `ToCharArray` calls\nshould be omitted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4426",
        "display_name": "CsharpsquidS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic keys should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of cryptographic systems require a sufficient key size to be robust against brute-force attacks.\n\n[NIST recommendations](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf) will be checked for these\nuse-cases:\n\n**Digital Signature Generation** and **Verification:** \n\n  -  p ≥ 2048 AND q ≥ 224 for DSA (`p` is key length and `q` the modulus length) \n  -  n ≥ 2048 for RSA (`n` is the key length) \n\n**Key Agreement**: \n\n  -  p ≥ 2048 AND q ≥ 224 for DH and MQV \n  <li> n ≥ 224 for ECDH and ECMQV (Examples: `secp192r1` is a non-compliant curve (`n` &lt; 224) but `secp224k1` is\n  compliant (`n` &gt;= 224)) </li>\n\n**Symmetric keys**: \n\n  -  key length ≥ 128 bits \n\nThis rule will not raise issues for ciphers that are considered weak (no matter the key size) like `DES`, `Blowfish`.\n\n## Noncompliant Code Example\n\nKeySize property of DSACryptoServiceProvider and RSACryptoServiceProvider does not change the value of underlying KeySize for the algorithm.\nProperty setter is ignored without error and KeySize can be changed only by using constructor overload. See:\n\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.dsacryptoserviceprovider.keysize\">DSACryptoServiceProvider.KeySize\n  Property</a> </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider.keysize\">RSACryptoServiceProvider.KeySize\n  Property</a> </li>\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [NIST 800-131A](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf) - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1155",
        "display_name": "CsharpsquidS1155",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Any()\" should be used to test for emptiness",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `.Count()` to test for emptiness works, but using `.Any()` makes the intent clearer, and the code more readable.\nHowever, there are some cases where special attention should be paid:\n\n  <li> if the collection is an `EntityFramework` or other ORM query, calling `.Count()` will cause executing a potentially\n  massive SQL query and could put a large overhead on the application database. Calling `.Any()` will also connect to the database, but\n  will generate much more efficient SQL. </li>\n  <li> if the collection is part of a LINQ query that contains `.Select()` statements that create objects, a large amount of memory could\n  be unnecessarily allocated. Calling `.Any()` will be much more efficient because it will execute fewer iterations of the enumerable.\n  </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2123",
        "display_name": "CsharpsquidS2123",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Values should not be uselessly incremented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3453",
        "display_name": "CsharpsquidS3453",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes should not have only \"private\" constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class with only `private` constructors can't be instantiated, thus, it seems to be pointless code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nClasses that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only `static` members\nare also ignored because they are covered by Rule S1118.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2365",
        "display_name": "CsharpsquidS2365",
        "severity": "error",
        "category": "convention",
        "rule_title": "Properties should not make collection or array copies",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so\nthat callers are not surprised by the unexpectedly poor performance.\n\nThis rule detects calls to `ToList`, `ToArray` and array `Clone`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2486",
        "display_name": "CsharpsquidS2486",
        "severity": "info",
        "category": "convention",
        "rule_title": "Generic exceptions should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\n\nThis rule only reports on empty catch clauses that catch generic `Exception`s.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a block contains a comment, it is not considered to be empty.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [MITRE, CWE-391](http://cwe.mitre.org/data/definitions/391.html) - Unchecked Error Condition \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3451",
        "display_name": "CsharpsquidS3451",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of `[DefaultValue]` with `[Optional]` has no more effect than `[Optional]` alone. That's because\n`[DefaultValue]` doesn't actually do anything; it merely indicates the intent for the value. More than likely, `[DefaultValue]`\nwas used in confusion instead of `[DefaultParameterValue]`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5753",
        "display_name": "CsharpsquidS5753",
        "severity": "warning",
        "category": "security",
        "rule_title": "Disabling ASP.NET \"Request Validation\" feature is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nASP.NET 1.1+ comes with a feature called **Request Validation**, preventing the server to accept content containing un-encoded HTML. This\nfeature comes as a first protection layer against Cross-Site Scripting (XSS) attacks and act as a simple Web Application Firewall (WAF) rejecting\nrequests potentially containing malicious content.\n\nWhile this feature is not a silver bullet to prevent all XSS attacks, it helps to catch basic ones. It will for example prevent <code>&lt;script\ntype=\"text/javascript\" src=\"https://malicious.domain/payload.js\"&gt;</code> to reach your Controller.\n\nNote: **Request Validation** feature being only available for ASP.NET, no Security Hotspot is raised on ASP.NET Core applications.\n\n## Ask Yourself Whether\n\n  -  the developer doesn't know the impact to deactivate the Request Validation feature \n  -  the web application accepts user supplied data \n  -  all user supplied data are not validated \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Activate the Request Validation feature for all HTTP requests \n\n## Sensitive Code Example\n\nAt Controller level:\n\nAt application level, configured in the Web.config file:\n\n## Compliant Solution\n\nAt Controller level:\n\nor \n\nAt application level, configured in the Web.config file:\n\n## See\n\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/api/system.web.configuration.httpruntimesection.requestvalidationmode?view=netframework-4.8\">HttpRuntimeSection.RequestValidationMode Property</a> </li>\n  -  [OWASP ASP.NET Request Validation](https://owasp.org/www-community/ASP-NET_Request_Validation) \n  <li> [OWASP Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) - XSS\n  Prevention Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [MITRE, CWE-79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> [MITRE, CWE-80](https://cwe.mitre.org/data/definitions/80.html) - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3330",
        "display_name": "CsharpsquidS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\nWhen the `HttpCookie.HttpOnly` property is set to `false` then the cookie can be accessed by client side code:\n\nThe [default value](https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcookie.httponly?view=netframework-4.8) of\n`HttpOnly` flag is `false`, unless overwritten by an application's configuration file:\n\n## Compliant Solution\n\nSet the `HttpCookie.HttpOnly` property to `true`:\n\nOr change the default flag values for the whole application by editing the <a\nhref=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v=vs.100)\">Web.config configuration file</a>:\n\n  -  the `requireSSL` attribute corresponds programmatically to the `Secure` field. \n  -  the `httpOnlyCookies` attribute corresponds programmatically to the `httpOnly` field. \n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3217",
        "display_name": "CsharpsquidS3217",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `foreach` statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections\navailable at that time such as `ArrayList`. The `foreach` statements allows you to downcast elements of a collection of\n`Object`s to any other type. The problem is that to achieve the cast, the `foreach` statements silently performs\n`explicit` type conversion, which at runtime can result in an `InvalidCastException`.\n\nC# code iterating on generic collections or arrays should not rely on `foreach` statement's silent `explicit`\nconversions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThe rule ignores iterations on collections of `object`s. This includes legacy code that uses `ArrayList`. Furthermore, the\nrule does not report on cases when user defined conversions are being called. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3459",
        "display_name": "CsharpsquidS3459",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unassigned members should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,\nmistakes. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4428",
        "display_name": "CsharpsquidS4428",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"PartCreationPolicyAttribute\" should be used with \"ExportAttribute\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `PartCreationPolicyAttribute` attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the\nexported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the `ExportAttribute`\nattribute.\n\nThis rule raises an issue when a class is marked as shared with a `PartCreationPolicyAttribute` but lacks a\n`ExportAttribute`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3218",
        "display_name": "CsharpsquidS3218",
        "severity": "error",
        "category": "convention",
        "rule_title": "Inner class members should not shadow outer class \"static\" or type members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt's possible to name the members of an inner class the same as the `static` members of its enclosing class - possible, but a bad idea.\nThat's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the\nreferences updated.\n\n## Noncompliant Code Example\n\nAfter a rename\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/x/5DVGBQ) - Do not shadow or obscure identifiers in subscopes \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S927",
        "display_name": "CsharpsquidS927",
        "severity": "error",
        "category": "convention",
        "rule_title": "Parameter names should match base declaration and other partial definitions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe name of a parameter in an externally visible. This rule raises an issue when method override does not match the name of the parameter in the\nbase declaration of the method, or the name of the parameter in the interface declaration of the method or the name of any other `partial`\ndefinition.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL40-C.](https://wiki.sei.cmu.edu/confluence/x/ftUxBQ) - Do not create incompatible declarations of the same function or\n  object </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1151",
        "display_name": "CsharpsquidS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch case\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `switch` statement should be used only to clearly define some new branches in the control flow. As soon as a `case`\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2360",
        "display_name": "CsharpsquidS2360",
        "severity": "error",
        "category": "convention",
        "rule_title": "Optional parameters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe overloading mechanism should be used in place of optional parameters for several reasons:\n\n  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. </li>\n  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you\n  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>\n  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule ignores non externally visible methods.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3450",
        "display_name": "CsharpsquidS3450",
        "severity": "info",
        "category": "convention",
        "rule_title": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n`[DefaultParameterValue]` should always be used in conjunction with `[Optional]`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1048",
        "display_name": "CsharpsquidS1048",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Destructors should not throw exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the\nruntime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process\nintegrity if the finalizer cannot free or destroy resources.\n\nThe rule reports on throw statements used in finalizers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5766",
        "display_name": "CsharpsquidS5766",
        "severity": "warning",
        "category": "security",
        "rule_title": "Deserializing objects without performing data validation is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeserialization process extracts data from the serialized representation of an object and reconstruct it directly, without calling constructors.\nThus, data validation implemented in constructors can be bypassed if serialized objects are controlled by an attacker.\n\n## Ask Yourself Whether\n\n  -  The data validation implemented in constructors enforces a relevant security check. \n  <li> Objects instantiated via deserialization don't run the same security checks as the ones executed when objects are created through constructors.\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> At the end of the deserialization process it is recommended to perform the same validation checks as the ones performed in constructors,\n  especially when the serialized object can be controlled by an attacker. </li>\n\n## Sensitive Code Example\n\nWhen a `serializable` class doesn't inherit from <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=netframework-4.8\">ISerializable</a> or <a\nhref=\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view=netframework-4.8\">IDeserializationCallback</a>\ntypes and has a constructor using its parameters in conditions:\n\nWhen a class inherit from <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=netframework-4.8\">ISerializable</a> type, has a\nregular constructor using its parameters in conditions, but doesn't perform the same validation after deserialization:\n\nWhen a class inherit from <a\nhref=\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view=netframework-4.8\">IDeserializationCallback</a>\ntype, has a constructor using its parameters in conditions but the `IDeserializationCallback.OnDeserialization` method doesn't perform any\nconditional checks:\n\n## Compliant Solution\n\nWhen using [ISerializable](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=netframework-4.8)\ntype to control deserialization, perform the same checks inside regular constructors than in the special constructor <code>SerializationInfo info,\nStreamingContext context</code> used during deserialization:\n\nWhen using <a\nhref=\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view=netframework-4.8\">IDeserializationCallback</a>\ntype to control deserialization, perform the same checks inside regular constructors than after deserialization with\n`IDeserializationCallback.OnDeserialization` method:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A8](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization) - Insecure Deserialization\n  </li>\n  <li> [docs.microsoft.com](https://docs.microsoft.com/en-us/dotnet/framework/misc/security-and-serialization) - security-and-serialization\n  </li>\n  -  [MITRE, CWE-502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1168",
        "display_name": "CsharpsquidS1168",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Empty arrays and collections should be returned instead of null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturning `null` instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.\n\nMoreover, in many cases, `null` is used as a synonym for empty.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAlthough `string` is a collection, the rule won't report on it.\n\n## See\n\n  <li> [CERT, MSC19-C.](https://wiki.sei.cmu.edu/confluence/x/aNYxBQ) - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> [CERT, MET55-J.](https://wiki.sei.cmu.edu/confluence/x/JzZGBQ) - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2259",
        "display_name": "CsharpsquidS2259",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Null pointers should not be dereferenced",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA reference to `null` should never be dereferenced/accessed. Doing so will cause a `NullReferenceException` to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nCalls to extension methods are not reported because they can still operate on `null` values.\n\nTo create a custom null validation method declare an attribute with name `ValidatedNotNullAttribute` and mark the parameter that is\nvalidated for null in your method declaration with it:\n\n## See\n\n  -  [MITRE, CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP34-C.](https://wiki.sei.cmu.edu/confluence/x/QdcxBQ) - Do not dereference null pointers \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3466",
        "display_name": "CsharpsquidS3466",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Optional parameters should be passed to \"base\" calls",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGenerally, writing the least code that will **readably** do the job is a good thing, so omitting default parameter values seems to make sense.\nUnfortunately, when you omit them from the `base` call in an override, you're not actually getting the job done thoroughly, because you're\nignoring the value the caller passed in. The result will likely not be what the caller expected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2257",
        "display_name": "CsharpsquidS2257",
        "severity": "error",
        "category": "security",
        "rule_title": "Using non-standard cryptographic algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like `AES`, `RSA`, `SHA`, ... should be used instead.\n\nThis rule tracks custom implementation of these types from `System.Security.Cryptography` namespace:\n\n  -  `AsymmetricAlgorithm` \n  -  `AsymmetricKeyExchangeDeformatter` \n  -  `AsymmetricKeyExchangeFormatter` \n  -  `AsymmetricSignatureDeformatter` \n  -  `AsymmetricSignatureFormatter` \n  -  `DeriveBytes` \n  -  `HashAlgorithm` \n  -  `ICryptoTransform` \n  -  `SymmetricAlgorithm` \n\n## Recommended Secure Coding Practices\n\n  -  Use a standard algorithm instead of creating a custom one. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> Derived from FindSecBugs rule [MessageDigest is Custom](https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST)\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3346",
        "display_name": "CsharpsquidS3346",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Expressions used in \"Debug.Assert\" should not produce side effects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as\nit runs. When an assertion is true, that means everything is operating as expected. \n\nIn non-debug mode, all `Debug.Assert` are automatically left out. So, by contract, the boolean expressions that are evaluated by those\nassertions must absolutely not contain any side effects. Otherwise, when leaving the Debug mode, the functional behavior of the application is not the\nsame anymore.\n\nThe rule will raise if the method name starts with any of the following `remove`, `delete`, `add`,\n`pop`, `update`, `retain`, `insert`, `push`, `append`, `clear`,\n`dequeue`, `enqueue`, `dispose`, `put`, or `set`, although `SetEquals` will be\nignored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP06-J.](https://wiki.sei.cmu.edu/confluence/x/mjdGBQ) - Expressions used in assertions must not produce side effects \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3343",
        "display_name": "CsharpsquidS3343",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Caller information parameters should come at the end of the parameter list",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCaller information attributes (`CallerFilePathAttribute`, `CallerLineNumberAttribute`, and\n`CallerMemberNameAttribute`) provide a way to get information about the caller of a method through optional parameters. But they only work\nright if their values aren't provided explicitly. So if you define a method with caller info attributes in the middle of the parameter list, you put\nyour callers in a bad position: they are forced to use named arguments if they want to use the method properly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3464",
        "display_name": "CsharpsquidS3464",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Type inheritance should not be recursive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRecursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you\ntry to instantiate the class.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2376",
        "display_name": "CsharpsquidS2376",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Write-only properties should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2252",
        "display_name": "CsharpsquidS2252",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "For-loop conditions should be true at least once",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `for` loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3220",
        "display_name": "CsharpsquidS3220",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method calls should not resolve ambiguously to overloads with \"params\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe rules for method resolution are complex and perhaps not properly understood by all coders. The `params` keyword can make method\ndeclarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.\n\nThis rule raises an issue when an invocation resolves to a method declaration with `params`, but could also resolve to another\nnon-`params` method too.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4433",
        "display_name": "CsharpsquidS4433",
        "severity": "error",
        "category": "security",
        "rule_title": "LDAP connections should be authenticated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.\n\nSimple authentication in LDAP can be used with three different mechanisms:\n\n  -  **Anonymous Authentication Mechanism** by performing a bind request with a username and password value of zero length. \n  -  **Unauthenticated Authentication Mechanism** by performing a bind request with a password value of zero length. \n  -  **Name/Password Authentication Mechanism** by performing a bind request with a password value of non-zero length. \n\nAnonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. \n\n## Noncompliant Code Example\n\nThis rule raises an issue when an LDAP connection is created with `AuthenticationTypes.Anonymous` or\n`AuthenticationTypes.None`.\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n  -  [ldapwiki.com](https://ldapwiki.com/wiki/Simple%20Authentication)- Simple Authentication \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1163",
        "display_name": "CsharpsquidS1163",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exceptions should not be thrown in finally blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the `try` or `catch`\nblock, and the masked's exception message and stack trace will be lost.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, ERR05-J.](https://wiki.sei.cmu.edu/confluence/x/FTZGBQ) - Do not let checked exceptions escape from a finally block \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4790",
        "display_name": "CsharpsquidS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S818",
        "display_name": "CsharpsquidS818",
        "severity": "info",
        "category": "convention",
        "rule_title": "Literal suffixes should be upper case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT DCL16-C.](https://wiki.sei.cmu.edu/confluence/x/cdYxBQ) - Use \"L,\" not \"l,\" to indicate a long value \n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2251",
        "display_name": "CsharpsquidS2251",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "A \"for\" loop update clause should move the counter in the right direction",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC54-J.](https://wiki.sei.cmu.edu/confluence/x/aTdGBQ) - Avoid inadvertent wrapping of loop counters \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2372",
        "display_name": "CsharpsquidS2372",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Exceptions should not be thrown from property getters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperty getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod. \n\nIt is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is raised when the thrown exception derives from or is of type `NotImplementedException`, `NotSupportedException` or\n`InvalidOperationException`.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4792",
        "display_name": "CsharpsquidS4792",
        "severity": "error",
        "category": "security",
        "rule_title": "Configuring loggers is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0285](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285) \n  -  [CVE-2000-1127](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127) \n  -  [CVE-2017-15113](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113) \n  -  [CVE-2015-5742](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742) \n\nLogs are useful before, during and after a security incident.\n\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  -  In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \n\nLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\n\nThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  -  the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  -  the logs are only stored locally instead of being backuped or replicated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. \n  -  Production logs should be stored in a secure location which is only accessible to system administrators. \n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n\nRemember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\n\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  -  Monitor the logs for any suspicious activity. \n\n## Sensitive Code Example\n\n**.Net Core**: configure programmatically\n\n**Log4Net**\n\n**NLog**: configure programmatically\n\n**Serilog**\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [MITRE, CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Information Exposure Through Log Files \n  -  [MITRE, CWE-117](https://cwe.mitre.org/data/definitions/117.html) - Improper Output Neutralization for Logs \n  -  [MITRE, CWE-778](https://cwe.mitre.org/data/definitions/778.html) - Insufficient Logging \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2743",
        "display_name": "CsharpsquidS2743",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Static fields should not be used in generic types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA static field in a generic type is not shared among instances of different closed constructed types, thus\n`LengthLimitedSingletonCollection&lt;int&gt;.instances` and `LengthLimitedSingletonCollection&lt;string&gt;.instances` will\npoint to different objects, even though `instances` is seemingly shared among all `LengthLimitedSingletonCollection&lt;&gt;`\ngeneric classes.\n\nIf you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static\nmembers, then set your generic type to inherit from the base class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIf the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the\nclosed constructed types.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3717",
        "display_name": "CsharpsquidS3717",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track use of \"NotImplementedException\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NotImplementedException` is often used to mark methods which must be implemented for the overall functionality to be complete, but\nwhich the developer wants to implement later. That's as opposed to the `NotSupportedException` which is thrown by methods which are\nrequired by base classes or interfaces, but which are not appropriate to the current class.\n\nThis rule raises an exception when `NotImplementedException` is thrown.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nExceptions derived from `NotImplementedException` are ignored.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1656",
        "display_name": "CsharpsquidS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1659",
        "display_name": "CsharpsquidS1659",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiple variables should not be declared on the same line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring multiple variable on one line is difficult to read.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, DCL52-J.](https://wiki.sei.cmu.edu/confluence/x/YTZGBQ) - Do not declare more than one variable per declaration \n  -  [CERT, DCL04-C.](https://wiki.sei.cmu.edu/confluence/x/EtcxBQ) - Do not declare more than one variable per declaration \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3956",
        "display_name": "CsharpsquidS3956",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Generic.List\" instances should not be part of public APIs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`System.Collections.Generic.List&lt;T&gt;` is a generic collection that is designed for performance and not inheritance. For example, it\ndoes not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the\nbehavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:\n\n  -  `System.Collections.Generic.IEnumerable&lt;T&gt;` \n  -  `System.Collections.Generic.IReadOnlyCollection&lt;T&gt;` \n  -  `System.Collections.Generic.ICollection&lt;TKey&gt;` \n  -  `System.Collections.Generic.IReadOnlyList&lt;T&gt;` \n  -  `System.Collections.Generic.IList&lt;TKey&gt;` \n  -  `System.Collections.ObjectModel.Collection&lt;T&gt;` \n  -  `System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;` \n  -  `System.Collections.ObjectModel.KeyedCollection&lt;TKey, Titem&gt;` \n\nThis rule raises an issue every time a `System.Collections.Generic.List&lt;T&gt;` is exposed:\n\n  -  As an externally visible member. \n  -  As the return type of an externally visible method. \n  -  As a parameter type of an an externally visible method. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2995",
        "display_name": "CsharpsquidS2995",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"Object.ReferenceEquals\" should not be used for value types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `Object.ReferenceEquals` to compare the references of two value types simply won't return the expected results most of the time\nbecause such types are passed by value, not by reference.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S907",
        "display_name": "CsharpsquidS907",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"goto\" statement should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`goto` is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas `if`, `for`, `while`, `continue` or `break` should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3600",
        "display_name": "CsharpsquidS3600",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"params\" should not be introduced on overrides",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAdding `params` to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added\nmodifier.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3963",
        "display_name": "CsharpsquidS3963",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"static\" fields should be initialized inline",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `static` constructor serves no other purpose that initializing `static` fields, it comes with an unnecessary\nperformance cost because the compiler generates a check before each `static` method or instance constructor invocation.\n\nInstead, inline initialization is highly recommended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1301",
        "display_name": "CsharpsquidS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements and expressions are useful when there are many different cases depending on the value of the same expression.\n\nWhen a `switch` statement or expression is simple enough, the code will be more readable with a single `if`,\n`if-else` or ternary conditional operator.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2996",
        "display_name": "CsharpsquidS2996",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ThreadStatic\" fields should not be initialized",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an object has a field annotated with `ThreadStatic`, that field is shared within a given thread, but unique across threads. Since a\nclass' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial\nvalues.\n\nInstead, allow such fields to be initialized to their default values or make the initialization lazy.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3962",
        "display_name": "CsharpsquidS3962",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"static readonly\" constants should be \"const\" instead",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe value of a `static readonly` field is computed at runtime while the value of a `const` field is calculated at compile\ntime, which improves performance.\n\nThis rule raises an issue when a `static readonly` field is initialized with a value that is computable at compile time.\n\nAs specified by Microsoft, the list of types that can have a constant value are:\n      |C# type      |.Net Fwk type    \n      |bool      |System.Boolean    \n      |byte      |System.Byte    \n      |sbyte      |System.SByte    \n      |char      |System.Char    \n      |decimal      |System.Decimal    \n      |double      |System.Double    \n      |float      |System.Single    \n      |int      |System.Int32    \n      |uint      |System.UInt32    \n      |long      |System.Int64    \n      |ulong      |System.UInt64    \n      |short      |System.Int16    \n      |ushort      |System.UInt16    \n      |string      |System.String    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1309",
        "display_name": "CsharpsquidS1309",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of in-source issue suppressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows you to track the usage of the `SuppressMessage` attributes and `#pragma warning disable` mechanism.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1541",
        "display_name": "CsharpsquidS1541",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods and properties should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be\ndifficult to understand and therefore to maintain.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2757",
        "display_name": "CsharpsquidS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3967",
        "display_name": "CsharpsquidS3967",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multidimensional arrays should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements\ncan be of different sizes, which avoids wasting memory space.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3604",
        "display_name": "CsharpsquidS3604",
        "severity": "info",
        "category": "convention",
        "rule_title": "Member initializer values should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same\ntime is redundant; the inline initialization will be overridden.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then\n{rule:csharpsquid:S3052} already reports an issue on the initialization. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2755",
        "display_name": "CsharpsquidS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\n## Noncompliant Code Examples\n\nSystem.Xml.XmlDocument\n\nSystem.Xml.XmlTextReader\n\nSystem.Xml.XmlReader\n\nSystem.Xml.XPath.XPathDocument\n\n## Compliant Solution\n\nSystem.Xml.XmlDocument\n\nSystem.Xml.XmlTextReader\n\nSystem.Xml.XmlReader\n\nSystem.Xml.XPath.XPathDocument\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#net\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2997",
        "display_name": "CsharpsquidS2997",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"IDisposables\" created in a \"using\" statement should not be returned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTypically you want to use `using` to create a local `IDisposable` variable; it will trigger disposal of the object when\ncontrol passes out of the block's scope. The exception to this rule is when your method returns that `IDisposable`. In that case\n`using` disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove\n`using` or avoid returning the `IDisposable`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3603",
        "display_name": "CsharpsquidS3603",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Methods with \"Pure\" attribute should return a value",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a method with the `Pure` attribute specifies that the method doesn't make any visible changes; thus, the method should return a\nresult, otherwise the call to the method should be equal to no-operation. So `Pure` on a `void` method is either a mistake, or\nthe method doesn't do any meaningful task.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3966",
        "display_name": "CsharpsquidS3966",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Objects should not be disposed more than once",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDisposing an object twice, either with the `using` keyword or by calling `Dispose` directly, in the same method is at best\nconfusing and at worst error-prone. The next developer might see only one of the `Dispose`/`using` and try to use an\nalready-disposed object.\n\nIn addition, even if <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=netcore-3.1\">the documentation of\n`Disposable`</a> explicitly states that calling the `Dispose` method multiple times should not throw an exception, some\nimplementation still do it. Thus it is safer to not dispose an object twice when possible.\n\nThis rule raises an issue when, in the same method, the `Dispose` method is explicitly called twice on the same object, or when\n`using` is used with a direct call to `Dispose()`.\n\n## Noncompliant Code Examples\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1751",
        "display_name": "CsharpsquidS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. If the\ninitial intention of the author was really to conditionally execute one piece of code, an `if` statement should be used instead. If that\nwas not the initial intention of the author, the body of the loop should be fixed to use the nested `return`, `break` or\n`throw` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1871",
        "display_name": "CsharpsquidS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in the same `switch` statement or branches in the same `if` structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n`if` structure they should be combined, or for a `switch`, one should fall through to the other.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:csharpsquid:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1994",
        "display_name": "CsharpsquidS1994",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"for\" loop increment clauses should modify the loops' counters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt can be extremely confusing when a `for` loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1643",
        "display_name": "CsharpsquidS1643",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings should not be concatenated using '+' in a loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`StringBuilder` is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3937",
        "display_name": "CsharpsquidS3937",
        "severity": "error",
        "category": "convention",
        "rule_title": "Number patterns should be regular",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. \n\nThis rule raises an issue when underscores (`_`) are used to break a number into irregular subgroups.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1764",
        "display_name": "CsharpsquidS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule ignores `*`, `+`, `=`, `&lt;&lt;`, and `&gt;&gt;`.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:csharpsquid:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2971",
        "display_name": "CsharpsquidS2971",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"IEnumerable\" LINQs should be simplified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the interests of readability, code that can be simplified should be simplified. To that end, there are several ways `IEnumerable`\nlanguage integrated queries (LINQ) can be simplified\n\n  <li> Use `OfType` instead of using `Select` with `as` to type cast elements and then null-checking in a query\n  expression to choose elements based on type. </li>\n  -  Use `OfType` instead of using `Where` and the `is` operator, followed by a cast in a `Select` \n  -  Use an expression in `Any` instead of `Where(element =&gt; [expression]).Any()`. \n  -  Use `Count` instead of `Count()` when it's available. \n  -  Don't call `ToArray()` or `ToList()` in the middle of a query chain. \n\nUsing `EntityFramework` may require enforcing client evaluations. Such queries should use `AsEnumerable()` instead of\n`ToArray()` or `ToList()` in the middle of a query chain.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2737",
        "display_name": "CsharpsquidS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"catch\" clauses should do more than rethrow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `catch` clause that only rethrows the caught exception has the same effect as omitting the `catch` altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThis rule will not generate issues for `catch` blocks with just `throw` inside if they are followed by a `catch`\nblock for a more general exception type that does more than just rethrowing the exception.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2857",
        "display_name": "CsharpsquidS2857",
        "severity": "error",
        "category": "correctness",
        "rule_title": "SQL keywords should be delimited by whitespace",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBadly formed SQL is likely to cause errors at runtime.\n\nThis rule raises an issue when the spacing around SQL keywords appears to be missing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3949",
        "display_name": "CsharpsquidS3949",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Calculations should not overflow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNumbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate or assign numbers\nbeyond those bounds, and the result will be a value that has silently wrapped around from the expected positive value to a negative one, or vice\nversa.\n\nThis rule is only available for analyses run on Windows machines. It will not be reported in analyses run on any other OS.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2612",
        "display_name": "CsharpsquidS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"others\" class refers to all users except the owner of the file and the members of the group assigned to this file. \n\nIn Windows, \"Everyone\" group is similar and includes all members of the Authenticated Users group as well as the built-in Guest account, and\nseveral other built-in security accounts.\n\nGranting permissions to these groups can lead to unintended access to files.\n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\n.Net Framework:\n\n.Net / .Net Core\n\n.Net / .Net Core using Mono.Posix.NETStandard\n\n## Compliant Solution\n\n.Net Framework\n\n.Net / .Net Core\n\n.Net / .Net Core using Mono.Posix.NETStandard\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3996",
        "display_name": "CsharpsquidS3996",
        "severity": "warning",
        "category": "convention",
        "rule_title": "URI properties should not be strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The `System.Uri`\nclass is a safe alternative and should be preferred.\n\nThis rule raises an issue when a property is a string type and its name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\".\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1698",
        "display_name": "CsharpsquidS1698",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"==\" should not be used when \"Equals\" is overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the equality `==` and inequality `!=` operators to compare two objects generally works. The operators can be\noverloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then\n`==` resolves to reference equality, which may result in unexpected behavior if implementing classes override `Equals`.\nSimilarly, when a class overrides `Equals`, but instances are compared with non-overloaded `==`, there is a high chance that\nvalue comparison was meant instead of the reference one.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule does not report on comparisons of `System.Type` instances and on comparisons inside `Equals` overrides.\n\nIt also does not raise an issue when one of the operands is `null` nor when one of the operand is cast to `object` (because\nin this case we want to ensure reference equality even if some `==` overload is present).\n\n## See\n\n  -  [MITRE, CWE-595](http://cwe.mitre.org/data/definitions/595.html) - Comparison of Object References Instead of Object Contents \n  -  [MITRE, CWE-597](http://cwe.mitre.org/data/definitions/597.html) - Use of Wrong Operator in String Comparison \n  <li> [CERT, EXP03-J.](https://wiki.sei.cmu.edu/confluence/x/UjdGBQ) - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> [CERT, EXP50-J.](https://wiki.sei.cmu.edu/confluence/x/yDdGBQ) - Do not confuse abstract object equality with reference equality\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2302",
        "display_name": "CsharpsquidS2302",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"nameof\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use\n`nameof()`, and the string that's output will always be correct.\n\nThis rule raises an issue when a string in the `throw` statement contains the name of one of the method parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  The rule doesn't raise any issue when using C# &lt; 6.0. \n  <li> When the parameter name is contained in a sentence inside the `throw` statement string, the rule will raise an issue only if the\n  parameter name is at least 5 characters long. This is to avoid false positives. </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3875",
        "display_name": "CsharpsquidS3875",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"operator==\" should not be overloaded on reference types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of `==` to compare two objects is expected to do a reference comparison. That is, it is expected to return `true` if\nand only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by\ncallers. On the other hand, overloading it to do exactly that is pointless; that's what `==` does by default.\n\n## Noncompliant Code Example\n\n## Exceptions\n\n  -  Classes with overloaded `operator +` or `operator -` methods are ignored. \n  <li> Classes that implement `IComparable&lt;T&gt;` or `IEquatable&lt;T&gt;` most probably behave as a value-type objects and\n  so are ignored. </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3997",
        "display_name": "CsharpsquidS3997",
        "severity": "warning",
        "category": "convention",
        "rule_title": "String URI overloads should call \"System.Uri\" overloads",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The `System.Uri`\nclass is a safe alternative and should be preferred.\n\nThis rule raises an issue when two overloads differ only by the string / `Uri` parameter and the string overload doesn't call the\n`Uri` overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands\nto reason that the safer overload should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3876",
        "display_name": "CsharpsquidS3876",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings or integral types should be used for indexers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nStrings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and\npotentially a situation where a method should be used instead.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3994",
        "display_name": "CsharpsquidS3994",
        "severity": "warning",
        "category": "convention",
        "rule_title": "URI Parameters should not be strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The `System.Uri`\nclass is a safe alternative and should be preferred. At minimum, an overload of the method taking a `System.Uri` as a parameter should be\nprovided in each class that contains a method with an apparent Uri passed as a `string`.\n\nThis rule raises issues when a method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\", and the type\ndoesn't declare a corresponding overload taking an `System.Uri` parameter instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1696",
        "display_name": "CsharpsquidS1696",
        "severity": "warning",
        "category": "convention",
        "rule_title": "NullReferenceException should not be caught",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NullReferenceException` should be avoided, not caught. Any situation in which `NullReferenceException` is explicitly caught\ncan easily be converted to a `null` test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch\nof the conditional.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [MITRE, CWE-395](http://cwe.mitre.org/data/definitions/395.html) - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  -  [CERT, ERR08-J.](https://wiki.sei.cmu.edu/confluence/x/_TdGBQ) - Do not catch NullPointerException or any of its ancestors \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3995",
        "display_name": "CsharpsquidS3995",
        "severity": "warning",
        "category": "convention",
        "rule_title": "URI return values should not be strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The `System.Uri`\nclass is a safe alternative and should be preferred.\n\nThis rule raises an issue when a method has a `string` return type and its name contains \"Uri\", \"Urn\", or \"Url\" or begins with \"uri\",\n\"urn\", or \"url\".\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3871",
        "display_name": "CsharpsquidS3871",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exception types should be \"public\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n`public` for that to work. \n\nIf a method throws a non-public exception, the best you can do on the caller's side is to `catch` the closest `public` base\nof the class. That is, you lose all that custom information you created the exception type to pass. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores Exception types that are not derived directly from `System.Exception`, `System.SystemException`, or\n`System.ApplicationException`.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3874",
        "display_name": "CsharpsquidS3874",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"out\" and \"ref\" parameters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing a parameter by reference, which is what happens when you use the `out` or `ref` parameter modifiers, means that the\nmethod will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change\nthe argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when\nit is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.\n\nThis rule raises an issue when `out` or `ref` is used on a non-`Optional` parameter in a public method.\n`Optional` parameters are covered by S3447.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will not raise issues for:\n\n  -  non-public methods \n  -  methods with only 'out' parameters, name starting with \"Try\" and return type bool. \n  -  interface implementation methods \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3992",
        "display_name": "CsharpsquidS3992",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assemblies should explicitly specify COM visibility",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssemblies should explicitly indicate whether they are meant to be COM visible or not. If the `ComVisibleAttribute` is not present, the\ndefault is to make the content of the assembly visible to COM clients.\n\nNote that COM visibility can be overridden for individual types and members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1210",
        "display_name": "CsharpsquidS1210",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen you implement `IComparable` or `IComparable&lt;T&gt;` on a class you should also override `Equals(object)`\nand overload the comparison operators (`==`, `!=`, `&lt;`, `&lt;=`, `&gt;`,\n`&gt;=`). That's because the CLR cannot automatically call your `CompareTo` implementation from `Equals(object)` or\nfrom the base comparison operator implementations. Additionally, it is best practice to override `GetHashCode` along with\n`Equals`.\n\nThis rule raises an issue when a class implements `IComparable` without also overriding `Equals(object)` and the comparison\noperators.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1694",
        "display_name": "CsharpsquidS1694",
        "severity": "info",
        "category": "convention",
        "rule_title": "An abstract class should have both abstract and concrete methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\n\nA `class` with no abstract methods that was made `abstract` purely to prevent instantiation should be converted to a concrete\n`class` (i.e. remove the `abstract` keyword) with a `protected` constructor.\n\nA `class` with only `abstract` methods and no inheritable behavior should be converted to an `interface`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3872",
        "display_name": "CsharpsquidS3872",
        "severity": "info",
        "category": "convention",
        "rule_title": "Parameter names should not duplicate the names of their methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its\nparameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language\nthat's not the case, it is still likely to confuse callers and maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3993",
        "display_name": "CsharpsquidS3993",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen defining custom attributes, `System.AttributeUsageAttribute` must be used to indicate where the attribute can be applied. This will\ndetermine its valid locations in the code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1451",
        "display_name": "CsharpsquidS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\nThe `headerFormat` must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (`using`, `namespace`...).\n\nFor example, if you want the source file to look like this\n\nthen the `headerFormat` parameter should end with an empty line like this\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1450",
        "display_name": "CsharpsquidS1450",
        "severity": "info",
        "category": "convention",
        "rule_title": "Private fields only used as local variables in methods should become local variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2306",
        "display_name": "CsharpsquidS2306",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"async\" and \"await\" should not be used as identifiers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince C# 5.0, `async` and `await` are contextual keywords. Contextual keywords do have a particular meaning in some contexts,\nbut can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any\nconfusion though, it is best to not use `async` and `await` as identifiers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3990",
        "display_name": "CsharpsquidS3990",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assemblies should be marked as CLS compliant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with `System.CLSCompliantAttribute`.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3877",
        "display_name": "CsharpsquidS3877",
        "severity": "error",
        "category": "convention",
        "rule_title": "Exceptions should not be thrown from unexpected methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is expected that some methods should be called with caution, but others, such as `ToString`, are expected to \"just work\". Throwing an\nexception from such a method is likely to break callers' code unexpectedly.\n\nAn issue is raised when an exception is thrown from any of the following: \n\n  -  Event accessors \n  -  `Object.Equals` \n  -  `IEquatable.Equals` \n  -  `GetHashCode` \n  -  `ToString` \n  -  `static` constructors \n  -  `IDisposable.Dispose` \n  -  `operator ==, !=, &lt;, &gt;, &lt;=, &gt;=` \n  -  `implicit` cast operators \n\n## Noncompliant Code Example\n\n## Exceptions\n\n`System.NotImplementedException` and its derivatives are ignored.\n\n`System.InvalidOperationException`, `System.NotSupportedException`, and `System.ArgumentException` and their\nderivatives are ignored in event accessors.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3998",
        "display_name": "CsharpsquidS3998",
        "severity": "error",
        "category": "convention",
        "rule_title": "Threads should not lock on objects with weak identity",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread\nin a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak\nidentity are:\n\n  -  `MarshalByRefObject` \n  -  `ExecutionEngineException` \n  -  `OutOfMemoryException` \n  -  `StackOverflowException` \n  -  `String` \n  -  `MemberInfo` \n  -  `ParameterInfo` \n  -  `Thread` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1104",
        "display_name": "CsharpsquidS1104",
        "severity": "info",
        "category": "convention",
        "rule_title": "Fields should not have public accessibility",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPublic fields in public classes do not respect the encapsulation principle and has three main disadvantages:\n\n  -  Additional behavior such as validation cannot be added. \n  -  The internal representation is exposed, and cannot be changed afterwards. \n  -  Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. \n\nBy using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional\nprotection (security) features such as Link Demands.\n\nNote that due to optimizations on simple properties, public fields provide only very little performance gain.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFields marked as `readonly` or `const` are ignored by this rule.\n\nFields inside classes or structs annotated with the `StructLayoutAttribute` are ignored by this rule.\n\n## See\n\n  -  [MITRE, CWE-493](http://cwe.mitre.org/data/definitions/493.html) - Critical Public Variable Without Final Modifier \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1215",
        "display_name": "CsharpsquidS1215",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"GC.Collect\" should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `GC.Collect` is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking\noperation that examines **every object in memory** for cleanup. Further, you don't have control over when this blocking cleanup will actually\nrun.\n\nAs a general rule, the consequences of calling this method far outweigh the benefits unless perhaps you've just triggered some event that is unique\nin the run of your program that caused a lot of long-lived objects to die.\n\nThis rule raises an issue when `GC.Collect` is invoked.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1699",
        "display_name": "CsharpsquidS1699",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constructors should only call non-overridable methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\n\nFor example:\n\n  -  The subclass class constructor starts by calling the parent class constructor. \n  -  The parent class constructor calls the method, which has been overridden in the child class. \n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  `NullReferenceException`) can result, because the fields aren't initialized yet. </li>\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, MET05-J.](https://wiki.sei.cmu.edu/confluence/x/8zZGBQ) - Ensure that constructors do not call overridable methods \n  <li> [CERT, OOP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/6ns-BQ) - Do not invoke virtual functions from constructors or destructors\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2674",
        "display_name": "CsharpsquidS2674",
        "severity": "info",
        "category": "correctness",
        "rule_title": "The length returned from a stream read should be checked",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nYou cannot assume that any given stream reading call will fill the `byte[]` passed in to the method with the number of bytes requested.\nInstead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both\nharmful and difficult to reproduce.\n\nThis rule raises an issue when a `Stream.Read` or a `Stream.ReadAsync` method is called, but the return value is not\nchecked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, FIO10-J.](https://wiki.sei.cmu.edu/confluence/x/VzdGBQ) - Ensure the array is filled when using read() to fill an array \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3887",
        "display_name": "CsharpsquidS3887",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Mutable, non-private fields should not be \"readonly\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the `readonly` keyword on a field means that it can't be changed after initialization. However, when applied to collections or\narrays, that's only partly true. `readonly` enforces that another instance can't be assigned to the field, but it cannot keep the contents\nfrom being updated. That means that in practice, the field value really can be changed, and the use of `readonly` on such a field is\nmisleading, and you're likely to not be getting the behavior you expect.\n\nThis rule raises an issue when a non-private, `readonly` field is an array or collection.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3400",
        "display_name": "CsharpsquidS3400",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods should not return constants",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. \n\nThis rule raises an issue if on methods that contain only one statement: the `return` of a constant value. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3884",
        "display_name": "CsharpsquidS3884",
        "severity": "error",
        "category": "security",
        "rule_title": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`CoSetProxyBlanket` and `CoInitializeSecurity` both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it's too late at that point; the permissions context has\nalready been set.\n\nSpecifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2551",
        "display_name": "CsharpsquidS2551",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Shared resources should not be used for locking",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the\nsame lock for another unrelated purpose. \n\nInstead, a dedicated `object` instance should be used for each shared resource, to avoid deadlocks or lock contention.\n\nThe following objects are considered as shared resources:\n\n  -  `this` \n  -  a `Type` object \n  -  a string literal \n  -  a string instance \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\">Microsoft Documentation: Managed Threading\nBest Practices</a>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3885",
        "display_name": "CsharpsquidS3885",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Assembly.Load\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe parameter to `Assembly.Load` includes the full specification of the dll to be loaded. Use another method, and you might end up with\na dll other than the one you expected. \n\nThis rule raises an issue when `Assembly.LoadFrom`, `Assembly.LoadFile`, or `Assembly.LoadWithPartialName` is\ncalled.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3880",
        "display_name": "CsharpsquidS3880",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Finalizers should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFinalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no\nbenefit or justification.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3881",
        "display_name": "CsharpsquidS3881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"IDisposable\" should be implemented correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `IDisposable` interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource\nleaks or more severe bugs.\n\nThis rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the <strong>Compliant\nSolution</strong> section for examples.\n\nSatisfying the rule's conditions will enable potential derived classes to correctly dispose the members of your class:\n\n  -  `sealed` classes are not checked. \n  <li> If a base class implements `IDisposable` your class should not have `IDisposable` in the list of its interfaces. In such\n  cases it is recommended to override the base class's `protected virtual void Dispose(bool)` method or its equivalent. </li>\n  -  The class should not implement `IDisposable` explicitly, e.g. the `Dispose()` method should be public. \n  <li> The class should contain `protected virtual void Dispose(bool)` method. This method allows the derived classes to correctly dispose\n  the resources of this class. </li>\n  <li> The content of the `Dispose()` method should be invocation of `Dispose(true)` followed by\n  `GC.SuppressFinalize(this)` </li>\n  -  If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of `Dispose(false)`. \n  <li> If the class inherits from a class that implements `IDisposable` it must call the `Dispose`, or\n  `Dispose(bool)` method of the base class from within its own implementation of `Dispose` or `Dispose(bool)`,\n  respectively. This ensures that all resources from the base class are properly released. </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\nRefer to \n\n  -  [MSDN](https://msdn.microsoft.com/en-us/library/498928w2.aspx) for complete documentation on the dispose pattern. \n  <li> [Stephen Cleary](https://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html) for excellent Q&amp;A about\n  IDisposable </li>\n  <li> [Pragma Geek](https://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/) for additional\n  usages of IDisposable, beyond releasing resources. </li>\n  -  [IDisposable documentation](https://docs.microsoft.com/en-us/dotnet/api/system.idisposable?view=netframework-4.7) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1109",
        "display_name": "CsharpsquidS1109",
        "severity": "info",
        "category": "convention",
        "rule_title": "A close curly brace should be located at the beginning of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2436",
        "display_name": "CsharpsquidS2436",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Types and methods should not have too many generic parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method or class with too many type parameters has likely aggregated too many responsibilities and should be split.\n\n## Noncompliant Code Example\n\nWith the default parameter value of 2:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1227",
        "display_name": "CsharpsquidS1227",
        "severity": "info",
        "category": "convention",
        "rule_title": "break statements should not be used except for switch cases",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`break;` is an unstructured control flow statement which makes code harder to read.\n\nIdeally, every loop should have a single termination condition.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2437",
        "display_name": "CsharpsquidS2437",
        "severity": "error",
        "category": "convention",
        "rule_title": "Silly bit operations should not be performed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCertain bit operations are just silly and should not be performed because their results are predictable.\n\nSpecifically, using `&amp; -1` with any value will always result in the original value, as will `anyValue ^ 0` and\n`anyValue | 0`.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3889",
        "display_name": "CsharpsquidS3889",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Neither \"Thread.Resume\" nor \"Thread.Suspend\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Thread.Suspend` and `Thread.Resume` can give unpredictable results, and both methods have been deprecated. Indeed, if\n`Thread.Suspend` is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer\nsynchronization mechanisms should be used, such as `Monitor`, `Mutex`, and `Semaphore`.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [Thread.Resume Method ()](https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx) \n  -  [Thread.Suspend Method ()](https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1226",
        "display_name": "CsharpsquidS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as `final`, then at least read\nbefore reassignment.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1313",
        "display_name": "CsharpsquidS1313",
        "severity": "warning",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3610",
        "display_name": "CsharpsquidS3610",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Nullable type comparison should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling `GetType()` on a nullable object returns the underlying value type. Thus, comparing the returned `Type` object to\n`typeof(Nullable&lt;SomeType&gt;)` doesn't make sense. The comparison either throws an exception or the result can be known at compile\ntime.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3972",
        "display_name": "CsharpsquidS3972",
        "severity": "error",
        "category": "convention",
        "rule_title": "Conditionals should start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an `if` and its\nresulting **then** statement. However, when an `if` is placed on the same line as the closing `}` from a preceding\n**then**, **else** or **else if** part, it is either an error - `else` is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3973",
        "display_name": "CsharpsquidS3973",
        "severity": "error",
        "category": "convention",
        "rule_title": "A conditionally executed single line should be denoted by indentation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2760",
        "display_name": "CsharpsquidS2760",
        "severity": "info",
        "category": "convention",
        "rule_title": "Sequential tests should not check the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should\nhave been checked in the second test.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nSince it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2761",
        "display_name": "CsharpsquidS2761",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling the `!` or `~` prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are\ntypically caused by accidentally double-tapping the key in question without noticing.\n\nEither this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3971",
        "display_name": "CsharpsquidS3971",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"GC.SuppressFinalize\" should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`GC.SuppressFinalize` requests that the system not call the finalizer for the specified object. This should only be done when\nimplementing `Dispose` as part of the <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\">Dispose Pattern</a>.\n\nThis rule raises an issue when `GC.SuppressFinalize` is called outside that pattern.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4830",
        "display_name": "CsharpsquidS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nIt's not recommended to reinvent the wheel by implementing custom certificate chain validation.\n\nTLS libraries provide built-in certificate validation functions that should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1200",
        "display_name": "CsharpsquidS1200",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\n\n> \n  If a class has more than one responsibility, then the responsibilities become coupled.\n  Changes to one responsibility may impair or inhibit the class' ability to meet the others.\n  This kind of coupling leads to fragile designs that break in unexpected ways when changed.\n\n\nClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\n\nNested classes dependencies are not counted as dependencies of the outer class.\n\n## Noncompliant Code Example\n\nWith a threshold of 5:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3984",
        "display_name": "CsharpsquidS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Exceptions should not be created without being thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Exception` without actually throwing it is useless and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3981",
        "display_name": "CsharpsquidS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection sizes and array length comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always `true`. Similarly testing that it is less than zero will always return\n`false`. Perhaps the intent was to check the non-emptiness of the collection or array instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1449",
        "display_name": "CsharpsquidS1449",
        "severity": "info",
        "category": "convention",
        "rule_title": "Culture should be specified for \"string\" operations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`string.ToLower()`, `ToUpper`, `IndexOf`, `LastIndexOf`, and `Compare` are all\nculture-dependent, as are some (floating point number and `DateTime`-related) calls to `ToString`. Fortunately, all have\nvariants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default\nculture, possibly creating problems with international characters.\n\n`string.CompareTo()` is also culture specific, but has no overload that takes a culture information, so instead it's better to use\n`CompareOrdinal`, or `Compare` with culture.\n\nCalls without a culture may work fine in the system's \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  <li> [CERT, STR02-J.](https://wiki.sei.cmu.edu/confluence/x/4zdGBQ) - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3626",
        "display_name": "CsharpsquidS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements, such as `return`, `yield break`, `goto`, and `continue` let you change the default\nflow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1206",
        "display_name": "CsharpsquidS1206",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is a contract between `Equals(object)` and `GetHashCode()`: If two objects are equal according to the\n`Equals(object)` method, then calling `GetHashCode()` on each of them must yield the same result. If this is not the case, many\ncollections won't handle class instances correctly.\n\nIn order to comply with the contract, `Equals(object)` and `GetHashCode()` should be either both inherited, or both\noverridden.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [MITRE, CWE-581](http://cwe.mitre.org/data/definitions/581.html) - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> [CERT, MET09-J.](https://wiki.sei.cmu.edu/confluence/x/7DVGBQ) - Classes that define an equals() method must also define a\n  hashCode() method </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1940",
        "display_name": "CsharpsquidS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3869",
        "display_name": "CsharpsquidS3869",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"SafeHandle.DangerousGetHandle\" should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNot surprisingly, the `SafeHandle.DangerousGetHandle` method is dangerous. That's because it may not return a valid handle. Using it can\nlead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should\nsimply be avoided altogether.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1821",
        "display_name": "CsharpsquidS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1944",
        "display_name": "CsharpsquidS1944",
        "severity": "error",
        "category": "convention",
        "rule_title": "Inappropriate casts should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as `InvalidCastException`s. The compiler\nwill catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that\nare cast to their underlying value types anyway.\n\nIt is much better to use the `as` operator because it will return `null` instead of throwing an exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported if the interface has no implementing class in the assembly.\n\n## See\n\n  -  [CERT, EXP36-C.](https://wiki.sei.cmu.edu/confluence/x/u9UxBQ) - Do not cast pointers into more strictly aligned pointer types \n  -  [MITRE, CWE-588](http://cwe.mitre.org/data/definitions/588.html) - Attempt to Access Child of a Non-structure Pointer \n  -  [MITRE, CWE-704](http://cwe.mitre.org/data/definitions/704.html) - Incorrect Type Conversion or Cast \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1939",
        "display_name": "CsharpsquidS1939",
        "severity": "info",
        "category": "convention",
        "rule_title": "Inheritance list should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn inheritance list entry is redundant if:\n\n  -  It is `Object` - all classes extend `Object` implicitly. \n  -  It is `int` for an `enum` \n  -  It is a base class of another listed inheritance. \n\nSuch redundant declarations should be removed because they needlessly clutter the code and can be confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4069",
        "display_name": "CsharpsquidS4069",
        "severity": "info",
        "category": "convention",
        "rule_title": "Operator overloads should have named alternatives",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another\nlanguage you need to provide an alternate named method following the convention:\n      |Operator      |Method Name    \n      |`+` (binary)      |Add    \n      |`&amp;`      |BitwiseAnd    \n      |`|`      |BitwiseOr    \n      |`/`      |Divide    \n      |`==`      |Equals    \n      |`^`      |Xor    \n      |`&gt;`      |Compare    \n      |`&gt;=`      |Compare    \n      |`!=`      |Equals    \n      |`&lt;`      |Compare    \n      |`&lt;=`      |Compare    \n      |`!`      |LogicalNot    \n      |`%`      |Mod    \n      |`*` (binary)      |Multiply    \n      |`~`      |OnesComplement    \n      |`-` (binary)      |Subtract    \n      |`-` (unary)      |Negate    \n      |`+` (unary)      |Plus    \n\nThis rule raises an issue when there is an operator overload without the expected named alternative method.\n\n## Exceptions\n\nThis rule does not raise an issue when the class implementing the comparison operators `&gt;`, `&lt;`, `&gt;=` and\n`&lt;=` contains a method named `CompareTo`.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1905",
        "display_name": "CsharpsquidS1905",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant casts should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnnecessary casting expressions make the code harder to read and understand.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIssues are not raised against C# 7.1 `default` literal.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5034",
        "display_name": "CsharpsquidS5034",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"ValueTask\" should be consumed correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`ValueTask&lt;TResult&gt;` was introduced in .NET Core 2.0 <a\nhref=\"https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/\">to optimize memory allocation</a> when functions\nreturn their results synchronously.\n\n`ValueTask` and `ValueTask&lt;TResult&gt;` should **never** be used in the following ways as it could result in\na race condition:\n\n  <li> Calling `await` multiple times on a `ValueTask / ValueTask&lt;TResult&gt;`*. The wrapped object may have been reused by\n  another operation. This differs from `Task / Task&lt;TResult&gt;`, on which you can await multiple times and always get the same result.\n  </li>\n  <li> Calling `await` concurrently on a `ValueTask / ValueTask&lt;TResult&gt;`*. The underlying object is not thread safe.\n  What's more, it has the same effect as awaiting multiple times a `ValueTask / ValueTask&lt;TResult&gt;`. This again differs from\n  `Task / Task&lt;TResult&gt;`, which support concurrent `await`. </li>\n  <li> Using `.Result` or `.GetAwaiter().GetResult()` without checking if the operation completed*. <code>IValueTaskSource /\n  IValueTaskSource&lt;TResult&gt;</code> implementations are not required to block until the operation completes. On the other hand, <code>Task /\n  Task&lt;TResult&gt;</code> blocks the call until the task completes. </li>\n\nIt is recommended to use `ValueTask / ValueTask&lt;TResult&gt;` either by calling \"await\" on the function returning it, optionally\ncalling `ConfigureAwait(false)` on it, or by calling `.AsTask()` on it.\n\nThis rule raises an issue when the following operations are performed on a `ValueTask / ValueTask&lt;TResult&gt;` instance:\n\n  -  Awaiting the instance multiple times. \n  -  Calling `AsTask` multiple times. \n  -  Using `.Result` or `.GetAwaiter().GetResult()` multiple times \n  -  Using `.Result` or `.GetAwaiter().GetResult()` when the operation has not yet completed \n  -  Using more than one of these ways to consume the instance. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not raise any issue when a `ValueTask / ValueTask&lt;TResult&gt;` is awaited multiple time in a loop.\n\n## See\n\n  <li> [ValueTask&lt;TResult&gt; official documentation](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1)\n  </li>\n  <li> <a href=\"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/\">Understanding the Whys,\n  Whats, and Whens of ValueTask</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4060",
        "display_name": "CsharpsquidS4060",
        "severity": "info",
        "category": "convention",
        "rule_title": "Non-abstract attributes should be sealed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.\n\nThis rule raises an issue when a public type inherits from `System.Attribute`, is not abstract, and is not sealed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4061",
        "display_name": "CsharpsquidS4061",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"params\" should be used instead of \"varargs\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method using the `VarArgs` calling convention is not Common Language Specification (CLS) compliant and might not be accessible across\nprogramming languages, while the `params` keyword works the same way and is CLS compliant.\n\nThis rule raises an issue when a `public` or `protected` type contains a `public` or `protected` method\nthat uses the `VarArgs` calling convention.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nInterop methods using `VarArgs` calling convention do not raise an issue.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1858",
        "display_name": "CsharpsquidS1858",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"ToString()\" calls should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly\ninvoking `ToString()` when the compiler would do it implicitly is also needless code-bloat.\n\nThis rule raises an issue when `ToString()` is invoked:\n\n  -  on a `string` \n  -  on a non-`string` operand to concatenation \n  -  on an argument to `string.Format` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule does not report on value types, where leaving off the `ToString()` call would result in automatic boxing.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4070",
        "display_name": "CsharpsquidS4070",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an externally visible enumeration is marked with `FlagsAttribute` and one, or more, of its values is not\na power of 2 or a combination of the other defined values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5042",
        "display_name": "CsharpsquidS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](https://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> [CERT, IDS04-J.](https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream) - Safely\n  extract files from ZipInputStream </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1854",
        "display_name": "CsharpsquidS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported when \n\n  -  the analyzed method body contains `try` blocks, \n  -  a lambda expression captures the local variables, or \n  -  the variable is unused (case covered by Rule S1481) \n  <li> initializations to `-1`, `0`, `1`, `null`, `true`, `false`, `\"\"`\n  and `string.Empty`. </li>\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2701",
        "display_name": "CsharpsquidS2701",
        "severity": "error",
        "category": "convention",
        "rule_title": "Literal boolean values should not be used in assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2952",
        "display_name": "CsharpsquidS2952",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is possible in an `IDisposable` to call `Dispose` on class members from any method, but the contract of\n`Dispose` is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource\nleaks.\n\nThis rule also applies for disposable ref structs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-459](http://cwe.mitre.org/data/definitions/459.html) - Incomplete Cleanup \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3908",
        "display_name": "CsharpsquidS3908",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Generic event handlers should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from `System.EventArgs`. The\n`System.EventHandler&lt;TEventArgs&gt;` delegate mechanism should be used instead as it allows any class derived from\n`EventArgs` to be used with that handler.\n\nThis rule raises an issue when an old style delegate is used as an event handler.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3909",
        "display_name": "CsharpsquidS3909",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collections should implement the generic interface",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe NET Framework 2.0 introduced the generic interface `System.Collections.Generic.IEnumerable&lt;T&gt;` and it should be preferred over\nthe older, non generic, interfaces.\n\nThis rule raises an issue when a public type implements `System.Collections.IEnumerable`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1862",
        "display_name": "CsharpsquidS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`. \n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3927",
        "display_name": "CsharpsquidS3927",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Serialization event handlers should be implemented correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSerialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated\nde/serialization.\n\nThis rule raises an issue when a method marked with one of the following attributes is `public`, `static`, does not return\n`void`, has type parameters, or does not have a single parameter of type `System.Runtime.Serialization.StreamingContext`:\n\n  -  `System.Runtime.Serialization.OnSerializingAttribute` \n  -  `System.Runtime.Serialization.OnSerializedAttribute` \n  -  `System.Runtime.Serialization.OnDeserializingAttribute` \n  -  `System.Runtime.Serialization.OnDeserializedAttribute` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3928",
        "display_name": "CsharpsquidS3928",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameter names used into ArgumentException constructors should match an existing one",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome constructors of the `ArgumentException`, `ArgumentNullException`, `ArgumentOutOfRangeException` and\n`DuplicateWaitObjectException` classes must be fed with a valid parameter name. This rule raises an issue in two cases:\n\n  -  When this parameter name doesn't match any existing ones. \n  -  When a call is made to the default (parameterless) constructor \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule won't raise an issue if the parameter name is not a constant value (inline declaration, nameof() or const variable).\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3925",
        "display_name": "CsharpsquidS3925",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"ISerializable\" should be implemented correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `ISerializable` interface is the mechanism to control the type serialization process. If not implemented correctly this could result\nin an invalid serialization and hard to detect bugs.\n\nThis rules raises an issue on types that implement `ISerializable` without following the serialization pattern recommended by\nMicrosoft.\n\nSpecifically this rule checks for these problems:\n\n  -  The `System.SerializableAttribute` attribute is missing. \n  -  Non-serializable fields are not marked with the `System.NonSerializedAttribute` attribute. \n  -  There is no serialization constructor. \n  -  An unsealed type has a serialization constructor that is not `protected`. \n  -  A sealed type has a serialization constructor that is not `private`. \n  -  An unsealed type has a `ISerializable.GetObjectData` that is not both `public` and `virtual`. \n  -  A derived type has a serialization constructor that does not call the `base` constructor. \n  -  A derived type has a `ISerializable.GetObjectData` method that does not call the `base` method. \n  -  A derived type has serializable fields but the `ISerializable.GetObjectData` method is not overridden. \n\nClasses which inherit from `Exception` are implementing `ISerializable`. Make sure `[Serializable]` attribute is\nused and that `ISerializable`&nbsp;is correctly implemented.&nbsp;Even it you don’t plan to explicitly serialize the object yourself, it\nmight still require serialization, for instance when crossing the boundary of an `AppDomain`.\n\n## Noncompliant Code Example\n\nor\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Classes in test projects are not checked. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3926",
        "display_name": "CsharpsquidS3926",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Deserialization methods should be provided for \"OptionalField\" members",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFields marked with `System.Runtime.Serialization.OptionalFieldAttribute` are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.\n\nThis rule raises when at least one field with the `System.Runtime.Serialization.OptionalFieldAttribute` attribute is declared but one\n(or both) of the following event handlers `System.Runtime.Serialization.OnDeserializingAttribute` or\n`System.Runtime.Serialization.OnDeserializedAttribute` are not present.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2953",
        "display_name": "CsharpsquidS2953",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Dispose` as a method name should be used exclusively to implement `IDisposable.Dispose` to prevent any confusion.\n\nIt may be tempting to create a `Dispose` method for other purposes, but doing so will result in confusion and likely lead to problems in\nproduction.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nMethods named `Dispose` and invoked from the `IDisposable.Dispose` implementation are not reported.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2955",
        "display_name": "CsharpsquidS2955",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a\n`struct`, could also be passed. In such cases, comparing the type parameter to `null` would always be false, because a\n`struct` can be empty, but never `null`. If a value type is truly what's expected, then the comparison should use\n`default()`. If it's not, then constraints should be added so that no value type can be passed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3923",
        "display_name": "CsharpsquidS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S131",
        "display_name": "CsharpsquidS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch/Select\" statements should contain a \"default/Case Else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. Even when the `switch` covers all current values of an `enum`, a\n`default` case should still be used because there is no guarantee that the `enum` won't be extended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S125",
        "display_name": "CsharpsquidS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S127",
        "display_name": "CsharpsquidS127",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for\" loop stop conditions should be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. \n\nStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\n\nThis rule tracks three types of non-invariant stop conditions:\n\n  -  When the loop counters are updated in the body of the `for` loop \n  -  When the stop condition depend upon a method call \n  -  When the stop condition depends on an object property, since such properties could change during the execution of the loop. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S134",
        "display_name": "CsharpsquidS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `switch`, `for`, `foreach`, `while`, `do`, and `try`\nstatements are key ingredients for making what's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S126",
        "display_name": "CsharpsquidS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNone\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1607",
        "display_name": "CsharpsquidS1607",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Tests should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\n\nThis rule raises an issue for each ignored test that does not have a `WorkItem` attribute nor a comment about why it is being skipped on\nthe right side of the `Ignore` attribute.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nThe rule doesn't raise an issue if:\n\n  -  the test method is also marked with `WorkItem` attribute \n  -  there is a comment on the right side of the `Ignore` attribute \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2930",
        "display_name": "CsharpsquidS2930",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"IDisposables\" should be disposed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency\nreasons, some objects such as `Bitmap` use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have\npotentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed\nfootprint, and fails to reclaim the unmanaged memory (by calling `Bitmap`'s finalizer method) in a timely fashion. \n\nMoreover, memory is not the only system resource which needs to be managed in a timely fashion: The operating system can only handle having so many\nfile descriptors (e.g. `FileStream`) or sockets (e.g. `WebClient`) open at any given time. Therefore, it is important to\n`Dispose` of them as soon as they are no longer needed, rather than relying on the garbage collector to call these objects' finalizers at\nsome nondeterministic point in the future.\n\nThis rule tracks `private` fields and local variables of the following `IDisposable` types, which are never disposed, closed,\naliased, returned, or passed to other methods.\n\n  <li> `System.IO` namespace\n    <ul>\n      -  `System.IO.FileStream` \n      -  `System.IO.StreamReader` \n      -  `System.IO.StreamWriter` \n    \n      -  `System.Net.WebClient` \n    \n      -  `System.Net.Sockets.Socket` \n      -  `System.Net.Sockets.TcpClient` \n      -  `System.Net.Sockets.UdpClient` \n    \n      -  `System.Drawing.Image` \n      -  `System.Drawing.Bitmap` \n    \nwhich are either instantiated directly using the `new` operator, or using one of the following factory methods:\n\n  -  `System.IO.File.Create()` \n  -  `System.IO.File.Open()` \n  -  `System.Drawing.Image.FromFile()` \n  -  `System.Drawing.Image.FromStream()` \n\non both private fields and local variables.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`IDisposable` variables returned from a method or passed to other methods are ignored, as are local `IDisposable`s that are\ninitialized with other `IDisposable`s.\n\n## See\n\n  -  [MITRE, CWE-459](http://cwe.mitre.org/data/definitions/459.html) - Incomplete Cleanup \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1848",
        "display_name": "CsharpsquidS1848",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Objects should not be created to be dropped immediately without being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.\n\nIf it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3906",
        "display_name": "CsharpsquidS3906",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Event Handlers should have the correct signature",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:\n\n  -  Return type `void`. \n  -  First argument of type `System.Object` and named 'sender'. \n  -  Second argument of type `System.EventArgs` (or any derived type) and is named 'e'. \n\nThis rule raises an issue whenever a `delegate` declaration doesn't match that signature.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[Handling and Raising Events](https://msdn.microsoft.com/en-us/library/edzehd2t.aspx)\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3903",
        "display_name": "CsharpsquidS3903",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Types should be defined in named namespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTypes are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3904",
        "display_name": "CsharpsquidS3904",
        "severity": "error",
        "category": "convention",
        "rule_title": "Assemblies should have version information",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf no `AssemblyVersionAttribute` is provided, the same default version will be used for every build. Since the version number is used by\nThe .NET Framework to uniquely identify an assembly this can lead to broken dependencies.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[Microsoft documentation - Assembly Versioning](https://docs.microsoft.com/en-us/dotnet/standard/assembly/versioning)\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2933",
        "display_name": "CsharpsquidS2933",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Fields that are only assigned in the constructor should be \"readonly\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`readonly` fields can only be assigned in a class constructor. If a class has a field that's not marked `readonly` but is\nonly set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked\n`readonly` to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Fields with attributes are ignored. \n  -  Fields of type `struct` that are not primitive or pointer types are also ignored because of possible unwanted behavior. \n\n## See\n\n  -  [Mutating readonly structs](https://ericlippert.com/2008/05/14/mutating-readonly-structs/) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2934",
        "display_name": "CsharpsquidS2934",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile the properties of a `readonly` reference type field can still be changed after initialization, those of a `readonly`\nvalue field, such as a `struct`, cannot. \n\nIf the member could be either a `class` or a `struct` then assignment to its properties could be unreliable, working\nsometimes but not others.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3902",
        "display_name": "CsharpsquidS3902",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Assembly.GetExecutingAssembly\" should not be called",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `Type.Assembly` to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other\nhand, `Assembly.GetExecutingAssembly()` can take up to 30 times as long because it walks up the call stack to find the assembly.\n\nNote that `Assembly.GetExecutingAssembly()` is different than `Type.Assembly` because it dynamically returns the assembly\nthat contains the startup object of the currently executed application. For example, if executed from an application it will return the application\nassembly, but if executed from a unit test project it could return the unit test assembly. `Type.Assembly` always returns the assembly that\ncontains the specified type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2931",
        "display_name": "CsharpsquidS2931",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `IDisposable` object should be disposed (there are some rare exceptions where not disposing is fine, most notably `Task`).\nIf a class has an `IDisposable` field, there can be two situations:\n\n  -  The class observes a field that is under the responsibility of another class. \n  -  The class owns the field, and is therefore responsible for calling `Dispose` on it. \n\nIn the second case, the safest way for the class to ensure `Dispose` is called is to call it in its own `Dispose` function,\nand therefore to be itself `IDisposable`. A class is considered to own an `IDisposable` field resource if it created the object\nreferenced by the field.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-459](http://cwe.mitre.org/data/definitions/459.html) - Incomplete Cleanup \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3900",
        "display_name": "CsharpsquidS3900",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Arguments of public methods should be validated against null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In\ngeneral, checking against `null` is recommended defensive programming.\n\nThis rule raises an issue when a parameter of a publicly accessible method is not validated against `null` before being\ndereferenced.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nTo create a custom null validation method declare an attribute with name `ValidatedNotNullAttribute` and mark the parameter that is\nvalidated for null in your method declaration with it:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S138",
        "display_name": "CsharpsquidS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4005",
        "display_name": "CsharpsquidS4005",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"System.Uri\" arguments should be used instead of strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The `System.Uri`\nclass is a safe alternative and should be preferred.\n\nThis rule raises an issue when a called method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\" and the\ndeclaring type contains a corresponding overload that takes a `System.Uri` as a parameter.\n\nWhen there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes\na `System.Uri` argument.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S110",
        "display_name": "CsharpsquidS110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inheritance tree of classes should not be too deep",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.\n\nThis rule raises an issue when the inheritance tree, starting from `Object` has a greater depth than is allowed. \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2068",
        "display_name": "CsharpsquidS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Issue is not raised when URI username and password are the same. \n  -  Issue is not raised when searched pattern is found in variable name and value. \n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5332",
        "display_name": "CsharpsquidS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S112",
        "display_name": "CsharpsquidS112",
        "severity": "warning",
        "category": "convention",
        "rule_title": "General exceptions should never be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThrowing such general exceptions as `Exception`, `SystemException`, `ApplicationException`,\n`IndexOutOfRangeException`, `NullReferenceException`, `OutOfMemoryException` and\n`ExecutionEngineException` prevents calling methods from handling true, system-generated exceptions differently than application-generated\nerrors. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-397](http://cwe.mitre.org/data/definitions/397.html) - Declaration of Throws for Generic Exception \n  -  [CERT, ERR07-J.](https://wiki.sei.cmu.edu/confluence/x/_DdGBQ) - Do not throw RuntimeException, Exception, or Throwable \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4004",
        "display_name": "CsharpsquidS4004",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collection properties should be readonly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA writable collection property can be replaced by a completely different collection. Making it `readonly` prevents that while still\nallowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method\nto remove all the elements (e.g. `System.Collections.List&lt;T&gt;.Clear`) and a method to populate the collection (e.g.\n`System.Collections.List&lt;T&gt;.AddRange`).\n\nThis rule raises an issue when an externally visible writable property is of a type that implements `System.Collections.ICollection` or\n`System.Collections.Generic.ICollection&lt;T&gt;`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not raise issues for\n\n  -  `string`, `Array` and `PermissionSet,` \n  -  properties marked as `DataMemberAttribute` \n  -  classes marked as `Serializable` \n  -  properties overriding a base class member \n  -  properties implementing interface \n\n&nbsp;\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2187",
        "display_name": "CsharpsquidS2187",
        "severity": "error",
        "category": "convention",
        "rule_title": "TestCases should contain tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it\nis not.\n\nSupported test frameworks are `NUnit` and `MSTest` (not applicable to `xUnit`).\n\nThis rule will raise an issue when any of these conditions are met:\n\n  <li> For **NUnit**, a class is marked with `TestFixture` but does not contain any method marked with `Test`,\n  `TestCase`, `TestCaseSource` or `Theory`. </li>\n  <li> For **MSTest**, a class is marked with `TestClass` but does not contain any method marked with `TestMethod`\n  or `DataTestMethod`. </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  abstract classes \n  -  derived classes that inherit from a base class that does have test methods \n  <li> in **MSTest**, classes that contain methods marked with either `AssemblyInitialize` or `AssemblyCleanup`.\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4487",
        "display_name": "CsharpsquidS4487",
        "severity": "error",
        "category": "convention",
        "rule_title": "Unread \"private\" fields should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPrivate fields only used to store values without reading them later is a case of dead store. So changing the value of such field is useless and\nmost probably indicates a serious error in the code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3397",
        "display_name": "CsharpsquidS3397",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`object.Equals()` overrides can be optimized by checking first for reference equality between `this` and the parameter. This\ncheck can be implemented by calling `object.ReferenceEquals()` or `base.Equals()`, where `base` is\n`object`. However, using `base.Equals()` is a maintenance hazard because while it works if you extend `Object`\ndirectly, if you introduce a new base class that overrides `Equals`, it suddenly stops working.\n\nThis rule raises an issue if `base.Equals()` is used but `base` is not `object`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4002",
        "display_name": "CsharpsquidS4002",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Disposable types should declare finalizers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:\n\n  -  `System.IntPtr` \n  -  `System.UIntPtr` \n  -  `System.Runtime.InteropService.HandleRef` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Related: {rule:csharpsquid:S3881} - \"IDisposable\" should be implemented correctly \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2184",
        "display_name": "CsharpsquidS2184",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Results of integer division should not be assigned to floating point variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen division is performed on `int`s, the result will always be an `int`. You can assign that result to a\n`double`, `float` or `decimal` with automatic type conversion, but having started as an `int`, the result\nwill likely not be what you expect. If the result of `int` division is assigned to a floating-point variable, precision will have been lost\nbefore the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-190](http://cwe.mitre.org/data/definitions/190) - Integer Overflow or Wraparound \n  <li> [CERT, NUM50-J.](https://wiki.sei.cmu.edu/confluence/x/AjdGBQ) - Convert integers to floating point for floating-point operations\n  </li>\n  <li> [CERT, INT18-C.](https://wiki.sei.cmu.edu/confluence/x/I9cxBQ) - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat2) - Risky Resource Management \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S103",
        "display_name": "CsharpsquidS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S105",
        "display_name": "CsharpsquidS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4000",
        "display_name": "CsharpsquidS4000",
        "severity": "error",
        "category": "convention",
        "rule_title": "Pointers to unmanaged memory should not be visible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `IntPtr` and `UIntPtr` types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a\npointer is not secured by making it `private`, `internal` or `readonly`, it can lead to a vulnerability allowing\naccess to arbitrary locations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5693",
        "display_name": "CsharpsquidS5693",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing requests with excessive content length is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevents DoS attacks.\n\n## Ask Yourself Whether\n\n  -  size limits are not defined for the different resources of the web application. \n  -  the web application is not protected by [rate limiting](https://en.wikipedia.org/wiki/Rate_limiting) features. \n  -  the web application infrastructure has limited resources. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      -  lower or equal to 8mb for file uploads. \n      -  lower or equal to 2mb for other requests. \n    \nIt is recommended to customize the rule with the limit values that correspond to the web application.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Owasp Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html) - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [CWE-770](https://cwe.mitre.org/data/definitions/770.html) - Allocation of Resources Without Limits or Throttling \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S104",
        "display_name": "CsharpsquidS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2183",
        "display_name": "CsharpsquidS2183",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Integral numbers should not be shifted by zero or more than their number of bits-1",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.\n\nIf the first operand is an `int` or `uint` (32-bit quantity), the shift count is given by the low-order five bits of the\nsecond operand. That is, the actual shift count is 0 to 31 bits.\n\nNote that integral number with a less than 32-bit quantity (e.g. `short`, `ushort`...) are implicitly converted to\n`int` before the shifting operation and so the rule for `int`/`uint` applies.\n\nIf the first operand is a `long` or `ulong` (64-bit quantity), the shift count is given by the low-order six bits of the\nsecond operand. That is, the actual shift count is 0 to 63 bits.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:\n\n  -  When the value shifted is a literal. \n  -  When there is a similar shift at the same position on line before or after. E.g.: \n\n## See\n\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\">Microsoft\n  documentation - Bitwise and shift operators</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S106",
        "display_name": "CsharpsquidS106",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Standard outputs should not be used directly to log anything",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen logging a message there are several important requirements which must be fulfilled:\n\n  -  The user must be able to easily retrieve the logs \n  -  The format of all logged message must be uniform to allow the user to easily read the log \n  -  Logged data must actually be recorded \n  -  Sensitive data must only be logged securely \n\nIf a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThe following are ignored by this rule:\n\n  -  Console Applications \n  -  Calls in methods decorated with `[Conditional (\"DEBUG\")]` \n  -  Calls included in DEBUG preprocessor branches (`#if DEBUG`) \n\n## See\n\n  -  [CERT, ERR02-J.](https://wiki.sei.cmu.edu/confluence/x/nzdGBQ) - Prevent exceptions while logging data \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S107",
        "display_name": "CsharpsquidS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S108",
        "display_name": "CsharpsquidS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S109",
        "display_name": "CsharpsquidS109",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Magic numbers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\n\nUsing magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\n\nThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\n\n-1, 0 and 1 are not considered magic numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise an issue when the magic number is used as part of the `GetHashCode` method or a variable/field declaration.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4018",
        "display_name": "CsharpsquidS4018",
        "severity": "info",
        "category": "convention",
        "rule_title": "Generic methods should provide type parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not\npossible when a parameter type is missing from the argument list.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3169",
        "display_name": "CsharpsquidS3169",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiple \"OrderBy\" calls should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in chaining multiple `OrderBy` calls in a LINQ; only the last one will be reflected in the result because each\nsubsequent call completely reorders the list. Thus, calling `OrderBy` multiple times is a performance issue as well, because all of the\nsorting will be executed, but only the result of the last sort will be kept.\n\nInstead, use `ThenBy` for each call after the first. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4016",
        "display_name": "CsharpsquidS4016",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Enumeration members should not be named \"Reserved\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf an `enum` member's name contains the word \"reserved\" it implies it is not currently used and will be change in the future. However\nchanging an `enum` member is a breaking change and can create significant problems. There is no need to reserve an `enum` member\nsince a new member can be added in the future, and such an addition will usually not be a breaking change.\n\nThis rule raises an issue when the name of an enumeration member contains \"reserved\".\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4019",
        "display_name": "CsharpsquidS4019",
        "severity": "error",
        "category": "convention",
        "rule_title": "Base class methods should not be hidden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly\nderived (e.g. `object` vs `string`), the result is that the base method becomes hidden.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S121",
        "display_name": "CsharpsquidS121",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control structures should use curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP19-C.](https://wiki.sei.cmu.edu/confluence/x/g9YxBQ) - Use braces for the body of an if, for, or while statement \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4017",
        "display_name": "CsharpsquidS4017",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Method signatures should not contain nested generic types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing\ncode. It should be avoided as much as possible.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3168",
        "display_name": "CsharpsquidS3168",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"async\" methods should not return \"void\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `async` method with a `void` return type is a \"fire and forget\" method best reserved for event handlers because there's no\nway to wait for the method's execution to complete and respond accordingly. There's also no way to `catch` exceptions thrown from the\nmethod.\n\nHaving an `async void` method that is not an event handler could mean your program works some times and not others because of timing\nissues. Instead, `async` methods should return `Task`.\n\nThis rule raises an issue when non-event handler methods are both `async` and `void`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEvent handlers, i.e. methods with two arguments, first one matching type `object` or name `sender` and the second being or\ninheriting from `EventArgs`, are ignored.\n\nMethods named as `OnSomething` are also ignored.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4015",
        "display_name": "CsharpsquidS4015",
        "severity": "error",
        "category": "convention",
        "rule_title": "Inherited member visibility should not be decreased",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nChanging an inherited member to `private` will not prevent access to the base class implementation.\n\nThis rule raises an issue when a `private` method in an unsealed type has a signature that is identical to a `public` method\ndeclared in a base type.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4136",
        "display_name": "CsharpsquidS4136",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method overloads should be grouped together",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAs it is common practice to group method declarations by implemented interface, no issue will be raised for implicit and explicit interface\nimplementations if grouped together with other members of that interface.\n\nAs it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different\naccess modifiers.\n\nExample:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S122",
        "display_name": "CsharpsquidS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAnonymous functions containing a single statement are ignored. Block statements are not considered either.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2197",
        "display_name": "CsharpsquidS2197",
        "severity": "error",
        "category": "convention",
        "rule_title": "Modulus results should not be checked for direct equality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  <li> [CERT, NUM51-J.](https://wiki.sei.cmu.edu/confluence/x/pDdGBQ) - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  -  [CERT, INT10-C](https://wiki.sei.cmu.edu/confluence/x/_NUxBQ) - Do not assume a positive remainder when using the % operator \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S113",
        "display_name": "CsharpsquidS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools work better when files end with an empty line.\n\nThis rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2077",
        "display_name": "CsharpsquidS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2190",
        "display_name": "CsharpsquidS2190",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Recursion should not be infinite",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRecursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other,\nor when `goto` statements are used to move between two segments of code. It can be a useful tool, but unless the method includes a\nprovision to break out of the recursion and `return`, the recursion will continue until the stack overflows and the program crashes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4226",
        "display_name": "CsharpsquidS4226",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extensions should be in separate namespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt makes little sense to create an extension method when it is possible to just add that method to the class itself.\n\nThis rule raises an issue when an extension is declared in the same namespace as the class it is extending.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nUsing separate namespace:\n\nMerging the method in the class:\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3257",
        "display_name": "CsharpsquidS3257",
        "severity": "info",
        "category": "convention",
        "rule_title": "Declarations and initializations should be as concise as possible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.\n\nSpecifically the following should be omitted when they can be inferred:\n\n  -  array element type \n  -  array size \n  -  `new DelegateType` \n  -  `new Nullable&lt;Type&gt;` \n  -  object or collection initializers ({}) \n  -  type of lambda expression parameters \n  -  parameter declarations of anonymous methods when the parameters are not used. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4225",
        "display_name": "CsharpsquidS4225",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extension methods should not extend \"object\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating an extension method that extends `object` is not recommended because it makes the method available on **every** type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be `object`.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1199",
        "display_name": "CsharpsquidS1199",
        "severity": "info",
        "category": "convention",
        "rule_title": "Nested code blocks should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe usage of a code block after a \"case\" is allowed for this rule.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3376",
        "display_name": "CsharpsquidS3376",
        "severity": "info",
        "category": "convention",
        "rule_title": "Attribute, EventArgs, and Exception type names should end with the type being extended",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAdherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, <code>class FirstAttribute :\nAttribute</code> can be used simply with `First`, but you must use the full name for `class AttributeOne : Attribute`.\n\nThis rule raises an issue when classes extending `Attribute`, `EventArgs`, or `Exception`, do not end with their\nparent class names.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nIf a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of whether or not it\nconforms to the convention.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3253",
        "display_name": "CsharpsquidS3253",
        "severity": "info",
        "category": "convention",
        "rule_title": "Constructor and destructor declarations should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSince the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also,\nwhen only a single `public` parameterless constructor is defined in a class, then that constructor can be removed because the compiler\nwould generate it automatically. Similarly, empty `static` constructors and empty destructors are also wasted keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3256",
        "display_name": "CsharpsquidS3256",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"string.IsNullOrEmpty\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `string.Equals` to determine if a string is empty is significantly slower than using `string.IsNullOrEmpty()` or\nchecking for `string.Length == 0`. `string.IsNullOrEmpty()` is both clear and concise, and therefore preferred to laborious,\nerror-prone, manual null- and emptiness-checking.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1075",
        "display_name": "CsharpsquidS1075",
        "severity": "info",
        "category": "convention",
        "rule_title": "URIs should not be hardcoded",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by\ncustomizable parameter.\n\nFurther even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hardcoded.\n\nThis rule raises an issue when URI's or path delimiters are hardcoded.\n\n## Exceptions\n\nThis rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:\n\n  <li> methods: `System.Web.HttpServerUtilityBase.MapPath()`, `System.Web.HttpRequestBase.MapPath()`,\n  `System.Web.HttpResponseBase.ApplyAppPathModifier()`, `System.Web.Mvc.UrlHelper.Content()` </li>\n  -  all methods of: `System.Web.VirtualPathUtility` \n  -  constructors of: `Microsoft.AspNetCore.Mvc.VirtualFileResult`, `Microsoft.AspNetCore.Routing.VirtualPathData` \n\n## See\n\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3011",
        "display_name": "CsharpsquidS3011",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Reflection should not be used to increase accessibility of classes, methods, or fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, SEC05-J.](https://wiki.sei.cmu.edu/confluence/x/_jZGBQ) - Do not use reflection to increase accessibility of classes,\n  methods, or fields </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3251",
        "display_name": "CsharpsquidS3251",
        "severity": "info",
        "category": "convention",
        "rule_title": "Implementations should be provided for \"partial\" methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`partial` methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking\nmethods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to\nproduction, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are\ncritical, missing functionality, the loss of which will lead to unexpected results at runtime.\n\nThis rule raises an issue for partial methods for which no implementation can be found in the assembly.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3254",
        "display_name": "CsharpsquidS3254",
        "severity": "info",
        "category": "convention",
        "rule_title": "Default parameter values should not be passed as arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSpecifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4586",
        "display_name": "CsharpsquidS4586",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Non-async \"Task/Task<T>\" methods should not return null",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturning `null` from a non-`async` `Task`/`Task&lt;T&gt;` method will cause a\n`NullReferenceException` at runtime. This problem can be avoided by returning `Task.FromResult&lt;T&gt;(null)` instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3010",
        "display_name": "CsharpsquidS3010",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Static fields should not be updated in constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssigning a value to a `static` field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\n\nInstead remove the field's `static` modifier, or initialize it statically.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4581",
        "display_name": "CsharpsquidS4581",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"new Guid()\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the syntax `new Guid()` (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:\n\n  1.  An empty GUID, in which case `Guid.Empty` is clearer. \n  1.  A randomly-generated GUID, in which case `Guid.NewGuid()` should be used. \n  1.  A new GUID with a specific initialization, in which case the initialization parameter is missing. \n\nThis rule raises an issue when a parameterless instantiation of the `Guid` struct is found.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4220",
        "display_name": "CsharpsquidS4220",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Events should have proper arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen raising an event, two arguments are expected by the `EventHandler` delegate: Sender and event-data. There are three guidelines\nregarding these parameters:\n\n  -  Do not pass `null` as the sender when raising a non-static event. \n  -  Do pass `null` as the sender when raising a static event. \n  -  Do not pass `null` as the event-data. If no data should be passed, then `EventArgs.Empty` should be used. \n\nThis rule raises an issue when any of these guidelines is not met.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4462",
        "display_name": "CsharpsquidS4462",
        "severity": "error",
        "category": "convention",
        "rule_title": "Calls to \"async\" methods should not be blocking",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMaking blocking calls to `async` methods transforms something that was intended to be asynchronous into a synchronous block. Doing so\ncan cause deadlocks and unexpected blocking of context threads.\n\nAccording to the MSDN documentation:\n\n> \n  <p>The root cause of this deadlock is due to the way `await` handles contexts. By default, when an incomplete `Task` is\n  awaited, the current “context” is captured and used to resume the method when the `Task` completes. This “context” is the current\n  `SynchronizationContext` unless it’s null, in which case it’s the current `TaskScheduler`. GUI and ASP.NET applications have a\n  `SynchronizationContext` that permits only one chunk of code to run at a time. When the `await` completes, it attempts to\n  execute the remainder of the `async` method within the captured context. But that context already has a thread in it, which is\n  (synchronously) waiting for the `async` method to complete. They’re each waiting for the other, causing a deadlock.</p>\n\n      |To Do This …      |Instead of This …      |Use This    \n      |Retrieve the result of a background task      |`Task.Wait`, `Task.Result` or `Task.GetAwaiter.GetResult`      |`await`    \n      |Wait for any task to complete      |`Task.WaitAny`      |`await Task.WhenAny`    \n      |Retrieve the results of multiple tasks      |`Task.WaitAll`      |`await Task.WhenAll`    \n      |Wait a period of time      |`Thread.Sleep`      |`await Task.Delay`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Main methods of Console Applications are not subject to this deadlock issue and so are ignored by this rule. \n  -  `Thread.Sleep` is also ignored when it is used in a non-`async` method. \n  <li> Calls chained after `Task.Run` or `Task.Factory.StartNew` are ignored because they don't suffer from this deadlock issue\n  </li>\n\n## See\n\n  -  [Async/Await - Best Practices in Asynchronous Programming](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4583",
        "display_name": "CsharpsquidS4583",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Calls to delegate's method \"BeginInvoke\" should be paired with calls to \"EndInvoke\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling the `BeginInvoke` method of a delegate will allocate some resources that are only freed-up when `EndInvoke` is\ncalled. This is why you should always pair `BeginInvoke` with an `EndInvoke` to complete your asynchronous call.\n\nThis rule raises an issue when:\n\n  <li> the `BeginInvoke` method is called without any callback and it is not paired with a call to `EndInvoke` in the same\n  block. </li>\n  -  a callback with a single parameter of type `IAsyncResult` doesn't contain a call to `EndInvoke`. \n\n## Noncompliant Code Example\n\nBeginInvoke without callback\n\nBeginInvoke with callback\n\n## Compliant Solution\n\nBeginInvoke without callback\n\nBeginInvoke with callback\n\n## See\n\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\">Calling\nSynchronous Methods Asynchronously</a>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S1192",
        "display_name": "CsharpsquidS1192",
        "severity": "info",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe following are ignored:\n\n  -  literals with fewer than 5 characters \n  -  literals matching one of the parameter names \n  -  literals used in attributes \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5443",
        "display_name": "CsharpsquidS5443",
        "severity": "error",
        "category": "security",
        "rule_title": "Using publicly writable directories is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n`/tmp` in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2012-2451](https://nvd.nist.gov/vuln/detail/CVE-2012-2451) \n  -  [CVE-2015-1838](https://nvd.nist.gov/vuln/detail/CVE-2015-1838) \n\nThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like `/tmp` (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., `TMP`, `TMPDIR` and\n`TEMP`.\n\n  -  `/tmp` \n  -  `/var/tmp` \n  -  `/usr/tmp` \n  -  `/dev/shm` \n  -  `/dev/mqueue` \n  -  `/run/lock` \n  -  `/var/run/lock` \n  -  `/Library/Caches` \n  -  `/Users/Shared` \n  -  `/private/tmp` \n  -  `/private/var/tmp` \n  -  `\\Windows\\Temp` \n  -  `\\Temp` \n  -  `\\TMP` \n  -  `%USERPROFILE%\\AppData\\Local\\Temp` \n\n## Ask Yourself Whether\n\n  -  Files are read from or written into a publicly writable folder \n  -  The application creates files with predictable names into a publicly writable folder \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nOut of the box, .NET is missing secure-by-design APIs to create temporary files. To overcome this, one of the following options can be used:\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Created temporary files in a publicly writable folder and make sure:\n    <ul>\n      -  Generated filename is unpredictable \n      -  File is readable and writable only by the creating user ID \n      -  File descriptor is not inherited by child processes \n      -  File is destroyed as soon as it is closed \n    \n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2178",
        "display_name": "CsharpsquidS2178",
        "severity": "error",
        "category": "convention",
        "rule_title": "Short-circuit logic should be used in boolean contexts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP46-C.](https://wiki.sei.cmu.edu/confluence/x/WNYxBQ) - Do not use a bitwise operator with a Boolean-like operand \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3264",
        "display_name": "CsharpsquidS3264",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Events should be invoked",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEvents that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S101",
        "display_name": "CsharpsquidS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Types should be named in PascalCase",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise,\ntwo consecutive upper case characters are allowed unless they form the whole type name. So, `MyXClass` is compliant, but `XC` on\nits own is not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  The rule ignores types that are marked with `ComImportAttribute` or `InterfaceTypeAttribute`. \n  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier: `IOStream`\n  </li>\n  -  The rule allows having `'_'` characters in class names inside test projects. \n\n## See\n\n  <li> <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\">Microsoft Capitalization\n  Conventions</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3265",
        "display_name": "CsharpsquidS3265",
        "severity": "error",
        "category": "convention",
        "rule_title": "Non-flags enums should not be used in bitwise operations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`enum`s are usually used to identify distinct elements in a set of values. However `enum`s can be treated as bit fields and\nbitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When\n`enum`s are used this way, it is a best practice to mark the `enum` with the `FlagsAttribute`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5445",
        "display_name": "CsharpsquidS5445",
        "severity": "error",
        "category": "security",
        "rule_title": "Insecure temporary file creation methods should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating temporary files using insecure methods exposes the application to race conditions on filenames: a malicious user can try to create a file\nwith a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted.\nThis risk is even higher if the application run with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2014-1858](https://nvd.nist.gov/vuln/detail/CVE-2014-1858) \n  -  [CVE-2014-1932](https://nvd.nist.gov/vuln/detail/CVE-2014-1932) \n\n`Path.GetTempFileName()`&nbsp;generates predictable file names and is inherently unreliable and insecure. Additionally, the&nbsp;method\nwill raise an&nbsp;`IOException` if it is used to create more than 65535 files without deleting previous temporary files.\n\n## Recommended Secure Coding Practices\n\nOut of the box, .NET is missing secure-by-design APIs to create temporary files. To overcome this, one of the following options can be used:\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Created temporary files in a publicly writable folder and make sure:\n    <ul>\n      -  Generated filename is unpredictable \n      -  File is readable and writable only by the creating user ID \n      -  File descriptor is not inherited by child processes \n      -  File is destroyed as soon as it is closed \n    \n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A9](https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities) - Using\n  Components with Known Vulnerabilities </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S100",
        "display_name": "CsharpsquidS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods and properties should be named in PascalCase",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To\nreduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, `MyXMethod` is compliant, but\n`XM` on its own is not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  The rule ignores members in types that are marked with `ComImportAttribute` or `InterfaceTypeAttribute`. \n  -  The rule ignores `extern` methods. \n  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier:\n  `ExecuteOnUIThread`. </li>\n  -  Furthermore, when `'_'` character is found in a name, the camel casing is not enforced. \n\n## See\n\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\">Microsoft Capitalization\nConventions</a>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3262",
        "display_name": "CsharpsquidS3262",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"params\" should be used on overrides",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding methods automatically inherit the `params` behavior. To ease readability, this modifier should be explicitly used in the\noverriding method as well.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3263",
        "display_name": "CsharpsquidS3263",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Static fields should appear in the order they must be initialized",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nStatic field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class\nabove the field or fields required for its initialization will yield unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2053",
        "display_name": "CsharpsquidS2053",
        "severity": "error",
        "category": "security",
        "rule_title": "Hashes should include an unpredictable salt",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn cryptography, a \"salt\" is an extra piece of data which is included when hashing a password. This makes `rainbow-table attacks` more\ndifficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the\nhash value in databases of precomputed hashes (called `rainbow-tables`).\n\nThis rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as `PBKDF2`, is used\nwith a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as `sha1` or `md5`\nas they should not be used to hash passwords.\n\n## Recommended Secure Coding Practices\n\n  -  Use hashing functions generating their own secure salt or generate a secure random value of at least 32 bytes. \n  -  The salt should be unique by user password. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-759](http://cwe.mitre.org/data/definitions/759.html) - Use of a One-Way Hash without a Salt \n  -  [MITRE, CWE-760](http://cwe.mitre.org/data/definitions/760.html) - Use of a One-Way Hash with a Predictable Salt \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2292",
        "display_name": "CsharpsquidS2292",
        "severity": "info",
        "category": "convention",
        "rule_title": "Trivial properties should be auto-implemented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTrivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding\ncleaner and more readable code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2290",
        "display_name": "CsharpsquidS2290",
        "severity": "error",
        "category": "convention",
        "rule_title": "Field-like events should not be virtual",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nField-like events are events that do not have explicit `add` and `remove` methods. The compiler generates a\n`private` `delegate` field to back the event, as well as generating the implicit `add` and `remove`\nmethods.\n\nWhen a `virtual` field-like `event` is overridden by another field-like `event`, the behavior of the C# compiler\nis to generate a new `private` `delegate` field in the derived class, separate from the parent's field. This results in multiple\nand separate events being created, which is rarely what's actually intended.\n\nTo prevent this, remove the `virtual` designation from the parent class event.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3261",
        "display_name": "CsharpsquidS3261",
        "severity": "info",
        "category": "convention",
        "rule_title": "Namespaces should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNamespaces with no lines of code clutter a project and should be removed. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2291",
        "display_name": "CsharpsquidS2291",
        "severity": "error",
        "category": "convention",
        "rule_title": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Enumerable.Sum()` always executes addition in a `checked` context, so an `OverflowException` will be thrown if\nthe value exceeds `MaxValue` even if an `unchecked` context was specified. Using an `unchecked` context anyway\nrepresents a misunderstanding of how `Sum` works.\n\nThis rule raises an issue when an `unchecked` context is specified for a `Sum` on integer types.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen the `Sum()` call is inside a `try-catch` block, no issues are reported.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4047",
        "display_name": "CsharpsquidS4047",
        "severity": "info",
        "category": "convention",
        "rule_title": "Generics should be used when appropriate",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a reference parameter (keyword `ref`) is used, the passed argument type must exactly match the reference parameter type. This means\nthat to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that\ncumbersome down casting and should therefore be preferred.\n\nThis rule raises an issue when a method contains a `ref` parameter of type `System.Object`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4049",
        "display_name": "CsharpsquidS4049",
        "severity": "info",
        "category": "convention",
        "rule_title": "Properties should be preferred",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperties are accessed like fields which makes them easier to use.\n\nThis rule raises an issue when the name of a `public` or `protected` method starts with `Get`, takes no parameter,\nand returns a value that is not an array.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule doesn't raise an issue when the method:\n\n  -  Is a constructor \n  -  Is an `override` \n  -  Is an interface implementation \n  -  Is `async` \n  -  Returns `Task`, `Task&lt;T&gt;` \n  -  Is named `GetEnumerator`, `GetAwaiter` \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4040",
        "display_name": "CsharpsquidS4040",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings should be normalized to uppercase",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCertain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then\naccurately restored to their original characters.\n\nIt is therefore strongly recommended to normalize characters and strings to uppercase instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Internationalization for Turkish](http://www.i18nguy.com/unicode/turkish-i18n.html) \n  <li> <a href=\"https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/\">How to correctly normalize\n  strings</a> </li>\n  <li> <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage\">Best Practices\n  for Using Strings in .NET</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4041",
        "display_name": "CsharpsquidS4041",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type names should not match namespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and\nmakes the library that much harder to use.\n\nThis rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a\ncase-insensitive comparison.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4058",
        "display_name": "CsharpsquidS4058",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overloads with a \"StringComparison\" parameter should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMany string operations, the `Compare` and `Equals` methods in particular, provide an overload that accepts a\n`StringComparison` enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code\nclearer and easier to maintain.\n\nThis rule raises an issue when a string comparison operation doesn't use the overload that takes a `StringComparison` parameter.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4059",
        "display_name": "CsharpsquidS4059",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Property names should not match get methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperties and Get method should have names that makes them clearly distinguishable.\n\nThis rule raises an issue when the name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected\nproperty.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4056",
        "display_name": "CsharpsquidS4056",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `System.Globalization.CultureInfo` or `IFormatProvider` object is not supplied, the default value that is supplied by\nthe overloaded member might not have the effect that you want in all locales.\n\nYou should supply culture-specific information according to the following guidelines:\n\n  -  If the value will be displayed to the user, use the current culture. See `CultureInfo.CurrentCulture`. \n  <li> If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See\n  `CultureInfo.InvariantCulture`. </li>\n  -  If you do not know the destination of the value, have the data consumer or provider specify the culture. \n\nThis rule raises an issue when a method or constructor calls one or more members that have overloads that accept a\n`System.IFormatProvider` parameter, and the method or constructor does not call the overload that takes the `IFormatProvider`\nparameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the `IFormatProvider` parameter as well as the\nfollowing methods:\n\n  -  `Activator.CreateInstance` \n  -  `ResourceManager.GetObject` \n  -  `ResourceManager.GetString` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will not raise an issue when the overload is marked as obsolete.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4057",
        "display_name": "CsharpsquidS4057",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Locales should be set for data types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen you create a `DataTable` or `DataSet`, you should set the locale explicitly. By default, the locale for these types is\nthe current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant\nculture (`CultureInfo.InvariantCulture`).\n\nThis rule raises an issue when `System.Data.DataTable` or `System.Data.DataSet` instances are created without explicitly\nsetting the locale property (`DataTable.Locale` or `DataSet.Locale`).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4050",
        "display_name": "CsharpsquidS4050",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Operators should be overloaded consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their\nimplementation.\n\nThe following guidelines should be followed:\n\n  -  When providing `operator ==` you should also provide `operator !=` and vice-versa. \n  -  When providing `operator ==` you should also provide `Equals(Object)` and `GetHashCode()`. \n  <li> When providing `operator +` or `operator -` you should also provide `operator ==`, respecting previous\n  guidelines. </li>\n\nThis rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4052",
        "display_name": "CsharpsquidS4052",
        "severity": "info",
        "category": "convention",
        "rule_title": "Types should not extend outdated base types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWith the advent of .NET framework version 2, certain practices have become obsolete.\n\nIn particular, exceptions should now extend `System.Exception` instead of `System.ApplicationException`. Similarly, generic\ncollections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend\n`System.Xml.XmlDocument`.\n\nThis rule raises an issue when an externally visible type extends one of these types:\n\n  -  `System.ApplicationException` \n  -  `System.Xml.XmlDocument` \n  -  `System.Collections.CollectionBase` \n  -  `System.Collections.DictionaryBase` \n  -  `System.Collections.Queue` \n  -  `System.Collections.ReadOnlyCollectionBase` \n  -  `System.Collections.SortedList` \n  -  `System.Collections.Stack` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4055",
        "display_name": "CsharpsquidS4055",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Literals should not be passed as localized parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nString literals embedded in the source code will not be localized properly.\n\nThis rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:\n\n  -  The `LocalizableAttribute` attribute of the parameter or property is set to true. \n  -  The parameter or property name contains \"Text\", \"Message\", or \"Caption\". \n  <li> The name of the string parameter that is passed to a `Console.Write` or `Console.WriteLine` method is either \"value\" or\n  \"format\". </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4025",
        "display_name": "CsharpsquidS4025",
        "severity": "error",
        "category": "convention",
        "rule_title": "Child class fields should not differ from parent class fields only by capitalization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n\n## Exceptions\n\nThis rule ignores same-name fields that are `static` in both the parent and child classes. It also ignores `private` parent\nclass fields, but in all other such cases, the child class field should be renamed.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4027",
        "display_name": "CsharpsquidS4027",
        "severity": "info",
        "category": "convention",
        "rule_title": "Exceptions should provide standard constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExceptions types should provide the following constructors:\n\n  -  `public MyException()` \n  -  `public MyException(string)` \n  -  `public MyException(string, Exception)` \n  -  `protected` or `private MyException(SerializationInfo, StreamingContext)` \n\nThat fourth constructor should be `protected` in unsealed classes, and `private` in sealed classes.\n\nNot having this full set of constructors can make it difficult to handle exceptions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4023",
        "display_name": "CsharpsquidS4023",
        "severity": "info",
        "category": "convention",
        "rule_title": "Interfaces should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom\nattributes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4026",
        "display_name": "CsharpsquidS4026",
        "severity": "info",
        "category": "convention",
        "rule_title": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is important to inform the `ResourceManager` of the language used to display the resources of the neutral culture for an assembly.\nThis improves lookup performance for the first resource loaded. \n\nThis rule raises an issue when an assembly contains a `ResX`-based resource but does not have the\n`System.Resources.NeutralResourcesLanguageAttribute` applied to it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4144",
        "display_name": "CsharpsquidS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEmpty methods, methods with only one line of code and methods with the same name (overload) are ignored.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4022",
        "display_name": "CsharpsquidS4022",
        "severity": "info",
        "category": "convention",
        "rule_title": "Enumerations should have \"Int32\" storage",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy default the storage type of an `enum` is `Int32`. In most cases it is not necessary to change this. In particular you will\nnot achieve any performance gain by using a smaller data type (e.g. `Byte`) and may limit future uses.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3172",
        "display_name": "CsharpsquidS3172",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Delegates should not be subtracted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.\n\nSubtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4143",
        "display_name": "CsharpsquidS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection elements should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3052",
        "display_name": "CsharpsquidS3052",
        "severity": "info",
        "category": "convention",
        "rule_title": "Members should not be initialized to default values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization\nvalues, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's\nconsidered poor style to do so.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`const` fields are ignored.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4159",
        "display_name": "CsharpsquidS4159",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Classes should implement their \"ExportAttribute\" interfaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the Attributed Programming Model, the `ExportAttribute` declares that a part \"exports\", or provides to the composition container, an\nobject that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by\nthe exported object.\n\nIf the type doesn't implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not\nfilled with the exported type) leading to unexpected behaviors/crashes.\n\nThe rule raises an issue when a class doesn't implement or inherit the type declared in the `ExportAttribute`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4260",
        "display_name": "CsharpsquidS4260",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ConstructorArgument\" parameters should exist in constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen creating a custom Markup Extension that accepts parameters in WPF, the `ConstructorArgument` markup must be used to identify the\ndiscrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.\n\nThis rule raises an issue when the string argument to `ConstructorArgumentAttribute` doesn't match any parameter of any constructor.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4036",
        "display_name": "CsharpsquidS4036",
        "severity": "info",
        "category": "security",
        "rule_title": "Searching OS commands in PATH is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen executing an OS command and unless you specify the full path to the executable, then the locations in your application's `PATH`\nenvironment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in\n`PATH` is a directory under his control. \n\n## Ask Yourself Whether\n\n  -  The directories in the PATH environment variable may be defined by not trusted entities. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nFully qualified/absolute path should be used to specify the OS command to execute.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-426](https://cwe.mitre.org/data/definitions/426.html) - Untrusted Search Path \n  -  [MITRE, CWE-427](https://cwe.mitre.org/data/definitions/427.html) - Uncontrolled Search Path Element \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4039",
        "display_name": "CsharpsquidS4039",
        "severity": "error",
        "category": "convention",
        "rule_title": "Interface methods should be callable by derived types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the\ncurrent instance (namely `this`). If the derived type explicitly overrides that interface method, the base implementation becomes\ninaccessible.\n\nThis rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a `public interface`\nand does not provide an alternate, externally visible method with the same name.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not report a violation for an explicit implementation of `IDisposable.Dispose` when an externally visible\n`Close()` or `System.IDisposable.Dispose(Boolean)` method is provided.\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4158",
        "display_name": "CsharpsquidS4158",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Empty collections should not be accessed or iterated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally\nomitted or the developer doesn't understand the situation.\n\nThis rule raises an issue when any use is made of an empty collection other than the following ignored calls: `Add`,\n`AddRange`, `Equals`, `GetHashCode`.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4277",
        "display_name": "CsharpsquidS4277",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"Shared\" parts should not be created with \"new\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a class with `PartCreationPolicy(CreationPolicy.Shared)`, which is part of Managed Extensibility Framework (MEF), means that a\nsingle, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it\nwill most likely result in unexpected behaviours.\n\nThis rule raises an issue when a constructor of a class marked shared with a `PartCreationPolicyAttribute` is invoked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4035",
        "display_name": "CsharpsquidS4035",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes implementing \"IEquatable<T>\" should be sealed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a class implements the `IEquatable&lt;T&gt;` interface, it enters a contract that, in effect, states \"I know how to compare two\ninstances of type T or any type derived from T for equality.\". However if that class is derived, it is very unlikely that the base class will know how\nto make a meaningful comparison. Therefore that implicit contract is now broken.\n\nAlternatively `IEqualityComparer&lt;T&gt;` provides a safer interface and is used by collections or `Equals` could be made\n`virtual`.\n\nThis rule raises an issue when a unsealed, `public` or `protected` class implements `IEquitable&lt;T&gt;` and the\n`Equals` is neither `virtual` nor `abstract`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[IEqualityComparer&lt;T&gt; Interface](https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx)\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S4275",
        "display_name": "CsharpsquidS4275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Getters and setters should access the expected fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperties provide a way to enforce encapsulation by providing `public`, `protected` or `internal` methods that\ngive controlled access to `private` fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly\ncreate the needed properties, which can result in the wrong field being accessed by a getter or setter.\n\nThis rule raises an issue in any of these cases:\n\n  -  A setter does not update the field with the corresponding name. \n  -  A getter does not access the field with the corresponding name. \n\nFor simple properties it is better to use <a\nhref=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\">auto-implemented\nproperties</a> (C# 3.0 or later).\n\nField and property names are compared as case-insensitive. All underscore characters are ignored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S2092",
        "display_name": "CsharpsquidS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content) or not (ie\n  HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\nWhen the `HttpCookie.Secure` property is set to `false` then the cookie will be send during an unencrypted HTTP request:\n\nThe [default value](https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcookie.secure?view=netframework-4.8) of\n`Secure` flag is `false`, unless overwritten by an application's configuration file:\n\n## Compliant Solution\n\nSet the `HttpCookie.Secure` property to `true`:\n\nOr change the default flag values for the whole application by editing the <a\nhref=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v=vs.100)\">Web.config configuration file</a>:\n\n  -  the `requireSSL` attribute corresponds programmatically to the `Secure` field. \n  -  the `httpOnlyCookies` attribute corresponds programmatically to the `httpOnly` field. \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S5122",
        "display_name": "CsharpsquidS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\n### ASP.NET Core MVC\n\n### ASP.NET MVC\n\n## Compliant Solution\n\n### ASP.NET Core MVC\n\n### ASP.Net MVC\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "csharpsquid:S3060",
        "display_name": "CsharpsquidS3060",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"is\" should not be used with \"this\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "cs"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no valid reason to test `this` with `is`. The only plausible explanation for such a test is that you're executing\ncode in a parent class conditionally based on the kind of child class `this` is. But code that's specific to a child class should be\n**in** that child class, not in the parent.\n\n## Noncompliant Code Example\n",
        "disable": false
      }
    ]
  }
]