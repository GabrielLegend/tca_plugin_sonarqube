[
  {
    "name": "tca_plugin_sonarqube",
    "display_name": "SonarQube",
    "description": "static analyzer",
    "license": "LGPL-3.0",
    "libscheme_set": [],
    "task_processes": [
      "analyze",
      "datahandle"
    ],
    "scan_app": "codelint",
    "scm_url": "https://github.com/GabrielLegend/tca_plugin_sonarqube.git",
    "run_cmd": "python src/sq.py",
    "envs": "python_version = 3",
    "build_flag": false,
    "checkrule_set": [
      {
        "real_name": "common-web:DuplicatedBlocks",
        "display_name": "CommonWebDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-web:FailedUnitTests",
        "display_name": "CommonWebFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-web:SkippedUnitTests",
        "display_name": "CommonWebSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-web:InsufficientCommentDensity",
        "display_name": "CommonWebInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-web:InsufficientLineCoverage",
        "display_name": "CommonWebInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-web:InsufficientBranchCoverage",
        "display_name": "CommonWebInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-ruby:FailedUnitTests",
        "display_name": "CommonRubyFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-ruby:DuplicatedBlocks",
        "display_name": "CommonRubyDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-ruby:SkippedUnitTests",
        "display_name": "CommonRubySkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-ruby:InsufficientCommentDensity",
        "display_name": "CommonRubyInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-ruby:InsufficientLineCoverage",
        "display_name": "CommonRubyInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-ruby:InsufficientBranchCoverage",
        "display_name": "CommonRubyInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "php:S1135",
        "display_name": "PhpS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "php:S4524",
        "display_name": "PhpS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be first or last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nfirst or the last one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1131",
        "display_name": "PhpS1131",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lines should not end with trailing whitespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTrailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.\n\nIf you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. \n\n## Exceptions\n\nLines containing only whitespaces.\n",
        "disable": false
      },
      {
        "real_name": "php:S1134",
        "display_name": "PhpS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "php:S1808",
        "display_name": "PhpS1808",
        "severity": "info",
        "category": "convention",
        "rule_title": "Source code should comply with formatting standards",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting\nstandard. The default parameter values conform to the PSR2 standard.\n\n## Noncompliant Code Example\n\nWith the default PSR2 parameter values:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1940",
        "display_name": "PhpS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2115",
        "display_name": "PhpS2115",
        "severity": "error",
        "category": "security",
        "rule_title": "A secure password should be used when connecting to a database",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen relying on the password authentication mode for the database connection, a secure password should be chosen.\n\nThis rule raises an issue when an empty password is used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html) - Broken\n  Authentication </li>\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [MITRE, CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n",
        "disable": false
      },
      {
        "real_name": "php:S2234",
        "display_name": "PhpS2234",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameters should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1144",
        "display_name": "PhpS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" methods should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1145",
        "display_name": "PhpS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "php:S1264",
        "display_name": "PhpS1264",
        "severity": "info",
        "category": "convention",
        "rule_title": "A \"while\" loop should be used instead of a \"for\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the condition expression is defined in a `for` loop, and the initialization and increment expressions are missing, a\n`while` loop should be used instead to increase readability. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1142",
        "display_name": "PhpS1142",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not contain too many return statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "php:S5863",
        "display_name": "PhpS5863",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Assertions should not compare an object to itself",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssertions comparing an object to itself are more likely to be bugs due to developer's carelessness.\n\nThis rule raises an issue when the actual expression matches the expected expression.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1821",
        "display_name": "PhpS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S881",
        "display_name": "PhpS881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n\n  -  It can significantly impair the readability of the code. \n  -  It introduces additional side effects into a statement, with the potential for undefined behavior. \n  -  It is safer to use these operators in isolation from any other arithmetic operators. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nThe following sequence is clearer and therefore safer:\n\n## See\n\n  -  [CERT, EXP30-C.](https://wiki.sei.cmu.edu/confluence/x/StYxBQ) - Do not depend on the order of evaluation for side effects \n  -  [CERT, EXP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/IXw-BQ) - Do not depend on the order of evaluation for side effects \n  <li> [CERT, EXP05-J.](https://wiki.sei.cmu.edu/confluence/x/NDdGBQ) - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S1599",
        "display_name": "PhpS1599",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variable variables should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "php:S1820",
        "display_name": "PhpS1820",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.\n\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "php:S3776",
        "display_name": "PhpS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "php:S2201",
        "display_name": "PhpS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effect, what is the point of making the call if the results are ignored? In such cases, either\nthe function call is useless and should be dropped, or the source code doesn't behave as expected. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP12-C.](https://wiki.sei.cmu.edu/confluence/x/mtYxBQ) - Do not ignore values returned by functions \n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "php:S5713",
        "display_name": "PhpS5713",
        "severity": "info",
        "category": "convention",
        "rule_title": "A subclass should not be in the same \"catch\" clause as a parent class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRepeating an exception class in a single `catch` clause will not fail but it is not what the developer intended. Either the class is not\nthe one which should be caught, or this is dead code.\n\nHaving a subclass and a parent class in the same `catch` clause is also useless. It is enough to keep only the parent class.\n\nThis rule raises an issue when an exception class is duplicated in a `catch` clause, or when an exception class has a parent class in\nthe same `catch` clause.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  RFC - [Catching Multiple Exception Types](https://wiki.php.net/rfc/multiple-catch) \n",
        "disable": false
      },
      {
        "real_name": "php:S1110",
        "display_name": "PhpS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S4502",
        "display_name": "PhpS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Sensitive Code Example\n\nFor [Laravel VerifyCsrfToken middleware](https://laravel.com/docs/8.x/csrf#csrf-excluding-uris)\n\nFor [Symfony Forms](https://symfony.com/doc/current/security/csrf.html#csrf-protection-in-symfony-forms)\n\n## Compliant Solution\n\nFor [Laravel VerifyCsrfToken middleware](https://laravel.com/docs/8.x/csrf#csrf-excluding-uris)\n\nRemember to add [@csrf](https://laravel.com/docs/8.x/blade#csrf-field) blade directive to the relevant forms when removing an element\nfrom $except. Otherwise the form submission will stop working.\n\nFor [Symfony Forms](https://symfony.com/doc/current/security/csrf.html#csrf-protection-in-symfony-forms)\n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "php:NoSonar",
        "display_name": "PhpNosonar",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"NOSONAR\" comments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny issue to quality rule can be deactivated with the `NOSONAR` marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.\n\nThis rule raises an issue when `NOSONAR` is used.\n",
        "disable": false
      },
      {
        "real_name": "php:S2681",
        "display_name": "PhpS2681",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiline blocks should be enclosed in curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCurly braces can be omitted from a one-line block, such as with an `if` statement or `for` loop, but doing so can be\nmisleading and induce bugs.\n\nThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\n\nNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-483](http://cwe.mitre.org/data/definitions/483.html) - Incorrect Block Delimitation \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "php:S1117",
        "display_name": "PhpS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Local variables should not have the same name as class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S4507",
        "display_name": "PhpS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\nCakePHP 1.x, 2.x:\n\nCakePHP 3.0:\n\n## Compliant Solution\n\nCakePHP 1.2:\n\nCakePHP 3.0:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "php:S3415",
        "display_name": "PhpS3415",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assertion arguments should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe standard PHPUnit assertion methods such as **`assertEquals`**, expect the first argument to be the expected value and the\nsecond argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error messages\nwill be confusing.\n\nThis rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1116",
        "display_name": "PhpS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty statements should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty statements, i.e. `;`, are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S1126",
        "display_name": "PhpS1126",
        "severity": "info",
        "category": "convention",
        "rule_title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturn of boolean literal statements wrapped into `if-then-else` ones should be simplified.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1479",
        "display_name": "PhpS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of `case` clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "php:S1488",
        "display_name": "PhpS1488",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variables should not be declared and then immediately returned or thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring a variable only to immediately return or throw it is a bad practice.\n\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2699",
        "display_name": "PhpS2699",
        "severity": "error",
        "category": "convention",
        "rule_title": "Tests should include assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.\n\nThis rule raised an issue when no assertions are found within a PHPUnit test method. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1124",
        "display_name": "PhpS1124",
        "severity": "info",
        "category": "convention",
        "rule_title": "Modifiers should be declared in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:\n\n  1.  final or abstract \n  1.  public or protected or private \n  1.  static \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1125",
        "display_name": "PhpS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe use of literal booleans in comparisons which use identity operators (`===` and `!==`) are ignored.\n",
        "disable": false
      },
      {
        "real_name": "php:S1121",
        "display_name": "PhpS1121",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be made from within sub-expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n\n## Exceptions\n\nAssignments in `while` statement conditions, and assignments enclosed in relational expressions are allowed.\n\n## See\n\n  -  [MITRE, CWE-481](http://cwe.mitre.org/data/definitions/481.html) - Assigning instead of Comparing \n  -  [CERT, EXP45-C.](https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ) - Do not perform assignments in selection statements \n  -  [CERT, EXP51-J.](https://wiki.sei.cmu.edu/confluence/x/ITZGBQ) - Do not perform assignments in conditional expressions \n",
        "disable": false
      },
      {
        "real_name": "php:S1481",
        "display_name": "PhpS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5042",
        "display_name": "PhpS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\nFor [ZipArchive](https://www.php.net/manual/en/class.ziparchive.php) module:\n\nFor [Zip](https://www.php.net/manual/en/ref.zip.php) module:\n\n## Compliant Solution\n\nFor [ZipArchive](https://www.php.net/manual/en/class.ziparchive.php) module:\n\nFor [Zip](https://www.php.net/manual/en/ref.zip.php) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](http://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "php:S3358",
        "display_name": "PhpS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ternary operators should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nExclusively chained shorthand ternary operators `?:` are excluded from this rule.\n",
        "disable": false
      },
      {
        "real_name": "php:S5779",
        "display_name": "PhpS5779",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Assertion failure exceptions should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHPUnit assertions do throw a **PHPUnit\\Framework\\ExpectationFailedException** exception when they fail. This is how PHPUnit internally\nnotices when assertions within testcases fail. However, if such an exception type or one of its parent types is captured within a try-catch block and\nnot rethrown, PHPUnit does not notice the assertion failure.\n\nThis check raises an issue on assertions within the **try** body of a **try-catch** block that do catch exceptions of the type\n**PHPUnit\\Framework\\ExpectationFailedException**, **PHPUnit\\Framework\\AssertionFailedError**, or **Exception**, and do not handle the\nvariable holding the exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5899",
        "display_name": "PhpS5899",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Test methods should be discoverable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe PHPUnit test runner does execute public methods defined within test classes that have a name starting with **\"test\"** or the\n**@test** annotation. Methods that do not convey to this will not get executed. \n\nThis rule raises an issue on methods marked as test methods (by name or annotation) but do not have a public visibility. An issue is also raised on\npublic methods that are not marked as tests, do contain assertions, and are not called from within another discoverable test method within the class.\nNo issues are raised in abstract classes. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1854",
        "display_name": "PhpS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores initializations to -1, 0, 1, `null`, `true`, `false`, `\"\"`, `[]` and\n`array()`.\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "php:S1172",
        "display_name": "PhpS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFunctions in classes that override a class or implement interfaces are ignored.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2260",
        "display_name": "PhpS2260",
        "severity": "warning",
        "category": "convention",
        "rule_title": "PHP parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the PHP parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "php:S2701",
        "display_name": "PhpS2701",
        "severity": "error",
        "category": "convention",
        "rule_title": "Literal boolean values and nulls should not be used in equality assertions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInstead of using boolean literals or **null** in an equality with **assertSame()** or **assertEquals()**, it is recommended to rely\non the alternative functions **assertTrue()**, **assertFalse()**, assertNull(), and **assertNotNull()**.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2038",
        "display_name": "PhpS2038",
        "severity": "info",
        "category": "convention",
        "rule_title": "Colors should be defined in upper case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the\ncode easier to read.\n\nThis rule checks that hexadecimal color definitions are written in upper case.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2830",
        "display_name": "PhpS2830",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Class constructors should not create other objects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDependency injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a\ndependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own\nbehavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1862",
        "display_name": "PhpS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `switch` and a chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to `true`.\n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n\nFor a `switch`, if the first case ends with a `break`, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n\nOn the other hand, if the first case does not end with a `break`, both cases will be executed, but future maintainers may not notice\nthat.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2036",
        "display_name": "PhpS2036",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Files that define symbols should not cause side-effects",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFiles that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on\nthose files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as\n`print` statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and\nside-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to: \n\n  -  generating output \n  -  modifying `ini` settings \n  -  emitting errors or exceptions \n  -  modifying global or static variables \n  -  reading/writing files \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [PHP-FIG Basic Coding Standard PSR1](https://www.php-fig.org/psr/psr-1/), 2.3 - Side Effects \n",
        "disable": false
      },
      {
        "real_name": "php:S1068",
        "display_name": "PhpS1068",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" fields should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `private` field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2037",
        "display_name": "PhpS2037",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Static members should be referenced with \"static::\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReferences in a class to static class members (fields or methods) can be made using either `self::$var` or `static::$var`\n(introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of `self::` references the\noriginal definition of the member, i.e. the superclass version, rather than any override at the subclass level. `static::`, on the other\nhand, references the class that was called at runtime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is raised when `self` is used on a constant field, a private field or a private method.\n",
        "disable": false
      },
      {
        "real_name": "php:S5547",
        "display_name": "PhpS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S1067",
        "display_name": "PhpS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5542",
        "display_name": "PhpS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  -  For block cipher encryption algorithms (like AES): \n\n **** the GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\ninternally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality. Other\nsimilar modes are CCM, CWC, EAX, IAPM and OCB.\n\n **** the CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\nAuthentication Code or similar to achieve data authenticity (integrity) too and thus to <a\nhref=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. \n\n **** the ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block\nalways gets encrypted to the same ciphertext block. This mode should not be used.\n\n  -  For RSA encryption algorithm, the recommended padding scheme is OAEP. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S5783",
        "display_name": "PhpS5783",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Only one method invocation is expected when testing exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.\n\nWhen two of the methods can raise the same exception, not respecting this good practice is a bug, since it is not possible to know what is really\ntested.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1066",
        "display_name": "PhpS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1185",
        "display_name": "PhpS1185",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overriding methods should do more than simply call the same method in the super class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in `final` overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of `equals`, `hashCode` and `toString`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "php:S1186",
        "display_name": "PhpS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission and should be fixed to prevent unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an `UnsupportedOperationException` should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEmpty methods in abstract classes\n",
        "disable": false
      },
      {
        "real_name": "php:S5785",
        "display_name": "PhpS5785",
        "severity": "warning",
        "category": "convention",
        "rule_title": "PHPUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting equality or nullness with PHPUnit's `assertTrue()` or `assertFalse()` should be simplified to the corresponding\ndedicated assertion.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3801",
        "display_name": "PhpS3801",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should use \"return\" consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is dynamically typed, PHP does not enforce a return type on a function. This means that different paths through a function can return\ndifferent types of values, which can be very confusing to the user and significantly harder to maintain.\n\nIn particular, it is consequently also possible to mix empty `return` statements (implicitly returning `null`) with some\nreturning an expression. This rule verifies that all the `return` statements from a function are consistent.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "php:S3923",
        "display_name": "PhpS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "php:S3336",
        "display_name": "PhpS3336",
        "severity": "error",
        "category": "security",
        "rule_title": "\"session.use_trans_sid\" should not be enabled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHP's `session.use_trans_sid` automatically appends the user's session id to urls when cookies are disabled. On the face of it, this\nseems like a nice way to let uncookie-able users use your site anyway. In reality, it makes those users vulnerable to having their sessions hijacked\nby anyone who might:\n\n  -  see the URL over the user's shoulder \n  -  be sent the URL by the user \n  -  retrieve the URL from browser history \n  -  ... \n\nFor that reason, it's better to practice a little \"tough love\" with your users and force them to turn on cookies.\n\nSince `session.use_trans_sid` is off by default, this rule raises an issue when it is explicitly enabled.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S3360",
        "display_name": "PhpS3360",
        "severity": "error",
        "category": "convention",
        "rule_title": "Test class names should end with \"Test\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy default, PHPUnit CLI only executes test classes with names that end in \"Test\". Name your class \"TestClassX.php\", for instance, and it will be\nskipped.\n\nThis rule raises an issue for each test class with a name not ending in \"Test\".\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S836",
        "display_name": "PhpS836",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should be initialized before use",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn PHP it is not required to initialize variables before their usage. However, using uninitialized variables is considered bad practice and should\nbe avoided because of the following reasons:\n\n  <li> The value and type of uninitialized variables depend on the context of their first usage. It is better to be explicit about those to avoid\n  confusion. </li>\n  -  The interpreter raises a warning or a notice in many cases. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-457](http://cwe.mitre.org/data/definitions/457.html) - Use of Uninitialized Variable \n",
        "disable": false
      },
      {
        "real_name": "php:S3699",
        "display_name": "PhpS3699",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The output of functions that don't return anything should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5876",
        "display_name": "PhpS5876",
        "severity": "error",
        "category": "security",
        "rule_title": "A new session should be created during user authentication",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSession fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).\n\n## Noncompliant Code Example\n\nIn a [Symfony Security](https://symfony.com/doc/current/reference/configuration/security.html#session-fixation-strategy)'s context,\nsession fixation protection can be disabled with the value `none` for the `session_fixation_strategy` attribute:\n\n## Compliant Solution\n\nIn a [Symfony Security](https://symfony.com/doc/current/reference/configuration/security.html#session-fixation-strategy)'s context,\nsession fixation protection is enabled by default. It can be explicitly enabled with the values `migrate` and `invalidate` for\nthe `session_fixation_strategy` attribute:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication) -\n  Broken Authentication </li>\n  -  [OWASP Sesssion Fixation](https://www.owasp.org/index.php/Session_fixation) \n  -  [MITRE, CWE-384](https://cwe.mitre.org/data/definitions/384.html) - Session Fixation \n",
        "disable": false
      },
      {
        "real_name": "php:S2005",
        "display_name": "PhpS2005",
        "severity": "info",
        "category": "convention",
        "rule_title": "String literals should not be concatenated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to concatenate literal strings. Doing so is an exercise in reducing code readability. Instead, the strings should be\ncombined.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3337",
        "display_name": "PhpS3337",
        "severity": "error",
        "category": "security",
        "rule_title": "\"enable_dl\" should be disabled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`enable_dl` is on by default and allows `open_basedir` restrictions, which limit the files a script can access, to be\nignored. For that reason, it's a dangerous option and should be explicitly turned off.\n\nThis rule raises an issue when `enable_dl` is not explicitly set to 0 in **php.ini**.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-23](https://cwe.mitre.org/data/definitions/23.html) - Relative Path Traversal \n  -  [MITRE, CWE-36](https://cwe.mitre.org/data/definitions/36.html) - Absolute Path Traversal \n",
        "disable": false
      },
      {
        "real_name": "php:S4423",
        "display_name": "PhpS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different from \"TLSv1.2\", \"TLSv1.3\", \"DTLSv1.2\" or\n\"DTLSv1.3\").\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2003",
        "display_name": "PhpS2003",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"require_once\" and \"include_once\" should be used instead of \"require\" and \"include\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAt root, `require`, `require_once`, `include`, and `include_once` all perform the same task of\nincluding one file in another. However, the way they perform that task differs, and they should not be used interchangeably.\n\n`require` includes a file but generates a fatal error if an error occurs in the process.\n\n`include` also includes a file, but generates only a warning if an error occurs.\n\nPredictably, the difference between `require` and `require_once` is the same as the difference between `include`\nand `include_once` - the \"_once\" versions ensure that the specified file is only included once. \n\nBecause including the same file multiple times could have unpredictable results, the \"once\" versions are preferred.\n\nBecause `include_once` generates only warnings, it should be used only when the file is being included conditionally, i.e. when all\npossible error conditions have been checked beforehand.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3334",
        "display_name": "PhpS3334",
        "severity": "error",
        "category": "security",
        "rule_title": "\"allow_url_fopen\" and \"allow_url_include\" should be disabled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`allow_url_fopen` and `allow_url_include` allow code to be read into a script from URL's. The ability to suck in executable\ncode from outside your site, coupled with imperfect input cleansing could lay your site bare to attackers. Even if your input filtering is perfect\ntoday, are you prepared to bet your site that it will always be perfect in the future?\n\nThis rule raises an issue when either property is explicitly enabled in **php.ini** and when `allow_url_fopen`, which defaults to\nenabled, is not explicitly disabled.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-829](https://cwe.mitre.org/data/definitions/829.html) - Inclusion of Functionality from Untrusted Control Sphere \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat2) - Risky Resource Management \n",
        "disable": false
      },
      {
        "real_name": "php:S2245",
        "display_name": "PhpS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\nAs the `rand()` and `mt_rand()` functions rely on a pseudorandom number generator, it should not be used for\nsecurity-critical applications or for protecting sensitive data.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use functions which rely on a cryptographically strong random number generator such as `random_int()` or `random_bytes()`\n  or `openssl_random_pseudo_bytes()` </li>\n  -  When using `openssl_random_pseudo_bytes()`, provide and check the `crypto_strong` parameter \n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S3335",
        "display_name": "PhpS3335",
        "severity": "warning",
        "category": "security",
        "rule_title": "\"cgi.force_redirect\" should be enabled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `cgi.force_redirect` **php.ini** configuration is on by default, and it prevents unauthenticated access to scripts when PHP is\nrunning as a CGI. Unfortunately, it must be disabled on IIS, OmniHTTPD and Xitami, but in all other cases it should be on.\n\nThis rule raises an issue when when `cgi.force_redirect` is explicitly disabled.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-305](http://cwe.mitre.org/data/definitions/305) - Authentication Bypass by Primary Weakness \n",
        "disable": false
      },
      {
        "real_name": "php:S4426",
        "display_name": "PhpS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic keys should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of cryptographic systems require a sufficient key size to be robust against brute-force attacks.\n\n[NIST recommendations](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf) will be checked for these\nuse-cases:\n\n**Digital Signature Generation** and **Verification:** \n\n  -  p ≥ 2048 AND q ≥ 224 for DSA (`p` is key length and `q` the modulus length) \n  -  n ≥ 2048 for RSA (`n` is the key length) \n\n**Key Agreement**: \n\n  -  p ≥ 2048 AND q ≥ 224 for DH and MQV \n  <li> n ≥ 224 for ECDH and ECMQV (Examples: `secp192r1` is a non-compliant curve (`n` &lt; 224) but `secp224k1` is\n  compliant (`n` &gt;= 224)) </li>\n\n**Symmetric keys**: \n\n  -  key length ≥ 128 bits \n\nThis rule will not raise issues for ciphers that are considered weak (no matter the key size) like `DES`, `Blowfish`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [NIST 800-131A](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf) - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "php:S2004",
        "display_name": "PhpS2004",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNesting functions can quickly turn your code into \"spaghetti code\". Such code is hard to read, refactor and therefore to maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "php:S1155",
        "display_name": "PhpS1155",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"empty()\" should be used to test for emptiness",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `count()` to test for emptiness works, but using `empty()` makes the code more readable and can be more performant\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2001",
        "display_name": "PhpS2001",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Deprecated features should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from\nthe language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no\nuse of the deprecated features should be added to the code, and all existing uses should be gradually removed.\n\nThe following functions were deprecated in PHP 5:\n      |Deprecated      |Use Instead    \n      |`call_user_method()`      |`call_user_func()`    \n      |`call_user_method_array()`      |`call_user_func_array()`    \n      |`define_syslog_variables()`      |    \n      |`dl()`      |    \n      |`ereg()`      |`preg_match()`    \n      |`ereg_replace()`      |`preg_replace()` (note that this is deprecated in PHP 5.5)    \n      |`eregi()`      |`preg_match()` with 'i' modifier    \n      |`eregi_replace()`      |`preg_replace()` with 'i' modifier    \n      |`set_magic_quotes_runtime()` and its alias, `magic_quotes_runtime()`      |    \n      |`session_register()`      |`$_SESSION` superglobal    \n      |`session_unregister()`      |`$_SESSION` superglobal    \n      |`session_is_registered()`      |`$_SESSION` superglobal    \n      |`set_socket_blocking()`      |`stream_set_blocking()`    \n      |`split()`      |`preg_split()`    \n      |`spliti()`      |`preg_split()` with 'i' modifier    \n      |`sql_regcase()`      |    \n      |`mysql_db_query()`      |`mysql_select_db()` and `mysql_query()`    \n      |`mysql_escape_string()`      |`mysql_real_escape_string()`    \n      |Passing locale category names as strings      |Use the LC_* family of constants    \n\nThe following functions were deprecated in PHP 7:\n      |Deprecated      |Use Instead    \n      |`__autoload()`      |`spl_autoload_register()`    \n      |`create_function()`      |anonymous function    \n      |`parse_str()` without second argument      |`parse_str()` with second argument    \n      |`gmp_random()`      |`gmp_random_bits()` or `gmp_random_range()`    \n      |`each()`      |`foreach`    \n      |`assert()` with string argument      |     \n      |Defining case-insensitive constants by calling `define()` with `true` as third parameter      |`define(\"myconst\", $value)` or `define(\"myconst\", $value, false)`    \n      |`FILTER_FLAG_SCHEME_REQUIRED` and `FILTER_FLAG_HOST_REQUIRED` flags      |`FILTER_VALIDATE_URL` flag    \n      |`fgetss()` function, `\"string.strip_tags\"` stream filter name, `SplFileObject::fgetss()` method and      `gzgetss()` function      |     \n      |`mbregex_encoding()`, `mbereg()`, `mberegi()`, `mbereg_replace()`,      `mberegi_replace()`, `mbsplit()`, `mbereg_match()`, `mbereg_search()`,      `mbereg_search_pos()`, `mbereg_search_regs()`, `mbereg_search_init()`, `mbereg_search_getregs()`,      `mbereg_search_getpos()`, `mbereg_search_setpos()`      |Use the<br> corresponding `mb_ereg_*()` variants instead    \n      |string search functions with integer needle (`stristr`, `strrchr`, `strstr`, `strripos`,      `stripos`, `strrpos`, `strpos`, `strchr`)       |use a string needle instead    \n      |`image2wbmp()`      |`imagewbmp()`    \n      |`Normalizer::NONE`      |     \n      |Defining an `assert()` function inside a namespace      |use the standard `assert()` function    \n\n## See\n\n  -  [PHP RFC: Deprecations for PHP 7.3](https://wiki.php.net/rfc/deprecations_php_7_3) \n  -  [PHP RFC: Deprecate and Remove Case-Insensitive Constants](https://wiki.php.net/rfc/case_insensitive_constant_deprecation) \n",
        "disable": false
      },
      {
        "real_name": "php:S2123",
        "display_name": "PhpS2123",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Values should not be uselessly incremented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3333",
        "display_name": "PhpS3333",
        "severity": "error",
        "category": "security",
        "rule_title": "\"open_basedir\" should limit file access",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `open_basedir` configuration in **php.ini** limits the files the script can access using, for example, `include` and\n`fopen()`. Leave it out, and there is no default limit, meaning that any file can be accessed. Include it, and PHP will refuse to access\nfiles outside the allowed path.\n\n`open_basedir` should be configured with a directory, which will then be accessible recursively. However, the use of `.`\n(current directory) as an `open_basedir` value should be avoided since it's resolved dynamically during script execution, so a\n`chdir('/')` command could lay the whole server open to the script.\n\nThis is not a fool-proof configuration; it can be reset or overridden at the script level. But its use should be seen as a minimum due diligence\nstep. This rule raises an issue when `open_basedir` is not present in **php.ini**, and when `open_basedir` contains root,\nor the current directory (`.`) symbol.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-23](https://cwe.mitre.org/data/definitions/23.html) - Relative Path Traversal \n  -  [MITRE, CWE-36](https://cwe.mitre.org/data/definitions/36.html) - Absolute Path Traversal \n",
        "disable": false
      },
      {
        "real_name": "php:S131",
        "display_name": "PhpS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `case default` clause is defensive programming. The clause should either take appropriate action, or contain\na suitable comment as to why no action is taken. Even when the `switch` covers all current values of an `enum`, a default case\nshould still be used because there is no guarantee that the `enum` won't be extended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "php:S2002",
        "display_name": "PhpS2002",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Errors should not be silenced",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust as pain is your body's way of telling you something is wrong, errors are PHP's way of telling you there's something you need to fix. Neither\npain, nor PHP errors should be ignored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5632",
        "display_name": "PhpS5632",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Raised Exceptions must derive from Throwable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInstances of classes that do not derive from the \"Throwable\" interface cannot be used in a PHP \"throw\" statement.\n\nMany built-in exceptions such as \"Exception\" and the SPL exception classes do implement the \"Throwable\" interface and can be extended when creating\ncustom exceptions.\n\nThis rule raises an issue when an instance of a class that does not implement the \"Throwable\" interface is used in a \"throw\" statement .\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S134",
        "display_name": "PhpS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `switch`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "php:S3330",
        "display_name": "PhpS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\nIn **php.ini** you can specify the flags for the session cookie which is security-sensitive:\n\nSame thing in PHP code:\n\nIf you create a custom security-sensitive cookie in your PHP code:\n\nBy default [`setcookie`](https://www.php.net/manual/en/function.setcookie.php) and <a\nhref=\"https://www.php.net/manual/en/function.setrawcookie.php\">`setrawcookie`</a> functions set `httpOnly` flag to\n**false** (the seventh argument) and so cookies can be stolen easily in case of XSS vulnerability:\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "php:S2000",
        "display_name": "PhpS2000",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Files should not contain characters before \"<?php\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving characters before `&lt;?php` can cause \"Cannot modify header information\" errors and similar problems with Ajax requests.\n\n## Noncompliant Code Example\n\nand\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2007",
        "display_name": "PhpS2007",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions and variables should not be defined outside of classes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDefining and using global variables and global functions, when the convention dictates OOP can be confusing and difficult to use properly for\nmultiple reasons:\n\n  -  You run the risk of name clashes. \n  -  Global functions must be stateless, or they can cause difficult-to-track bugs. \n  -  Global variables can be updated from anywhere and may no longer hold the value you expect. \n  -  It is difficult to properly test classes that use global functions. \n\nInstead of being declared globally, such variables and functions should be moved into a class, potentially marked `static`, so they can\nbe used without a class instance. \n\nThis rule checks that only object-oriented programming is used and that no functions or procedures are declared outside of a class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2918",
        "display_name": "PhpS2918",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Configuration should not be changed dynamically",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`ini_set` changes the value of the given configuration option for the duration of the script's execution. While there may be a reason to\ndo this, you should make sure that it's a very good reason indeed, because this is the sort of \"magic\" change which can cause severe teeth-gnashing\nand hair tearing when the script needs to be debugged. \n\nFor instance, if the user explicitly turns logging on for a script, but then the script itself uses `ini_set('display_errors', 0);` to\nturn logging back off, it is likely that every other aspect of the environment will be examined before, in desperation, the script is read to figure\nout where the logging is going.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "php:S1151",
        "display_name": "PhpS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch case\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `switch` statement should be used only to clearly define some new branches in the control flow. As soon as a `case`\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith a threshold of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S125",
        "display_name": "PhpS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "php:S127",
        "display_name": "PhpS127",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for\" loop stop conditions should be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. \n\nStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\n\nThis rule tracks three types of non-invariant stop conditions:\n\n  -  When the loop counters are updated in the body of the `for` loop \n  -  When the stop condition depend upon a method call \n  -  When the stop condition depends on an object property, since such properties could change during the execution of the loop. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S126",
        "display_name": "PhpS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen all branches of an `if-elseif` end with `return`, `break`, `continue` or `throw`, the\ncode that comes after the `if` implicitly behaves as if it was in an `else` clause. This rule will therefore ignore that\ncase.\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "php:S1045",
        "display_name": "PhpS1045",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All \"catch\" blocks should be able to catch exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExceptions handlers (`catch`) are evaluated in the order they are written. Once a match is found, the evaluation stops.\n\nIn some contexts a `catch` block is dead code as it will never catch any exception:\n\n  <li> If there is a handler for a base class followed by a handler for class derived from that base class, the second handler will never trigger: the\n  handler for the base class will match the derived class, and will be the only executed handler. </li>\n  -  When multiple `catch` blocks try to catch the same exception class, only the first one will be executed. \n\nThis rule raises an issue when a `catch` block catches every exception before a later `catch` block could catch it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S128",
        "display_name": "PhpS128",
        "severity": "error",
        "category": "convention",
        "rule_title": "Switch cases should end with an unconditional \"break\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in following cases:\n\n## See\n\n  -  [MITRE, CWE-484](http://cwe.mitre.org/data/definitions/484.html) - Omitted Break Statement in Switch \n  <li> [CERT, MSC17-C.](https://wiki.sei.cmu.edu/confluence/x/ldYxBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> [CERT, MSC52-J.](https://wiki.sei.cmu.edu/confluence/x/1DdGBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2014",
        "display_name": "PhpS2014",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"$this\" should not be used in a static context",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`$this` refers to the current class instance. But static methods can be accessed without instantiating the class, and `$this`\nis not available to them. Using `$this` in a static context will result in a fatal error at runtime.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2010",
        "display_name": "PhpS2010",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"&&\" and \"||\" should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHP has two sets of logical operators: `&amp;&amp;` / `||`, and `and` / `or`. The difference between\nthe sets is precedence. Because `and` / `or` have a lower precedence than almost any other operator, using them instead of\n`&amp;&amp;` / `||` may not have the result you expect.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1607",
        "display_name": "PhpS1607",
        "severity": "warning",
        "category": "convention",
        "rule_title": "A reason should be provided when skipping a test",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\n\nThis rule raises an issue on each test that is marked as incomplete or skipped without a message explaining the reasoning behind it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2011",
        "display_name": "PhpS2011",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"global\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGlobal variables are a useful construct, but they should not be abused. Functions can access the global scope either through the\n`global` keyword or though the `$GLOBALS` array, but these practices considerably reduce the function's readability and\nreusability. Instead, the global variable should be passed as a parameter to the function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S4433",
        "display_name": "PhpS4433",
        "severity": "error",
        "category": "security",
        "rule_title": "LDAP connections should be authenticated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.\n\nSimple authentication in LDAP can be used with three different mechanisms:\n\n  -  **Anonymous Authentication Mechanism** by performing a bind request with a username and password value of zero length. \n  -  **Unauthenticated Authentication Mechanism** by performing a bind request with a password value of zero length. \n  -  **Name/Password Authentication Mechanism** by performing a bind request with a password value of non-zero length. \n\nAnonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n  -  [ldapwiki.com](https://ldapwiki.com/wiki/Simple%20Authentication)- Simple Authentication \n",
        "disable": false
      },
      {
        "real_name": "php:S1603",
        "display_name": "PhpS1603",
        "severity": "warning",
        "category": "convention",
        "rule_title": "PHP 4 constructor declarations should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and\nthe `__construct` method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named\n`__construct` as the class constructor. \n\nThis rule rule raises an issue for each method with the same name as the enclosing class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1605",
        "display_name": "PhpS1605",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"__construct\" functions should not make PHP 4-style calls to parent constructors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with\nthe PHP5 `__construct` name, nested calls to parent constructors should also use the new `__constructor` name.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1848",
        "display_name": "PhpS1848",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Objects should not be created to be dropped immediately without being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.\n\nIf it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1600",
        "display_name": "PhpS1600",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Deprecated predefined variables should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe following predefined variables are deprecated and should be replaced by the new versions:\n      |Replace      |With    \n      |$HTTP_SERVER_VARS      |$_SERVER    \n      |$HTTP_GET_VARS      |$_GET    \n      |$HTTP_POST_VARS      |$_POST    \n      |$HTTP_POST_FILES      |$_FILES    \n      |$HTTP_SESSION_VARS      |$_SESSION    \n      |$HTTP_ENV_VARS      |$_ENV    \n      |$HTTP_COOKIE_VARS      |$_COOKIE    \n      |$php_errormsg      |error_get_last()    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5527",
        "display_name": "PhpS5527",
        "severity": "error",
        "category": "security",
        "rule_title": "Server hostnames should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate. \n\nThe certificate's hostname-specific data should match the server hostname.\n\nIt's not recommended to re-invent the wheel by implementing custom hostname verification.\n\nTLS/SSL libraries provide built-in hostname verification functions that should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-297](https://cwe.mitre.org/data/definitions/297.html) - Improper Validation of Certificate with Host Mismatch \n",
        "disable": false
      },
      {
        "real_name": "php:S2251",
        "display_name": "PhpS2251",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "A \"for\" loop update clause should move the counter in the right direction",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC54-J.](https://wiki.sei.cmu.edu/confluence/x/aTdGBQ) - Avoid inadvertent wrapping of loop counters \n",
        "disable": false
      },
      {
        "real_name": "php:S4790",
        "display_name": "PhpS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S138",
        "display_name": "PhpS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "php:S4792",
        "display_name": "PhpS4792",
        "severity": "error",
        "category": "security",
        "rule_title": "Configuring loggers is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0285](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285) \n  -  [CVE-2000-1127](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127) \n  -  [CVE-2017-15113](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113) \n  -  [CVE-2015-5742](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742) \n\nLogs are useful before, during and after a security incident.\n\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  -  In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \n\nLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\n\nThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  -  the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  -  the logs are only stored locally instead of being backuped or replicated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. \n  -  Production logs should be stored in a secure location which is only accessible to system administrators. \n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n\nRemember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\n\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  -  Monitor the logs for any suspicious activity. \n\n## Sensitive Code Example\n\nBasic PHP configuration:\n\nDefinition of custom loggers with `psr/log`\n\n## Exceptions\n\nNo issue will be raised for logger configuration when it follows <a href=\"https://www.loggly.com/ultimate-guide/php-logging-basics/\">recommended\nsettings</a> for production servers. The following examples are all valid:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [MITRE, CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Information Exposure Through Log Files \n  -  [MITRE, CWE-117](https://cwe.mitre.org/data/definitions/117.html) - Improper Output Neutralization for Logs \n  -  [MITRE, CWE-778](https://cwe.mitre.org/data/definitions/778.html) - Insufficient Logging \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S930",
        "display_name": "PhpS930",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The number of arguments passed to a function should match the number of parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling a function or a method with fewer or more arguments than expected will raise a TypeError. This is usually a bug and should be fixed.\n\nProvide missing arguments to the call, or define default values if there are fewer arguments.\n\nReduce the number of arguments provided by the function call, or add more parameter if there are more arguments than expected.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nNo issue is reported when arguments are used in the body of the function being called.\n\n## See\n\n  -  MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. \n  -  [MITRE, CWE-628](http://cwe.mitre.org/data/definitions/628.html) - Function Call with Incorrectly Specified Arguments \n  <li> [CERT, DCL07-C.](https://wiki.sei.cmu.edu/confluence/x/7NYxBQ) - Include the appropriate type information in function declarators\n  </li>\n  -  [CERT, EXP37-C.](https://wiki.sei.cmu.edu/confluence/x/49UxBQ) - Call functions with the correct number and type of arguments \n",
        "disable": false
      },
      {
        "real_name": "php:S139",
        "display_name": "PhpS139",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comments should not be located at the end of lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S110",
        "display_name": "PhpS110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Inheritance tree of classes should not be too deep",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.\n\nThis rule raises an issue when the inheritance tree, starting from `Object` has a greater depth than is allowed. \n",
        "disable": false
      },
      {
        "real_name": "php:S2068",
        "display_name": "PhpS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "php:S112",
        "display_name": "PhpS112",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Generic exceptions ErrorException, RuntimeException and Exception should not be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.\n\nInstead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-397](http://cwe.mitre.org/data/definitions/397.html) - Declaration of Throws for Generic Exception \n  -  [CERT, ERR07-J.](https://wiki.sei.cmu.edu/confluence/x/_DdGBQ) - Do not throw RuntimeException, Exception, or Throwable \n",
        "disable": false
      },
      {
        "real_name": "php:S5332",
        "display_name": "PhpS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "php:S1656",
        "display_name": "PhpS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S1779",
        "display_name": "PhpS1779",
        "severity": "info",
        "category": "convention",
        "rule_title": "Only LF character (Unix-like) should be used to end lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAll developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover\nsome SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.\n",
        "disable": false
      },
      {
        "real_name": "php:S2187",
        "display_name": "PhpS2187",
        "severity": "error",
        "category": "convention",
        "rule_title": "TestCases should contain tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no point in having a PHPUnit test case without any test methods. Similarly, you shouldn't have a file in the tests directory which extends\nPHPUnit\\Framework\\TestCase but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.\nAdd some test method or make the class abstract if it is used by a real test case class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S905",
        "display_name": "PhpS905",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-empty statements should change control flow or have at least one side-effect",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement (other than a null statement, which means a statement containing only a semicolon `;`) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-482](http://cwe.mitre.org/data/definitions/482) - Comparing instead of Assigning \n",
        "disable": false
      },
      {
        "real_name": "php:S907",
        "display_name": "PhpS907",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"goto\" statement should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`goto` is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas `if`, `for`, `while`, `continue` or `break` should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S103",
        "display_name": "PhpS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "php:S104",
        "display_name": "PhpS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "php:S105",
        "display_name": "PhpS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "php:S5693",
        "display_name": "PhpS5693",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing requests with excessive content length is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevents DoS attacks.\n\n## Ask Yourself Whether\n\n  -  size limits are not defined for the different resources of the web application. \n  -  the web application is not protected by [rate limiting](https://en.wikipedia.org/wiki/Rate_limiting) features. \n  -  the web application infrastructure has limited resources. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      -  lower or equal to 8mb for file uploads. \n      -  lower or equal to 2mb for other requests. \n    \nIt is recommended to customize the rule with the limit values that correspond to the web application.\n\n## Sensitive Code Example\n\nFor [Symfony Constraints](https://symfony.com/doc/current/reference/constraints/File.html#maxsize):\n\nFor [Laravel Validator](https://laravel.com/docs/8.x/validation#rule-max):\n\n## Compliant Solution\n\nFor [Symfony Constraints](https://symfony.com/doc/current/reference/constraints/File.html#maxsize):\n\nFor [Laravel Validator](https://laravel.com/docs/8.x/validation#rule-max):\n\n## See\n\n  <li> [Owasp Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html) - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [CWE-770](https://cwe.mitre.org/data/definitions/770.html) - Allocation of Resources Without Limits or Throttling \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n",
        "disable": false
      },
      {
        "real_name": "php:S107",
        "display_name": "PhpS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S108",
        "display_name": "PhpS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n",
        "disable": false
      },
      {
        "real_name": "php:S1301",
        "display_name": "PhpS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements are useful when there are many different cases depending on the value of the same expression.\n\nFor just one or two cases however, the code will be more readable with `if` statements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1541",
        "display_name": "PhpS1541",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cyclomatic Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\n",
        "disable": false
      },
      {
        "real_name": "php:S1784",
        "display_name": "PhpS1784",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Method visibility should be explicitly declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClass methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To\nprevent any misunderstanding, this visibility should always be explicitly declared.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S121",
        "display_name": "PhpS121",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control structures should use curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP19-C.](https://wiki.sei.cmu.edu/confluence/x/g9YxBQ) - Use braces for the body of an if, for, or while statement \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "php:S1780",
        "display_name": "PhpS1780",
        "severity": "info",
        "category": "convention",
        "rule_title": "Closing tag \"?>\" should be omitted on files containing only PHP",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the PSR2 coding standard:\n\n> \n  The closing `?&gt;` tag should be omitted from files containing only PHP.\n\n\nAccording to the PHP manual:\n\n> \n  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still\n  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at\n  the end of the parts generated by the included files.</p>\n\n",
        "disable": false
      },
      {
        "real_name": "php:S1781",
        "display_name": "PhpS1781",
        "severity": "info",
        "category": "convention",
        "rule_title": "PHP keywords and constants \"true\", \"false\", \"null\" should be lower case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing indifferently lower or upper case for PHP keywords and constants \"true\", \"false\" and \"null\" can impact the readability of PHP source\ncode.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S122",
        "display_name": "PhpS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nAnonymous functions containing a single statement are ignored.\n",
        "disable": false
      },
      {
        "real_name": "php:S2077",
        "display_name": "PhpS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised if one of the functions is called with hard-coded string (no concatenation) and this string does not contain a \"$\"\nsign.\n\nThe current implementation does not follow variables. It will only detect SQL queries which are concatenated or contain a `$` sign\ndirectly in the function call.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2757",
        "display_name": "PhpS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1788",
        "display_name": "PhpS1788",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Method arguments with default values should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. \n\nBut all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2755",
        "display_name": "PhpS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\n## Noncompliant Code Examples\n\n[SimpleXML](https://www.php.net/manual/fr/function.simplexml-load-string.php) object:\n\n[DOMDocument](https://www.php.net/manual/fr/class.domdocument.php) object:\n\n[XMLReader](https://www.php.net/manual/fr/xmlreader.xml.php) object:\n\n## Compliant Solution\n\n[SimpleXML](https://www.php.net/manual/fr/function.simplexml-load-string.php) object:\n\n[DOMDocument](https://www.php.net/manual/fr/class.domdocument.php) object:\n\n[XMLReader](https://www.php.net/manual/fr/xmlreader.xml.php) object:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#php\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "php:S113",
        "display_name": "PhpS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools work better when files end with an empty line.\n\nThis rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "php:S114",
        "display_name": "PhpS114",
        "severity": "info",
        "category": "convention",
        "rule_title": "Interface names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S115",
        "display_name": "PhpS115",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constant names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S116",
        "display_name": "PhpS116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Field names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S117",
        "display_name": "PhpS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1751",
        "display_name": "PhpS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n`if` statement should be used instead.\n\nAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested `return`,\n`break` or `throw` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2047",
        "display_name": "PhpS2047",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The names of methods with boolean return values should start with \"is\" or \"has\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWell-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean property should have names that start with \"is\" or \"has\" rather than with \"get\".\n\nNote that this rule will only apply to functions that are documented to return a boolean.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1871",
        "display_name": "PhpS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:php:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "php:S1990",
        "display_name": "PhpS1990",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"final\" should not be used redundantly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no need to use the `final` modifier inside a `final` class. Everything in it is `final` by default.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2166",
        "display_name": "PhpS2166",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend `Exception` or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2043",
        "display_name": "PhpS2043",
        "severity": "info",
        "category": "convention",
        "rule_title": "Superglobals should not be accessed directly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuperglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad\npractice. Instead, they should be accessed through an object or framework that handles sanitation and validation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2046",
        "display_name": "PhpS2046",
        "severity": "info",
        "category": "convention",
        "rule_title": "Perl-style comments should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1075",
        "display_name": "PhpS1075",
        "severity": "info",
        "category": "convention",
        "rule_title": "URIs should not be hardcoded",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.\n\nFurther even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.\n\nThis rule raises an issue when URI's or path delimiters are hard coded.\n\n## See\n\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "php:S2044",
        "display_name": "PhpS2044",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"php_sapi_name()\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoth `php_sapi_name()` and the `PHP_SAPI` constant give the same value. But calling the method is less efficient that simply\nreferencing the constant. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3011",
        "display_name": "PhpS3011",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Reflection should not be used to increase accessibility of classes, methods, or fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, SEC05-J.](https://wiki.sei.cmu.edu/confluence/x/_jZGBQ) - Do not use reflection to increase accessibility of classes,\n  methods, or fields </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S1757",
        "display_name": "PhpS1757",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"<?php\" and \"<?=\" tags should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCoding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long <code>&lt;?php\n?&gt;</code> tags or the short-echo `&lt;?= ?&gt;` tags; it should not use the other tag variations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1998",
        "display_name": "PhpS1998",
        "severity": "error",
        "category": "convention",
        "rule_title": "References should not be passed to function calls",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPassing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as\nwell, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,\nparticularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than\nmore efficient. \n\nFurther, according to the PHP manual: \n\n> \n  As of PHP 5.3.0, you will get a warning saying that \"call-time pass-by-reference\" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference\n  was removed, so using it will raise a fatal error.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-374](http://cwe.mitre.org/data/definitions/374) - Weakness Base Passing Mutable Objects to an Untrusted Method \n",
        "disable": false
      },
      {
        "real_name": "php:S1996",
        "display_name": "PhpS1996",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should contain only one top-level class or interface each",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.\n",
        "disable": false
      },
      {
        "real_name": "php:S1997",
        "display_name": "PhpS1997",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not contain inline HTML",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the\nsame file, inline HTML should be avoided.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nFile having the extension `.phtml` are ignored by this rule because they are expected to have mixed PHP and HTML.\n",
        "disable": false
      },
      {
        "real_name": "php:S2041",
        "display_name": "PhpS2041",
        "severity": "error",
        "category": "convention",
        "rule_title": "Parentheses should not be used for calls to \"echo\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`echo` can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses\nwith multiple arguments will result in a parse error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2042",
        "display_name": "PhpS2042",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a\nspecific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.\n",
        "disable": false
      },
      {
        "real_name": "php:S1192",
        "display_name": "PhpS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised on:\n\n  -  strings with less than 5 characters \n  -  strings with only letters, numbers, underscores and hyphens \n",
        "disable": false
      },
      {
        "real_name": "php:S1763",
        "display_name": "PhpS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome statements (`return`, `break`, `continue`, `goto`, `switch`) and `throw`\nexpressions move control flow out of the current code block. So any unlabeled statements that come after such a jump are unreachable, and either this\ndead code should be removed, or the logic should be corrected. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S1764",
        "display_name": "PhpS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nLeft-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:php:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "php:S5328",
        "display_name": "PhpS5328",
        "severity": "warning",
        "category": "security",
        "rule_title": "Manual generation of session ID is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a session ID can be guessed (not generated with a secure pseudo random generator, or with insufficient length ...) an attacker may be able to\nhijack another user's session.\n\n## Ask Yourself Whether\n\n  -  the session ID is not unique. \n  -  the session ID is set from a user-controlled input. \n  -  the session ID is generated with not secure pseudo random generator. \n  -  the session ID length is too short. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDon't manually generate session IDs, use instead language based native functionality.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP Sesssion Fixation](https://www.owasp.org/index.php/Session_fixation) \n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [PHP: random_bytes()](https://www.php.net/random-bytes) \n  -  [PHP: session_regenerate_id()](https://www.php.net/session-regenerate-id) \n",
        "disable": false
      },
      {
        "real_name": "php:S100",
        "display_name": "PhpS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method and function names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression: `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with an `@inheritdoc` annotation, as well as magic methods (`__construct()`, `__destruct()`,\n`__call()`, `__callStatic()`, `__get()`, `__set()`, `__isset()`, `__unset()`,\n`__sleep()`, `__wakeup()`, `__toString()`, `__invoke()`, `__set_state()`,\n`__clone()`, `__debugInfo()`) are ignored.\n",
        "disable": false
      },
      {
        "real_name": "php:S101",
        "display_name": "PhpS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2612",
        "display_name": "PhpS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose POSIX file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"`others`\" class refers to all users except the owner of the file and the members of the group assigned to this file.\n\nGranting permissions to this group can lead to unintended access to files. \n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\nFor [Symfony Filesystem](https://symfony.com/doc/current/components/filesystem.html):\n\nFor [Laravel Filesystem](https://laravel.com/api/8.x/Illuminate/Filesystem/Filesystem.html):\n\n## Compliant Solution\n\nFor [Symfony Filesystem](https://symfony.com/doc/current/components/filesystem.html):\n\nFor [Laravel Filesystem](https://laravel.com/api/8.x/Illuminate/Filesystem/Filesystem.html):\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S2737",
        "display_name": "PhpS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"catch\" clauses should do more than rethrow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `catch` clause that only rethrows the caught exception has the same effect as omitting the `catch` altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\nor\n",
        "disable": false
      },
      {
        "real_name": "php:S1765",
        "display_name": "PhpS1765",
        "severity": "info",
        "category": "convention",
        "rule_title": "The \"var\" keyword should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe PHP 4 method of declaring a variable, using the `var` keyword, was deprecated in early versions of PHP 5. Even though it's not\nconsidered deprecated in the most recent versions, it's nonetheless not best practice to use it. When `var` does appear, it is interpreted\nas a synonym for `public` and treated as such. Therefore `public` should be used instead.\n\nFrom the PHP Manual:\n\n> \n  <p>The PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword).\n  In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1766",
        "display_name": "PhpS1766",
        "severity": "info",
        "category": "convention",
        "rule_title": "More than one property should not be declared per statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put multiple property declarations in the same statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1523",
        "display_name": "PhpS1523",
        "severity": "error",
        "category": "security",
        "rule_title": "Dynamically executing code is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExecuting code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2017-9807](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807) \n  -  [CVE-2017-9802](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802) \n\nSome APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon as they also increase the risk of <a\nhref=\"https://www.owasp.org/index.php/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (exemple: XSS\nattack) and have a huge impact on an application's security.\n\nThis rule marks for review each occurrence of the [`eval` function](https://www.php.net/manual/en/function.eval.php). This\nrule does not detect code injections. It only highlights the use of APIs which should be used sparingly and very carefully. The goal is to guide\nsecurity code reviews.\n\n## Ask Yourself Whether\n\n  -  the executed code may come from an untrusted source and hasn't been sanitized. \n  -  you really need to run code dynamically. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a [sandboxed](https://en.wikipedia.org/wiki/Sandbox_(computer_security)) environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).\n\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\n\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE CWE-95](http://cwe.mitre.org/data/definitions/95.html) - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n",
        "disable": false
      },
      {
        "real_name": "php:S2053",
        "display_name": "PhpS2053",
        "severity": "error",
        "category": "security",
        "rule_title": "Hashes should include an unpredictable salt",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn cryptography, a \"salt\" is an extra piece of data which is included when hashing a password. This makes `rainbow-table attacks` more\ndifficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the\nhash value in databases of precomputed hashes (called `rainbow-tables`).\n\nThis rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as `PBKDF2`, is used\nwith a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as `sha1` or `md5`\nas they should not be used to hash passwords.\n\n## Recommended Secure Coding Practices\n\n  -  Use hashing functions generating their own secure salt or generate a secure random value of at least 16 bytes. \n  -  The salt should be unique by user password. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-759](http://cwe.mitre.org/data/definitions/759.html) - Use of a One-Way Hash without a Salt \n  -  [MITRE, CWE-760](http://cwe.mitre.org/data/definitions/760.html) - Use of a One-Way Hash with a Predictable Salt \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S1451",
        "display_name": "PhpS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1697",
        "display_name": "PhpS1697",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n**only** if it is null, leading to a guaranteed null pointer dereference.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S2050",
        "display_name": "PhpS2050",
        "severity": "info",
        "category": "convention",
        "rule_title": "Alias functions should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCertain functions exist in PHP only as aliases of other functions. These aliases have been made available for backward compatibility, but should\nreally be removed from code. \n\nThis rule looks for uses of the following aliases:\n      |Alias      |Replacement    \n      |`chop`      |`rtrim`    \n      |`close`      |`closedir`    \n      |`doubleval`      |`floatval`    \n      |`fputs`      |`fwrite`    \n      |`ini_alter`      |`ini_set`    \n      |`is_double`      |`is_float`    \n      |`is_integer`      |`is_int`    \n      |`is_long`      |`is_int`    \n      |`is_real`      |`is_float`    \n      |`is_writeable`      |`is_writable`    \n      |`join`      |`implode`    \n      |`key_exists`      |`array_key_exists`    \n      |`magic_quotes_runtime`      |`set_magic_quotes_runtime`    \n      |`pos`      |`current`    \n      |`show_source`      |`highlight_file`    \n      |`sizeof`      |`count`    \n      |`strchr`      |`strstr`    \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1578",
        "display_name": "PhpS1578",
        "severity": "info",
        "category": "convention",
        "rule_title": "File names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule\nraises an issue when the names of analyzed files don't match the provided regular expression.\n\n## See\n\n  -  [CERT, MSC09-C.](https://wiki.sei.cmu.edu/confluence/x/GtYxBQ) - Character encoding: Use subset of ASCII for safety \n",
        "disable": false
      },
      {
        "real_name": "php:S5935",
        "display_name": "PhpS5935",
        "severity": "info",
        "category": "convention",
        "rule_title": "Framework-provided functions should be used to test exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHPUnit provides helper functions and annotations to verify that a given block of code throws an exception and to assert different properties of\nthat exception. The provided helper functions are:\n\n  -  `expectException()` \n  -  `expectExceptionCode()` \n  -  `expectExceptionMessage()` \n  -  `expectExceptionMessageRegExp()` \n\nThis check raises an issue when the throw of an exception is verified using a **try-catch** approach instead of relying on the provided helper\nfunctions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\nthePHP.cc: [Questioning PHPUnit Best Practice](https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)\n",
        "disable": false
      },
      {
        "real_name": "php:S1106",
        "display_name": "PhpS1106",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the beginning of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1109",
        "display_name": "PhpS1109",
        "severity": "info",
        "category": "convention",
        "rule_title": "A close curly brace should be located at the beginning of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "php:S5708",
        "display_name": "PhpS5708",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Caught Exceptions must derive from Throwable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInstances of classes that do not derive from the \"Throwable\" interface cannot be used in a PHP \"throw\" statement. Thus, it does not make sense to\ntry to catch such objects within a \"try-catch\" block.\n\nMany built-in exceptions such as \"Exception\" and the SPL exception classes do implement the \"Throwable\" interface and can be extended when creating\ncustom exceptions.\n\nThis rule raises an issue when the classes used to specify the type of objects to be caught in a \"try-catch\" block do not derive from \"Throwable\"\n.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1105",
        "display_name": "PhpS1105",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the end of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen blocks are inlined (left and right curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "php:S1226",
        "display_name": "PhpS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function and method parameters' initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "php:S1313",
        "display_name": "PhpS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "php:S3972",
        "display_name": "PhpS3972",
        "severity": "error",
        "category": "convention",
        "rule_title": "Conditionals should start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an `if` and its\nresulting **then** statement. However, when an `if` is placed on the same line as the closing `}` from a preceding\n`else` or `elseif`, it is either an error - `else` is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n",
        "disable": false
      },
      {
        "real_name": "php:S5911",
        "display_name": "PhpS5911",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Class of caught exception should be defined",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen specifying the class of objects in a catch clause it is important to make sure that the class exists.\n\nSince no PHP error will be raised if the class does not exist, this can lead to difficult to debug problems as the catch clause will have no effect\nand the reason might not be obvious.\n\nThis mistake often occurs when being in a namespace and catching PHP built-in exception classes without escaping to the global namespace or\nimporting the classes.\n\nThis rule raises an issue when, being in a namespace, an undefined class belonging to that namespace is caught.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1793",
        "display_name": "PhpS1793",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"elseif\" keyword should be used in place of \"else if\" keywords",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the PSR2 coding standard:\n\n> \n  The keyword `elseif` SHOULD be used instead of `else if` so that all control keywords look like single words.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3973",
        "display_name": "PhpS3973",
        "severity": "error",
        "category": "convention",
        "rule_title": "A conditionally executed single line should be denoted by indentation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "php:S2761",
        "display_name": "PhpS2761",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Unary prefix operators should not be repeated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling the `!` or `~` prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are\ntypically caused by accidentally double-tapping the key in question without noticing. Either this is a bug, if the operator was actually meant to be\ncalled once, or misleading if done on purpose.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S4144",
        "display_name": "PhpS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "php:S4824",
        "display_name": "PhpS4824",
        "severity": "error",
        "category": "correctness",
        "rule_title": "References used in \"foreach\" loops should be \"unset\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a reference is used in a `foreach` loop instead of using a simple variable, the reference remains assigned and keeps its \"value\"\nwhich is a reference, even after the `foreach` execution. Most of the time, this is not what the developer is expecting and the reference\nmay be used wrongly in the rest of the code. For this reason, it is recommended to always `unset` a reference that is used in a\n`foreach` to avoid any unexpected side effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PHP Documentation: [Foreach ](https://php.net/manual/en/control-structures.foreach.php) \n  -  [References and Foreach](https://schlueters.de/blog/archives/141-references-and-foreach.html) \n",
        "disable": false
      },
      {
        "real_name": "php:S4828",
        "display_name": "PhpS4828",
        "severity": "error",
        "category": "security",
        "rule_title": "Signalling processes is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSignalling processes is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2009-0390](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390) \n  -  [CVE-2002-0839](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839) \n  -  [CVE-2008-1671](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671) \n\nSending signals without checking properly which process will receive it can cause a denial of service.\n\n## Ask Yourself Whether\n\n  <li> the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable\n  file. </li>\n  -  users who are asking for the signal to be sent might not have the permission to send those signals. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the\n  user doesn't own the process. </li>\n  -  Secure the source from which the process PID is read. \n  -  Run the process sending the signals with minimal permissions. \n\n## Sensitive Code Example\n\n## See\n\n  -  [MITRE, CWE-283](https://cwe.mitre.org/data/definitions/283.html) - Unverified Ownership \n",
        "disable": false
      },
      {
        "real_name": "php:S1799",
        "display_name": "PhpS1799",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"exit(...)\" and \"die(...)\" statements should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `exit(...)` and `die(...)` statements should absolutely not be used in Web PHP pages as this might lead to a very bad\nuser experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error. \n\nBut of course PHP can also be used to develop command line application and in such case use of `exit(...)` or `die(...)`\nstatement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those\nexceptions should be caught just before leaving the application to specify the exit code with help of `exit(...)` or `die(...)`\nstatements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1314",
        "display_name": "PhpS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not apply to values smaller than 8 and octal values having 3 digits, since 3 digits octal values are often used as file permission\nmasks.\n\nExample:\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "php:S4143",
        "display_name": "PhpS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Array values should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "php:S5915",
        "display_name": "PhpS5915",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Assertions should not be made at the end of blocks expecting an exception",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn PHPUnit, to test that an exception is thrown in a given piece of code, the **expectException*()** methods or the\n**@expectedException*** annotations can be used. For such a test to succeed, something in the test method has to throw an exception with the\nawaited properties. Having an assertion at the end of such a test method, means that, if the test succeeds, that assertion was never evaluated because\nan exception was thrown before getting to that point.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S4830",
        "display_name": "PhpS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nIt's not recommended to reinvent the wheel by implementing custom certificate chain validation.\n\nTLS libraries provide built-in certificate validation functions that should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n",
        "disable": false
      },
      {
        "real_name": "php:S4833",
        "display_name": "PhpS4833",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Use of namespaces should be preferred to \"include\" or \"require\" functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPHP 5.3 introduces [namespaces](http://www.php.net/namespaces) to the language. Use of this mechanism should be preferred to\n`include` or `include_once` or `require` or `require_once` because it solves two common problems:\n\n  -  it avoids name collisions \n  -  it provides the ability to create alias which improve readability of the code \n\nStarting from its version 8, Drupal is relying on namespaces to be compliant with <a\nhref=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\">PSR-4 standard</a>. Drupal's modules should be compliant with\nPSR-4 standard and therefore should no longer rely on `include` or `include_once` or `require` or\n`require_once` functions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule doesn't raise issues on `autoload.php` or `ScriptHandler.php` files.\n",
        "disable": false
      },
      {
        "real_name": "php:S1200",
        "display_name": "PhpS1200",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\n\n> \n  If a class has more than one responsibility, then the responsibilities become coupled.\n  Changes to one responsibility may impair or inhibit the class' ability to meet the others.\n  This kind of coupling leads to fragile designs that break in unexpected ways when changed.\n\n\nClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\n\nNested classes dependencies are not counted as dependencies of the outer class.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "php:S3984",
        "display_name": "PhpS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Exceptions should not be created without being thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Exception` without actually throwing it is useless and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S3981",
        "display_name": "PhpS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Array or Countable object count comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe count of elements from an array or Countable object is always greater than or equal to zero. So testing that the count is greater than or equal\nto zero doesn't make sense, since the result is always `true`. Similarly testing that it is less than zero will always return\n`false`. Perhaps the intent was to check the non-emptiness of the object or array instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S5808",
        "display_name": "PhpS5808",
        "severity": "warning",
        "category": "security",
        "rule_title": "Authorizations should be based on strong decisions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAuthorizations granted or not to users to access resources of an application should be based on strong decisions. For instance, checking whether\nthe user is authenticated or not, has the right roles/privileges. It may also depend on the user's location, or the date, time when the user requests\naccess.\n\n## Noncompliant Code Example\n\nIn a Symfony web application:\n\n  <li> the `vote` method of a [VoterInterface](https://symfony.com/doc/current/security/voters.html) type is not compliant when\n  it returns only an affirmative decision (`ACCESS_GRANTED`): </li>\n\n  <li> the `voteOnAttribute` method of a [Voter](https://symfony.com/doc/current/security/voters.html) type is not compliant\n  when it returns only an affirmative decision (`true`): </li>\n\nIn a Laravel web application:\n\n  <li> the `define`, `before`, and `after` methods of a [Gate](https://laravel.com/docs/8.x/authorization)\n  are not compliant when they return only an affirmative decision (`true` or `Response::allow()`): </li>\n\n## Compliant Solution\n\nIn a Symfony web application:\n\n  <li> the `vote` method of a [VoterInterface](https://symfony.com/doc/current/security/voters.html) type should return a\n  negative decision (`ACCESS_DENIED`) or abstain from making a decision (`ACCESS_ABSTAIN`): </li>\n\n  <li> the `voteOnAttribute` method of a [Voter](https://symfony.com/doc/current/security/voters.html) type should return a\n  negative decision (`false`): </li>\n\nIn a Laravel web application:\n\n  <li> the `define`, `before`, and `after` methods of a [Gate](https://laravel.com/docs/8.x/authorization)\n  should return a negative decision (`false` or `Response::deny()`) or abstain from making a decision (`null`): </li>\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Boken Access Control \n  -  [MITRE, CWE-285](https://cwe.mitre.org/data/definitions/285.html) - Improper Authorization \n",
        "disable": false
      },
      {
        "real_name": "php:S3626",
        "display_name": "PhpS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements, such as `return`, `goto`, and `continue` let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "php:S1448",
        "display_name": "PhpS1448",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "php:S5122",
        "display_name": "PhpS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\nLaravel\n\nSymfony\n\n## Compliant Solution\n\nLaravel\n\nSymfony\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "php:S2092",
        "display_name": "PhpS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content) or not (ie\n  HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\nIn **php.ini** you can specify the flags for the session cookie which is security-sensitive:\n\nSame thing in PHP code:\n\nIf you create a custom security-sensitive cookie in your PHP code:\n\nBy default [`setcookie`](https://www.php.net/manual/en/function.setcookie.php) and <a\nhref=\"https://www.php.net/manual/en/function.setrawcookie.php\">`setrawcookie`</a> functions set the sixth argument / `secure`\nflag to **false:**\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1313",
        "display_name": "RubyS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1134",
        "display_name": "RubyS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1135",
        "display_name": "RubyS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "ruby:S3776",
        "display_name": "RubyS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1110",
        "display_name": "RubyS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S131",
        "display_name": "RubyS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"case\" statements should have \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `else` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1871",
        "display_name": "RubyS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `when` clauses in a `case` statement or two branches in an `if` chain with the same implementation is\nat best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they\nshould be combined, or for a `case`, duplicates should be refactored. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `case` statement that contain a\nsingle line of code.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `case`-es without `else`\nclauses when all branches have the same single line of code. In case of `if` chains with `else`-s, or of `case`-es\nwith `else` clauses, rule {rule:ruby:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "ruby:S2068",
        "display_name": "RubyS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](http://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](http://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1451",
        "display_name": "RubyS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S4144",
        "display_name": "RubyS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "ruby:ParsingError",
        "display_name": "RubyParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ruby parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S134",
        "display_name": "RubyS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"until\", \"case\" and \"begin...rescue\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `until`, `case` and `begin...rescue` statements are\nkey ingredients for making what's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S4663",
        "display_name": "RubyS4663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multi-line comments should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be\nremoved.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1314",
        "display_name": "RubyS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule does not apply to values smaller than 8 and octal values having 3 digits, since 3 digits octal values are often used as file permission\nmasks.\n\nExample:\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1479",
        "display_name": "RubyS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"case\" statements should not have too many \"when\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `case` statements have a large number of clauses, it is usually an attempt to map two sets of data. A real `Hash`\nstructure would be more readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1656",
        "display_name": "RubyS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "ruby:S103",
        "display_name": "RubyS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1151",
        "display_name": "RubyS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"case when\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `case` statement should be used only to clearly define some new branches in the control flow. As soon as a `when` clause\ncontains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause\nshould be extracted into a dedicated function.\n\n## Noncompliant Code Example\n\nWith the threshold set at 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S104",
        "display_name": "RubyS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S105",
        "display_name": "RubyS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1172",
        "display_name": "RubyS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1192",
        "display_name": "RubyS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand '_'.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S126",
        "display_name": "RubyS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `elsif` statements; the final `elsif`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `else` clause in a `case` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen all branches of an `if`-`else if` end with `return`, `break` or `throw`, the code that\ncomes after the `if` implicitly behaves as if it was in an `else` clause. This rule will therefore ignore that case.\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "ruby:S107",
        "display_name": "RubyS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S108",
        "display_name": "RubyS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n\n`while` and `unless` loops are also exception to the rule.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1764",
        "display_name": "RubyS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Exceptions\n\nThis rule ignores `*`, `+`, and `=`. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:ruby:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1862",
        "display_name": "RubyS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/elsif\" statements and \"when\" in a \"case\" should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `case` and a chain of `if`/`elsif` statements is evaluated from top to bottom. At most, only one branch will be\nexecuted: the first one with a condition that evaluates to `true`.\n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n\nFor a `case`, the second `when` will never be executed, rendering it dead code. Worse there is the risk in this situation\nthat future maintenance will be done on the dead case, rather than on the one that's actually used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1940",
        "display_name": "RubyS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1067",
        "display_name": "RubyS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1145",
        "display_name": "RubyS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if true ...\" and \"if false ...\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "ruby:S1763",
        "display_name": "RubyS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`, `break` and `next`) move control flow out of the current code block. So any statements\nthat come after a jump are dead code. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1066",
        "display_name": "RubyS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1186",
        "display_name": "RubyS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n",
        "disable": false
      },
      {
        "real_name": "ruby:S100",
        "display_name": "RubyS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S101",
        "display_name": "RubyS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S122",
        "display_name": "RubyS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1821",
        "display_name": "RubyS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"case\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `case` structures are difficult to understand because you can easily confuse the cases of an inner `case` as belonging\nto an outer statement. Therefore nested `case` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `case` statements, but if you cannot, then consider moving the\ninner `case` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S2757",
        "display_name": "RubyS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "ruby:S3923",
        "display_name": "RubyS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `case` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `case`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains or `case`-es without `else`-s.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S138",
        "display_name": "RubyS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S1481",
        "display_name": "RubyS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n",
        "disable": false
      },
      {
        "real_name": "ruby:S117",
        "display_name": "RubyS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "function and block parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ruby"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a function or block parameter name does not match\nthe provided regular expression.\n",
        "disable": false
      },
      {
        "real_name": "go:S1313",
        "display_name": "GoS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "go:S1134",
        "display_name": "GoS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "go:S1135",
        "display_name": "GoS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "go:S3776",
        "display_name": "GoS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "go:S1110",
        "display_name": "GoS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S1871",
        "display_name": "GoS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain or `case` blocks that contain a single line of code are ignored.\n",
        "disable": false
      },
      {
        "real_name": "go:S131",
        "display_name": "GoS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "go:S2068",
        "display_name": "GoS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](http://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](http://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "go:S1451",
        "display_name": "GoS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S4144",
        "display_name": "GoS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, one implementation should invoke the other.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFunctions with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "go:ParsingError",
        "display_name": "GoParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track parsing failures",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "go:S134",
        "display_name": "GoS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\" and \"switch\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `switch`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "go:S4663",
        "display_name": "GoS4663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multi-line comments should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be\nremoved.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "go:S1314",
        "display_name": "GoS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "go:S1479",
        "display_name": "GoS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of `case` clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "go:S1656",
        "display_name": "GoS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "go:S103",
        "display_name": "GoS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "go:S1151",
        "display_name": "GoS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch case\" clauses should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `switch` statement should be used only to clearly define some new branches in the control flow. As soon as a `case`\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S104",
        "display_name": "GoS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "go:S1192",
        "display_name": "GoS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand '_'.\n",
        "disable": false
      },
      {
        "real_name": "go:S107",
        "display_name": "GoS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S126",
        "display_name": "GoS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen all branches of an `if`-`else if` end with `return` or `break`, the code that comes after the\n`if` implicitly behaves as if it was in an `else` clause. This rule will therefore ignore that case.\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "go:S108",
        "display_name": "GoS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty. `for` without `init` and `post`\nstatements with empty blocks are ignored as well.\n",
        "disable": false
      },
      {
        "real_name": "go:S1764",
        "display_name": "GoS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores `*`, `+`, `&lt;&lt;` and `=`. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:go:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "go:S1940",
        "display_name": "GoS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S1763",
        "display_name": "GoS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome statements (`return`, `break`, `continue`, `goto`, `switch`) and `throw`\nexpressions move control flow out of the current code block. So any unlabeled statements that come after such a jump are unreachable, and either this\ndead code should be removed, or the logic should be corrected. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "go:S1862",
        "display_name": "GoS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`. \n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "go:S1125",
        "display_name": "GoS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S1145",
        "display_name": "GoS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "go:S1067",
        "display_name": "GoS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S1186",
        "display_name": "GoS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S122",
        "display_name": "GoS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nControl flow statements with a single nested statement are ignored.\n",
        "disable": false
      },
      {
        "real_name": "go:S100",
        "display_name": "GoS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function and method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression: `^(_|[a-zA-Z0-9]+)$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S2757",
        "display_name": "GoS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S3923",
        "display_name": "GoS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "go:S138",
        "display_name": "GoS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions and methods should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "go:S1821",
        "display_name": "GoS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "go:S117",
        "display_name": "GoS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^(_|[a-zA-Z0-9]+)$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1313",
        "display_name": "KotlinS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1135",
        "display_name": "KotlinS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S3776",
        "display_name": "KotlinS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1110",
        "display_name": "KotlinS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1134",
        "display_name": "KotlinS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1871",
        "display_name": "KotlinS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two clauses in a `when` statement or two branches in an `if` chain with the same implementation is at best duplicate\ncode, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should be combined, or\nfor a `when`, duplicates should be refactored. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `when` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `when`-es without `else`\nclauses when all branches have the same single line of code. In case of `if` chains with `else`-s, or of `when`-es\nwith default clauses, rule {rule:kotlin:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S2068",
        "display_name": "KotlinS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](http://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](http://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1451",
        "display_name": "KotlinS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S134",
        "display_name": "KotlinS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"when\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `when`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S4144",
        "display_name": "KotlinS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S4663",
        "display_name": "KotlinS4663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multi-line comments should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be\nremoved.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "kotlin:ParsingError",
        "display_name": "KotlinParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Kotlin parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1479",
        "display_name": "KotlinS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"when\" statements should not have too many clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `when` statements have a large number of clauses, it is usually an attempt to map two sets of data. A real map structure would be\nmore readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1656",
        "display_name": "KotlinS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S103",
        "display_name": "KotlinS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S125",
        "display_name": "KotlinS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S105",
        "display_name": "KotlinS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1151",
        "display_name": "KotlinS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"when\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `when` statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too\nmany statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be\nextracted into a dedicated function.\n\n## Noncompliant Code Example\n\nWith the threshold set at 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1172",
        "display_name": "KotlinS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S104",
        "display_name": "KotlinS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1192",
        "display_name": "KotlinS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand '_'.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S107",
        "display_name": "KotlinS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n\n## Exceptions\n\nMethods annotated with Spring's `@RequestMapping` (and related shortcut annotations, like `@GetRequest`) or\n`@JsonCreator` may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S126",
        "display_name": "KotlinS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen all branches of an `if`-`else if` end with `return`, `break` or `throw`, the code that\ncomes after the `if` implicitly behaves as if it was in an `else` clause. This rule will therefore ignore that case.\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S108",
        "display_name": "KotlinS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n\n`while` and unless loops are also exception to the rule.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1764",
        "display_name": "KotlinS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Exceptions\n\nThis rule ignores `*`, `+`, and `=`. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:kotlin:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1763",
        "display_name": "KotlinS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`, `break` and `continue`) move control flow out of the current code block. So any\nstatements that come after a jump are dead code. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1862",
        "display_name": "KotlinS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`. \n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1940",
        "display_name": "KotlinS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1125",
        "display_name": "KotlinS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1144",
        "display_name": "KotlinS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" methods should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1145",
        "display_name": "KotlinS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1066",
        "display_name": "KotlinS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1067",
        "display_name": "KotlinS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1186",
        "display_name": "KotlinS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a function not to have a function body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown. \n  -  The function is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n",
        "disable": false
      },
      {
        "real_name": "kotlin:S101",
        "display_name": "KotlinS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S122",
        "display_name": "KotlinS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S100",
        "display_name": "KotlinS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S2757",
        "display_name": "KotlinS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+`, `=-` or `=!` ) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-`, or `=!` is used without any spacing between the two operators and when\nthere is at least one whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S3923",
        "display_name": "KotlinS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `when` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `when`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `when`-es without `else` clauses.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S138",
        "display_name": "KotlinS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1481",
        "display_name": "KotlinS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S1821",
        "display_name": "KotlinS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"when\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `when` structures are difficult to understand because you can easily confuse the cases of an inner `when` as belonging\nto an outer statement. Therefore nested `when` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `when` statements, but if you cannot, then consider moving the\ninner `when` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "kotlin:S117",
        "display_name": "KotlinS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n",
        "disable": false
      },
      {
        "real_name": "common-go:DuplicatedBlocks",
        "display_name": "CommonGoDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-go:FailedUnitTests",
        "display_name": "CommonGoFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-go:SkippedUnitTests",
        "display_name": "CommonGoSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-go:InsufficientCommentDensity",
        "display_name": "CommonGoInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-go:InsufficientLineCoverage",
        "display_name": "CommonGoInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-go:InsufficientBranchCoverage",
        "display_name": "CommonGoInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "Go"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-flex:DuplicatedBlocks",
        "display_name": "CommonFlexDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-flex:FailedUnitTests",
        "display_name": "CommonFlexFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-flex:SkippedUnitTests",
        "display_name": "CommonFlexSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-flex:InsufficientCommentDensity",
        "display_name": "CommonFlexInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-flex:InsufficientLineCoverage",
        "display_name": "CommonFlexInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-flex:InsufficientBranchCoverage",
        "display_name": "CommonFlexInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "typescript:S2589",
        "display_name": "TypescriptS2589",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Boolean expressions should not be gratuitous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570) - Expression is Always False \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5732",
        "display_name": "TypescriptS5732",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling content security policy frame-ancestors directive is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Clickjacking](https://en.wikipedia.org/wiki/Clickjacking) attacks occur when an attacker try to trick an user to click on certain\nbuttons/links of a legit website. This attack can take place with malicious HTML frames well hidden in an attacker website. \n\nFor instance, suppose a safe and authentic page of a social network (https://socialnetworkexample.com/makemyprofilpublic) which allows an user to\nchange the visibility of his profile by clicking on a button. This is a critical feature with high privacy concerns. Users are generally well informed\non the social network of the consequences of this action. An attacker can trick users, without their consent, to do this action with the below\nembedded code added on a malicious website:\n\nPlaying with the size of the iframe it's sometimes possible to display only the critical parts of a page, in this case the button of the\n**makemyprofilpublic** page.\n\n## Ask Yourself Whether\n\n  <li> [Critical actions](https://en.wikipedia.org/wiki/Clickjacking#Clickjacking_categories) of the application are prone to clickjacking\n  attacks because a simple click on a link or a button can trigger them. </li>\n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy **frame-ancestors** directive which is supported by all modern browsers and will specify the origins of\nframe allowed to be loaded by the browser (this directive deprecates <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\">X-Frame-Options</a>).\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet-csp](https://www.npmjs.com/package/helmet-csp) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is used without the `frameAncestors` directive (or if\n`frameAncestors` is set to `'none'`):\n\n## Compliant Solution\n\nIn Express.js application a standard way to implement CSP frame-ancestors directive is the <a\nhref=\"https://www.npmjs.com/package/helmet-csp\">helmet-csp</a> or [helmet](https://www.npmjs.com/package/helmet) middleware:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [OWASP Cheat Sheets](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html) - Clickjacking Defense\n  Cheat Sheet </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) -\n  Frame-ancestors </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n  <li> [MITRE, CWE-451](http://cwe.mitre.org/data/definitions/451.html) - User Interface (UI) Misrepresentation of Critical Information\n  </li>\n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1135",
        "display_name": "TypescriptS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3799",
        "display_name": "TypescriptS3799",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Destructuring patterns should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDestructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.\n\nThis rule raises an issue when empty destructuring pattern is used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4524",
        "display_name": "TypescriptS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nfirst or the last one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5734",
        "display_name": "TypescriptS5734",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing browsers to sniff MIME types is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[MIME confusion](https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/) attacks occur when an\nattacker successfully tricks a web-browser to interpret a resource as a different type than the one expected. To correctly interpret a resource\n(script, image, stylesheet ...) web browsers look for the <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type header</a> defined in the HTTP response received from the\nserver, but often this header is not set or is set with an incorrect value. To avoid content-type mismatch and to provide the best user experience,\nweb browsers try to deduce the right content-type, generally by inspecting the content of the resources (the first bytes). This \"guess mechanism\" is\ncalled [MIME type sniffing](https://en.wikipedia.org/wiki/Content_sniffing).\n\nAttackers can take advantage of this feature when a website (\"example.com\" here) allows to upload arbitrary files. In that case, an attacker can\nupload a malicious image **fakeimage.png** (containing malicious JavaScript code or <a\nhref=\"https://docs.microsoft.com/fr-fr/archive/blogs/ieinternals/script-polyglots\">a polyglot content</a> file) such as:\n\nWhen the victim will visit the website showing the uploaded image, the malicious script embedded into the image will be executed by web browsers\nperforming MIME type sniffing.\n\n## Ask Yourself Whether\n\n  <li> [Content-Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) header is not systematically set for all\n  resources. </li>\n  -  Content of resources can be controlled by users. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nImplement [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) header with\n**nosniff** value (the only existing value for this header) which is supported by all modern browsers and will prevent browsers from performing\nMIME type sniffing, so that in case of Content-Type header mismatch, the resource is not interpreted. For example within a &lt;script&gt; object\ncontext, JavaScript MIME types are expected (like **application/javascript**) in the Content-Type header.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if, when using [helmet](https://www.npmjs.com/package/helmet), the `noSniff`\nmiddleware is disabled:\n\n## Compliant Solution\n\nWhen using `helmet` in an Express.js application, the `noSniff` middleware should be enabled (it is also done by\ndefault):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) - X-Content-Type-Options\n  </li>\n  <li> [blog.mozilla.org](https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/) - Mitigating MIME\n  Confusion Attacks in Firefox </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1131",
        "display_name": "TypescriptS1131",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lines should not end with trailing whitespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTrailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.\n\nIf you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1134",
        "display_name": "TypescriptS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5730",
        "display_name": "TypescriptS5730",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing mixed-content is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA mixed-content is when a resource is loaded with the HTTP protocol, from a website accessed with the HTTPs protocol, thus mixed-content are not\nencrypted and exposed to [MITM attacks](https://en.wikipedia.org/wiki/Man-in-the-middle_attack) and could break the entire level of\nprotection that was desired by implementing encryption with the HTTPs protocol.\n\nThe main threat with mixed-content is not only the confidentiality of resources but the whole website integrity:\n\n  <li> A passive mixed-content (eg: **&lt;img src=\"http://example.com/picture.png\"&gt;**) allows an attacker to access and replace only these\n  resources, like images, with malicious ones that could lead to successful phishing attacks. </li>\n  <li> With active mixed-content (eg: **&lt;script src=\"http://example.com/library.js\"&gt;**) an attacker can compromise the entire website by\n  injecting malicious javascript code for example (accessing and modifying the DOM, steal cookies, etc). </li>\n\n## Ask Yourself Whether\n\n  -  The HTTPS protocol is in place and external resources are fetched from the website pages. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy **block-all-mixed-content** directive which is supported by all modern browsers and will block loading of\nmixed-contents.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet-csp](https://www.npmjs.com/package/helmet-csp) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is used without the `blockAllMixedContent` directive:\n\n## Compliant Solution\n\nIn Express.js application a standard way to block mixed-content is to put in place the <a\nhref=\"https://www.npmjs.com/package/helmet-csp\">helmet-csp</a> or [helmet](https://www.npmjs.com/package/helmet) middleware with the\n`blockAllMixedContent` directive:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) - Mixed-content \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5736",
        "display_name": "TypescriptS5736",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling strict HTTP no-referrer policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[HTTP header referer](https://en.wikipedia.org/wiki/HTTP_referer) contains a URL set by web browsers and used by applications to track\nfrom where the user came from, it's for instance a relevant value for web analytic services, but it can cause <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns\">serious privacy and security problems</a>\nif the URL contains confidential information. Note that Firefox for instance, to prevent data leaks, <a\nhref=\"https://blog.mozilla.org/security/2018/01/31/preventing-data-leaks-by-stripping-path-information-in-http-referrers/\">removes path\ninformation</a> in the Referer header while browsing privately.\n\nSuppose an e-commerce website asks the user his credit card number to purchase a product:\n\nWhen submitting the above HTML form, a HTTP GET request will be performed, the URL requested will be\nhttps://example.com/valid_order?cc=1111-2222-3333-4444 with credit card number inside and it's obviously not secure for these reasons:\n\n  -  URLs are stored in the history of browsers. \n  -  URLs could be accidentally shared when doing copy/paste actions. \n  -  URLs can be stolen if a malicious person looks at the computer screen of an user. \n\nIn addition to these threats, when further requests will be performed from the \"valid_order\" page with a simple legitimate embedded script like\nthat:\n\nThe referer header which contains confidential information will be send to a third party web analytic service and cause privacy issue:\n\n## Ask Yourself Whether\n\n  -  Confidential information exists in URLs. \n  -  Semantic of HTTP methods is not respected (eg: use of a GET method instead of POST when the state of the application is changed). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nConfidential information should not be set inside URLs (GET requests) of the application and a safe (ie: different from `unsafe-url` or\n`no-referrer-when-downgrade`) [referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)\nheader, to control how much information is included in the referer header, should be used.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) `referrerPolicy`\nmiddleware is disabled or used with `no-referrer-when-downgrade` or `unsafe-url`:\n\n## Compliant Solution\n\nIn Express.js application a secure solution is to user the [helmet](https://www.npmjs.com/package/helmet) referrer policy middleware set\nto `no-referrer`:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) - Referrer-Policy \n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns) -\n  Referer header: privacy and security concerns </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5739",
        "display_name": "TypescriptS5739",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling Strict-Transport-Security policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen implementing the HTTPS protocol, the website mostly continue to support the HTTP protocol to redirect users to HTTPS when they request a HTTP\nversion of the website. These redirects are not encrypted and are therefore vulnerable to man in the middle attacks. The <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">Strict-Transport-Security policy header</a> (HSTS) set by\nan application instructs the web browser to convert any HTTP request to HTTPS.\n\nWeb browsers that see the Strict-Transport-Security policy header for the first time record information specified in the header:\n\n  -  the `max-age` directive which specify how long the policy should be kept on the web browser. \n  -  the `includeSubDomains` optional directive which specify if the policy should apply on all sub-domains or not. \n  -  the `preload` optional directive which is not part of the HSTS specification but supported on all modern web browsers. \n\nWith the `preload` directive the web browser never connects in HTTP to the website and to use this directive, it is required <a\nhref=\"https://hstspreload.org/\">to submit</a> the concerned application to a preload service maintained by Google.\n\n## Ask Yourself Whether\n\n  -  The website is accessible with the unencrypted HTTP protocol. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement Strict-Transport-Security policy header, it is recommended to apply this policy to all subdomains (`includeSubDomains`) and\nfor at least 6 months (`max-age=15552000`) or even better for 1 year (`max-age=31536000`).\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) or <a\nhref=\"https://www.npmjs.com/package/hsts\">hsts</a> middleware are disabled or used without recommended values:\n\n## Compliant Solution\n\nIn Express.js application a standard way to implement HSTS is with the [helmet](https://www.npmjs.com/package/helmet) or <a\nhref=\"https://www.npmjs.com/package/hsts\">hsts</a> middleware:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) - Strict Transport\n  Security </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1940",
        "display_name": "TypescriptS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3317",
        "display_name": "TypescriptS3317",
        "severity": "info",
        "category": "convention",
        "rule_title": "Default export names and file names should match",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nCase, underscores ( `_` ) and dashes (`-`) are ignored from the name comparison.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2234",
        "display_name": "TypescriptS2234",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameters should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,\nwhen the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will\nlikely lead to unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nSwapped arguments that are compared beforehand in an enclosing `if`-statement are ignored:\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5743",
        "display_name": "TypescriptS5743",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing browsers to perform DNS prefetching  is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy default, web browsers perform [DNS prefetching](https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch/) to reduce\nlatency due to DNS resolutions required when an user clicks links from a website page.\n\nFor instance on example.com the hyperlink below contains a cross-origin domain name that must be resolved to an IP address by the web browser:\n\nIt can add significant latency during requests, especially if the page contains many links to cross-origin domains. DNS prefetch allows web\nbrowsers to perform DNS resolving in the background before the user clicks a link. This feature can cause privacy issues because DNS resolving from\nthe user's computer is performed without his consent if he doesn't intent to go to the linked website.\n\nOn a complex private webpage, a combination \"of unique links/DNS resolutions\" can indicate, to a eavesdropper for instance, that the user is\nvisiting the private page.\n\n## Ask Yourself Whether\n\n  -  Links to cross-origin domains could result in leakage of confidential information about the user's navigation/behavior of the website. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement [X-DNS-Prefetch-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) header with an\n**off** value but this could significantly degrade website performances.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [dns-prefetch-control](https://www.npmjs.com/package/dns-prefetch-control)\nmiddleware is disabled or used without the recommended value:\n\n## Compliant Solution\n\nIn Express.js application the [dns-prefetch-control](https://www.npmjs.com/package/dns-prefetch-control) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is the standard way to implement `X-DNS-Prefetch-Control` header:\n\n## See\n\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) - X-DNS-Prefetch-Control\n  </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch) - Using dns-prefetch \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1143",
        "display_name": "TypescriptS1143",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Jump statements should not occur in \"finally\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `return`, `break`, `throw`, and `continue` from a `finally` block overwrites similar\nstatements from the suspended `try` and `catch` blocks.\n\nThis rule raises an issue when a jump statement (`break`, `continue`, `return` and `throw`) would force\ncontrol flow to leave a `finally` block. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-584](http://cwe.mitre.org/data/definitions/584.html) - Return Inside Finally Block \n  -  [CERT, ERR04-J.](https://wiki.sei.cmu.edu/confluence/x/BTdGBQ) - Do not complete abruptly from a finally block \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2598",
        "display_name": "TypescriptS2598",
        "severity": "error",
        "category": "security",
        "rule_title": "File uploads should be restricted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThese minimum restrictions should be applied when handling file uploads:\n\n  -  the file upload folder to restrict untrusted files to a specific folder. \n  -  the file extension of the uploaded file to prevent remote code execution. \n\nAlso the size of the uploaded file should be limited to prevent denial of service attacks. This requirement is covered by the rule S5693.\n\n## Noncompliant Code Example\n\n[formidable](https://www.npmjs.com/package/formidable) module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) module:\n\n## Compliant Solution\n\n[formidable](https://www.npmjs.com/package/formidable) module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) module:\n\n## See\n\n  -  [CWE-434](https://cwe.mitre.org/data/definitions/434) - Unrestricted Upload of File with Dangerous Type \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References) - Insecure Direct\n  Object References </li>\n  -  [OWASP Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload) - Unrestricted File Upload \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1264",
        "display_name": "TypescriptS1264",
        "severity": "info",
        "category": "convention",
        "rule_title": "A \"while\" loop should be used instead of a \"for\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the condition expression is defined in a `for` loop, and the initialization and increment expressions are missing, a\n`while` loop should be used instead to increase readability. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5742",
        "display_name": "TypescriptS5742",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling Certificate Transparency monitoring is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Certificate Transparency](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) (CT) is an open-framework to\nprotect against identity theft when certificates are issued. [Certificate Authorities](https://en.wikipedia.org/wiki/Certificate_authority)\n(CA) electronically sign certificate after verifying the identify of the certificate owner. Attackers use, among other things, social engineering\nattacks to trick a CA to correctly verifying a spoofed identity/forged certificate. \n\nCAs implement Certificate Transparency framework to publicly log the records of newly issued certificates, allowing the public and in particular\nthe identity owner to monitor these logs to verify that his identify was not usurped.\n\n## Ask Yourself Whether\n\n  -  The website identity is valuable and well-known, therefore prone to theft. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement [Expect-CT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT) HTTP header which instructs the web browser\nto check [public CT logs](https://www.certificate-transparency.org/known-logs) in order to verify if the website appears inside and if it\nis not, the browser will block the request and display a warning to the user.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [expect-ct](https://www.npmjs.com/package/expect-ct) middleware is disabled:\n\n## Compliant Solution\n\nIn Express.js application the [expect-ct](https://www.npmjs.com/package/expect-ct) middleware is the standard way to implement\nexpect-ct. Usually, the deployment of this policy starts with the report only mode (`enforce: false`) and with a low `maxAge`\n(the number of seconds the policy will apply) value and next if everything works well it is recommended to block future connections that violate\nExpect-CT policy (`enforce: true`) and greater value for maxAge directive:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) - Certificate Transparency\n  </li>\n  -  [wikipedia.org](https://en.wikipedia.org/wiki/Certificate_authority) - Certificate Authority \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1821",
        "display_name": "TypescriptS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S881",
        "display_name": "TypescriptS881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n\n  -  It can significantly impair the readability of the code. \n  -  It introduces additional side effects into a statement, with the potential for undefined behavior. \n  -  It is safer to use these operators in isolation from any other arithmetic operators. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nThe following sequence is clearer and therefore safer:\n\n## See\n\n  -  [CERT, EXP30-C.](https://wiki.sei.cmu.edu/confluence/x/StYxBQ) - Do not depend on the order of evaluation for side effects \n  -  [CERT, EXP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/IXw-BQ) - Do not depend on the order of evaluation for side effects \n  <li> [CERT, EXP05-J.](https://wiki.sei.cmu.edu/confluence/x/NDdGBQ) - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S878",
        "display_name": "TypescriptS878",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Comma operator should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nUse of comma operator is tolerated:\n\n  -  in initialization and increment expressions of `for` loops. \n\n  -  If the expression sequence is explicitly wrapped in parentheses. \n",
        "disable": false
      },
      {
        "real_name": "typescript:S4622",
        "display_name": "TypescriptS4622",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Union types should not have too many elements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnion types represent a value that can be one of the several types. When a union type is used for a function parameter and it is accepting too many\ntypes, it may indicate the function is having too many responsibilities. Sometimes it's worth creating a type alias for this union type. In all cases,\nthe code should be reviewed and refactored to make it more maintainable.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores union types part of `type` statement:\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3776",
        "display_name": "TypescriptS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S4621",
        "display_name": "TypescriptS4621",
        "severity": "error",
        "category": "convention",
        "rule_title": "Union and intersection types should not be defined with duplicated elements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe TypeScript type system offers a basic support for composite types:\n\n  <li> **Union Types** represent a value that can be one of the several types. They are constructed using a vertical bar (`|`) like\n  the following `type NumberOrString = number | string`. </li>\n  <li> **Intersection Types** combine multiple types into one, so that the object of such type will have all the members of all intersection type\n  elements. They are constructed using an ampersand (`&amp;`) like the following <code>type SerializablePerson = Person &amp;\n  Serializable</code>. Intersection Types are often used to represent mixins. </li>\n\nDuplicating types when defining a union or interaction type makes the code less readable. Moreover duplicated types might be a simple mistake and\nanother type should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2688",
        "display_name": "TypescriptS2688",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"NaN\" should not be used in comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NaN` is not equal to anything, even itself. Testing for equality or inequality against `NaN` will yield predictable results,\nbut probably not the ones you want. \n\nInstead, the best way to see whether a variable is equal to `NaN` is to use `Number.isNaN()`, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since `NaN !== NaN`, when `a !== a`, you know it must equal `NaN`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, NUM07-J.](https://wiki.sei.cmu.edu/confluence/x/wzdGBQ) - Do not attempt comparisons with NaN \n",
        "disable": false
      },
      {
        "real_name": "typescript:S4624",
        "display_name": "TypescriptS4624",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Template literals should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTemplate literals (previously named \"template strings\") are an elegant way to build a string without using the `+` operator to make\nstrings concatenation more readable. \n\nHowever, it's possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.\n\nIn such situations, it's preferable to move the nested template into a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2201",
        "display_name": "TypescriptS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. \n\nTo prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP12-C.](https://wiki.sei.cmu.edu/confluence/x/mtYxBQ) - Do not ignore values returned by functions \n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2685",
        "display_name": "TypescriptS2685",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"arguments.caller\" and \"arguments.callee\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoth `arguments.caller` and `arguments.callee` make quite a few optimizations impossible so they were deprecated in latest\nversions of JavaScript. In fact, EcmaScript 5 forbids the use of both in `strict` mode, according to the docs:\n\n> \n  Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \"callee\" which throw a TypeError\n  exception on access.\n\n\nThe same restriction applies to the function's `caller` and `arguments` properties in `strict` mode.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3533",
        "display_name": "TypescriptS3533",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"import\" should be used to include external code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBefore ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, `import` and `export`, and older usages should be\nconverted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4623",
        "display_name": "TypescriptS4623",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"undefined\" should not be passed as the value of optional parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnlike in JavaScript, where every parameter can be omitted, in TypeScript you need to explicitly declare this in the function signature. Either you\nadd `?` in the parameter declaration and `undefined` will be automatically applied to this parameter. Or you add an initializer\nwith a default value in the parameter declaration. In the latter case, when passing `undefined` for such parameter, default value will be\napplied as well. So it's better to avoid passing `undefined` value to an optional or default parameter because it creates more confusion\nthan it brings clarity. Note, that this rule is only applied to the last arguments in function call.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4502",
        "display_name": "TypescriptS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Sensitive Code Example\n\n[Express.js CSURF middleware](https://www.npmjs.com/package/csurf) protection is not found on an unsafe HTTP method like POST\nmethod:\n\nProtection provided by [Express.js CSURF middleware](https://www.npmjs.com/package/csurf) is globally disabled on unsafe methods:\n\n## Compliant Solution\n\n[Express.js CSURF middleware](https://www.npmjs.com/package/csurf) protection is used on unsafe methods:\n\nProtection provided by [Express.js CSURF middleware](https://www.npmjs.com/package/csurf) is enabled on unsafe methods:\n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1110",
        "display_name": "TypescriptS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3531",
        "display_name": "TypescriptS3531",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Generators should \"yield\" something",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA generator without a `yield` statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1472",
        "display_name": "TypescriptS1472",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function call arguments should not start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely **will** lead to questions for maintainers.\n\nWhat was the initial intent of the developer?\n\n  1.  Define a function and then execute some unrelated code inside a closure ? \n  1.  Pass the second function as a parameter to the first one ? \n\nThe first option will be the one chosen by the JavaScript interpreter.\n\nBy extension, and to improve readability, any kind of function call argument should not start on new line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nEither\n\nOr \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2681",
        "display_name": "TypescriptS2681",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiline blocks should be enclosed in curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCurly braces can be omitted from a one-line block, such as with an `if` statement or `for` loop, but doing so can be\nmisleading and induce bugs.\n\nThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\n\nNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlooks fine in your editor but is confusing when you change the size of tabs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-483](http://cwe.mitre.org/data/definitions/483.html) - Incorrect Block Delimitation \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1119",
        "display_name": "TypescriptS1119",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Labels should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLabels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n&nbsp;\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2208",
        "display_name": "TypescriptS2208",
        "severity": "error",
        "category": "convention",
        "rule_title": "Wildcard imports should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOn the principle that clearer code is better code, you should explicitly `import` the things you want to use in a module. Using\n`import *` imports everything in the module, and runs the risk of confusing maintainers. Similarly, `export * from \"module\";`\nimports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1117",
        "display_name": "TypescriptS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables should not be shadowed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1479",
        "display_name": "TypescriptS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of `case` clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4507",
        "display_name": "TypescriptS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\n[errorhandler Express.js middleware](https://www.npmjs.com/package/errorhandler) should not be used in production:\n\n## Compliant Solution\n\n[errorhandler Express.js middleware](https://www.npmjs.com/package/errorhandler) used only in development mode:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1116",
        "display_name": "TypescriptS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extra semicolons should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExtra semicolons (`;`) are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n  -  There was a misunderstanding about where semicolons are required or useful. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1125",
        "display_name": "TypescriptS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be used in comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoolean literals should be avoided in comparison expressions `==` and `!=` to improve code readability.\n\nThis rule also reports on redundant boolean operations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1488",
        "display_name": "TypescriptS1488",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variables should not be declared and then immediately returned or thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring a variable only to immediately return or throw it is a bad practice.\n\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3786",
        "display_name": "TypescriptS3786",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Template literal placeholder syntax should not be used in regular strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTemplate strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like `${variable} ` in a string between two back-ticks (```). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4634",
        "display_name": "TypescriptS4634",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Shorthand promises should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `Promise` needs to only \"resolve\" or \"reject\", it's more efficient and readable to use the methods specially created for such use\ncases: `Promise.resolve(value)` and `Promise.reject(error)`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1121",
        "display_name": "TypescriptS1121",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be made from within sub-expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule does not raise issues for the following patterns:\n\n  -  assignments at declaration-level: `let a = b = 0;` \n  -  chained assignments: `a = b = c = 0;` \n  -  relational assignments: `(a = 0) != b` \n  -  sequential assignments: `a = 0, b = 1, c = 2` \n  -  assignments in lambda body: `() =&gt; a = 0` \n  -  conditional assignment idiom: `a || (a = 0)` \n  -  assignments in (do-)while conditions: `while (a = 0);` \n\n## See\n\n  -  [MITRE, CWE-481](http://cwe.mitre.org/data/definitions/481.html) - Assigning instead of Comparing \n  -  [CERT, EXP45-C.](https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ) - Do not perform assignments in selection statements \n  -  [CERT, EXP51-J.](https://wiki.sei.cmu.edu/confluence/x/ITZGBQ) - Do not perform assignments in conditional expressions \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2692",
        "display_name": "TypescriptS2692",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"indexOf\" checks should not be for positive numbers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost checks against an `indexOf` call against an array compare it with -1 because 0 is a valid index. Any checks which look for values\n&gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the element, consider using `includes`\ninstead. Before using&nbsp;`includes` method make sure that your browser version is supporting it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\ndocumentation at MDN\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1128",
        "display_name": "TypescriptS1128",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unnecessary imports should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason to import modules you don't use; and every reason not to: doing so needlessly increases the load.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5604",
        "display_name": "TypescriptS5604",
        "severity": "warning",
        "category": "security",
        "rule_title": "Using intrusive permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Powerful features](https://www.w3.org/TR/permissions/#powerful-feature) are browser features (geolocation, camera, microphone ...) that\ncan be accessed with JavaScript API and may require a permission granted by the user. These features can have a high impact on privacy and user\nsecurity thus they should only be used if they are really necessary to implement the critical parts of an application.\n\nThis rule highlights intrusive permissions when requested with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\">the\nfuture standard (but currently experimental) web browser query API</a> and specific APIs related to the permission. It is highly recommended to\ncustomize this rule with the permissions considered as intrusive in the context of the web application.\n\n## Ask Yourself Whether\n\n  -  Some powerful features used by the application are not really necessary. \n  -  Users are not clearly informed why and when powerful features are used by the application. \n\nYou are at risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  In order to respect user privacy it is recommended to avoid using intrusive powerful features. \n\n## Sensitive Code Example\n\nWhen using [geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API), Firefox for example retrieves personal\ninformation like nearby wireless access points and IP address and sends it to the default geolocation service provider, <a\nhref=\"https://www.google.com/privacy/lsf.html\">Google Location Services</a>:\n\n## Compliant Solution\n\nIf geolocation is required, always explain to the user why the application needs it and prefer requesting an approximate location when\npossible:\n\n## See\n\n  <li> [OWASP Web Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [CWE-250](https://cwe.mitre.org/data/definitions/250.html) - Execution with Unnecessary Privileges \n  -  [CWE-359](https://cwe.mitre.org/data/definitions/359.html) - Exposure of Private Information \n  -  [W3C](https://www.w3.org/TR/permissions/) - Permissions \n  <li> [Mozilla](https://support.mozilla.org/en-US/kb/does-firefox-share-my-location-websites) - Does Firefox share my location with\n  websites? </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5725",
        "display_name": "TypescriptS5725",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling resource integrity features is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFetching external resources, for example from a CDN, without verifying their integrity could impact the security of an application if the CDN gets\ncompromised and resources are replaced by malicious ones. Resources integrity feature will block resources inclusion into an application if the\npre-computed digest of the expected resource doesn't match with the digest of the retrieved resource.\n\n## Ask Yourself Whether\n\n  -  The resources are fetched from external CDNs. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\n  <li> implement resources integrity checks for all static resources (where \"static\" means that the resource's content doesn't change dynamically\n  based on the browser) </li>\n  -  use versioned resources instead of using \"latest\" version of the resources \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CWE-353](https://cwe.mitre.org/data/definitions/353.html) - Missing Support for Integrity Check \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\">OWASP Top 10 2017 Category\n  A6</a> - Security Misconfiguration </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) - Subresource Integrity \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5728",
        "display_name": "TypescriptS5728",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling content security policy fetch directives is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nContent security policy (CSP) (fetch directives) is a [W3C standard ](https://www.w3.org/TR/CSP3/) which is used by a server to specify,\nvia a http header, the origins from where the browser is allowed to load resources. It can help to mitigate the risk of cross site scripting (XSS)\nattacks and reduce privileges used by an application. If the website doesn't define CSP header the browser will apply <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> by default.\n\nIn the above example, all resources are allowed from the website where this header is set and script resources fetched from example.com are also\nauthorized:\n\n## Ask Yourself Whether\n\n  -  The resources of the application are fetched from various untrusted locations. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy fetch directives, in particular **default-src** directive and continue to properly sanitize and validate all\ninputs of the application, indeed CSP fetch directives is only a tool to reduce the impact of cross site scripting attacks.\n\n## Sensitive Code Example\n\nIn a Express.js application, the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) contentSecurityPolicy\nmiddleware is disabled:\n\n## Compliant Solution\n\nIn a Express.js application, a standard way to implement CSP is the <a href=\"https://www.npmjs.com/package/helmet\">helmet contentSecurityPolicy\nmiddleware</a>:\n\n## See\n\n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\">OWASP Top 10 2017 Category\n  A6</a> - Security Misconfiguration </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5042",
        "display_name": "TypescriptS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\nFor [tar](https://github.com/npm/node-tar) module:\n\nFor [adm-zip](https://github.com/cthackers/adm-zip) module:\n\nFor [jszip](https://stuk.github.io/jszip/) module:\n\nFor [yauzl](https://github.com/thejoshwolfe/yauzl) module\n\nFor [extract-zip](https://github.com/maxogden/extract-zip) module:\n\n## Compliant Solution\n\nFor [tar](https://github.com/npm/node-tar) module:\n\nFor [adm-zip](https://github.com/cthackers/adm-zip) module:\n\nFor [jszip](https://stuk.github.io/jszip/) module:\n\nBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\n\nFor [yauzl](https://github.com/thejoshwolfe/yauzl) module\n\nBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\n\nFor [extract-zip](https://github.com/maxogden/extract-zip) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](http://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "typescript:S4204",
        "display_name": "TypescriptS4204",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The \"any\" type should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables can be declared with or without types. Variables declared without a type will be implicitly typed if the declaration includes an\ninitialization, and compiler type checking will be automatically applied to any typed variable. But if you declare a variable with the\n`any` \"type\" then you've explicitly told the compiler not to do any type checking, which is risky. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4325",
        "display_name": "TypescriptS4325",
        "severity": "info",
        "category": "convention",
        "rule_title": "Redundant casts and non-null assertions should be avoided",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe TypeScript compiler automatically casts a variable to the relevant type inside conditionals where it is possible to infer the type (because\n`typeof`, `instanceof`, etc was used). This compiler feature makes casts and not-`null` assertions unnecessary.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3358",
        "display_name": "TypescriptS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ternary operators should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4324",
        "display_name": "TypescriptS4324",
        "severity": "info",
        "category": "convention",
        "rule_title": "Primitive return types should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe return type `any` should be avoided because it prevents the type safety checks normally done by the compiler. When a function\nreturns a primitive type (i.e. number, string or boolean) it is safe to replace `any` with `number`, `string` or\n`boolean` type respectively, or remove the return type completely and let compiler infer it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4327",
        "display_name": "TypescriptS4327",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"this\" should not be assigned to variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssigning `this` to a local variable is a way to reference parent context inside inner functions. In TypeScript when using arrow\nfunctions this happens automatically.\n\nThis rule raises an issue when `this` is assigned to a local variable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores `this` used for destructuring.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4323",
        "display_name": "TypescriptS4323",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type aliases should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnion and intersection types are convenient but can make code harder to read and maintain. So if a particular union or intersection is used in\nmultiple places, the use of a type alias is recommended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4326",
        "display_name": "TypescriptS4326",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"await\" should not be used redundantly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `async` function always wraps the return value in a `Promise`. Using `return await` is therefore redundant.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3353",
        "display_name": "TypescriptS3353",
        "severity": "error",
        "category": "convention",
        "rule_title": "Unchanged variables should be marked \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a variable that is unchanged after initialization `const` is an indication to future maintainers that \"no this isn't updated,\nand it's not supposed to be\". `const` should be used in these situations in the interests of code clarity.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4322",
        "display_name": "TypescriptS4322",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type guards should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA common idiom in JavaScript to differentiate between two possible types is to check for the presence in the object of a member of the desired\ntype. Usually, to simplify the code, a boolean function is created to check the type.\n\nTypescript provides user defined type guard functions. These are just functions with a return type of `argumentName is SomeType`. Such\nfunctions return `true` if the argument is of the specified type. One of the advantages of using such a function is that in a conditional\nblock where the condition is a type guard, the compiler automatically performs the appropriate casts, so explicit casting becomes unnecessary.\n\nThis rule raises an issue when a boolean function checking for the type of its only argument can be replaced with a user-defined type guard\nfunction.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[TypeScript advanced types](https://www.typescriptlang.org/docs/handbook/advanced-types.html)\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1854",
        "display_name": "TypescriptS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores initializations to -1, 0, 1, `null`, `undefined`, [], {}, `true`, `false` and\n`\"\"`. Variables that start with an underscore (e.g. '`_unused`') are ignored.\n\nThis rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "typescript:S4328",
        "display_name": "TypescriptS4328",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Dependencies should be explicit",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDependencies should be explicitly listed in the `package.json` file. Importing a module that is not declared as a dependency makes it an\nimplicit one and is bound to create problems.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5659",
        "display_name": "TypescriptS5659",
        "severity": "error",
        "category": "security",
        "rule_title": "JWT should be signed and verified with strong cipher algorithms",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.\n\n  -  Don't use `none` algorithm to sign or verify the validity of a token. \n  -  Don't use a token without verifying its signature before. \n\n## Noncompliant Code Example\n\n[jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) library:\n\n## Compliant Solution\n\n[jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-347](https://cwe.mitre.org/data/definitions/347.html) - Improper Verification of Cryptographic Signature \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2819",
        "display_name": "TypescriptS2819",
        "severity": "error",
        "category": "security",
        "rule_title": "Origins should be verified during cross-origin communications",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBrowsers [allow message exchanges](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) between Window objects of\ndifferent origins. \n\nBecause any window can send / receive messages from other window it is important to verify the sender's / receiver's identity:\n\n  <li> When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (`*`) should not be\n  used). </li>\n  -  When receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. \n\n## Noncompliant Code Example\n\nWhen sending message:\n\nWhen receiving message:\n\n## Compliant Solution\n\nWhen sending message:\n\nWhen receiving message:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management) -\n  Broken Authentication and Session Management </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) - postMessage API \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1862",
        "display_name": "TypescriptS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`.\n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n\n&nbsp;\n\n**Note that this rule requires Node.js to be available during analysis.**\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2260",
        "display_name": "TypescriptS2260",
        "severity": "warning",
        "category": "convention",
        "rule_title": "JavaScript parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4335",
        "display_name": "TypescriptS4335",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Types without members, 'any' and 'never' should not be used in type intersections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn intersection type combines multiple types into one. This allows you to add together existing types to get a single type that has all the\nfeatures you need. However an intersection with a type without members doesn't change the resulting type. In the opposite the usage of\n`any` or `never` as part of an intersection will always results in `any` or `never` respectively. This is\nalmost certainly an error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5547",
        "display_name": "TypescriptS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1067",
        "display_name": "TypescriptS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5542",
        "display_name": "TypescriptS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\n      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. </li>\n      <li> The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block always gets\n      encrypted to the same ciphertext block. This mode should not be used. </li>\n    \n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1066",
        "display_name": "TypescriptS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3003",
        "display_name": "TypescriptS3003",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Comparison operators should not be used with strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of comparison operators (`&lt;`, `&lt;=`, `&gt;=`, `&gt;`) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule ignores string comparisons occurring in the callback of a sort invocation, e.g.:\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1186",
        "display_name": "TypescriptS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a function not to have a function body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3001",
        "display_name": "TypescriptS3001",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"delete\" should be used only with object properties",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe semantics of the `delete` operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3923",
        "display_name": "TypescriptS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3801",
        "display_name": "TypescriptS3801",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should use \"return\" consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.\n\nIn particular a function, in JavaScript, will return `undefined` in any of the following cases:\n\n  -  It exits without a `return` statement. \n  -  It executes a `return` with no value. \n\nThis rule verifies that return values are either always or never specified for each path through a function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2392",
        "display_name": "TypescriptS2392",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables should be used in the blocks where they are declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables that are declared inside a block but used outside of it (which is possible with a `var`-style declaration) should be declared\noutside the block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3699",
        "display_name": "TypescriptS3699",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The output of functions that don't return anything should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return `undefined`, which is probably not what was intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5876",
        "display_name": "TypescriptS5876",
        "severity": "error",
        "category": "security",
        "rule_title": "A new session should be created during user authentication",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSession fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).\n\n## Noncompliant Code Example\n\nFor [Passport.js](http://www.passportjs.org/):\n\n## Compliant Solution\n\nFor [Passport.js](http://www.passportjs.org/):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication) -\n  Broken Authentication </li>\n  -  [OWASP Sesssion Fixation](https://www.owasp.org/index.php/Session_fixation) \n  -  [MITRE, CWE-384](https://cwe.mitre.org/data/definitions/384.html) - Session Fixation \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2245",
        "display_name": "TypescriptS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\nAs the `Math.random()` function relies on a weak pseudorandom number generator, this function should not be used for security-critical\napplications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used\ninstead.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a cryptographically strong pseudorandom number generator (CSPRNG) like `crypto.getRandomValues()`. \n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3579",
        "display_name": "TypescriptS3579",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Array indexes should be numeric",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssociative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as\neasy as an array, and more reliable if you need named members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4423",
        "display_name": "TypescriptS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different from \"TLSv1.2\", \"TLSv1.3\", \"DTLSv1.2\" or\n\"DTLSv1.3\").\n\n## Noncompliant Code Example\n\n`secureProtocol`, `minVersion`/`maxVersion` and `secureOptions` should not be set to use weak TLS\nprotocols (TLSv1.1 and lower):\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\nSet either `secureProtocol` or `secureOptions` or `minVersion` to use secure protocols only (TLSv1.2 and\nhigher):\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4426",
        "display_name": "TypescriptS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic keys should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of cryptographic systems require a sufficient key size to be robust against brute-force attacks.\n\n[NIST recommendations](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf) will be checked for these\nuse-cases:\n\n**Digital Signature Generation** and **Verification:** \n\n  -  p ≥ 2048 AND q ≥ 224 for DSA (`p` is key length and `q` the modulus length) \n  -  n ≥ 2048 for RSA (`n` is the key length) \n\n**Key Agreement**: \n\n  -  p ≥ 2048 AND q ≥ 224 for DH and MQV \n  <li> n ≥ 224 for ECDH and ECMQV (Examples: `secp192r1` is a non-compliant curve (`n` &lt; 224) but `secp224k1` is\n  compliant (`n` &gt;= 224)) </li>\n\n**Symmetric keys**: \n\n  -  key length ≥ 128 bits \n\nThis rule will not raise issues for ciphers that are considered weak (no matter the key size) like `DES`, `Blowfish`.\n\n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [NIST 800-131A](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf) - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2123",
        "display_name": "TypescriptS2123",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Values should not be uselessly incremented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5757",
        "display_name": "TypescriptS5757",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing confidential information to be logged is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLog management is an important topic, especially for the security of a web application, to ensure user activity, including potential attackers, is\nrecorded and available for an analyst to understand what's happened on the web application in case of malicious activities.\n\nRetention of specific logs for a defined period of time is often necessary to comply with regulations such as GDPR, <a\nhref=\"https://www.pcisecuritystandards.org/documents/Effective-Daily-Log-Monitoring-Guidance.pdf\">PCI DSS</a> and others. However, to protect user's\nprivacy, certain informations are forbidden or strongly discouraged from being logged, such as user passwords or credit card numbers, which obviously\nshould not be stored or at least not in clear text.\n\n## Ask Yourself Whether\n\nIn a production environment:\n\n  -  The web application uses confidential information and logs a significant amount of data. \n  -  Logs are externalized to SIEM or Big Data repositories. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nLoggers should be configured with a list of confidential, personal information that will be hidden/masked or removed from logs.\n\n## Sensitive Code Example\n\nWith [Signale log management framework](https://www.npmjs.com/package/signale) the code is sensitive when an empty list of secrets is\ndefined:\n\n## Compliant Solution\n\nWith [Signale log management framework](https://www.npmjs.com/package/signale) it is possible to define a list of secrets that will be\nhidden in logs:\n\n## See\n\n  -  [CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Insertion of Sensitive Information into Log File \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S131",
        "display_name": "TypescriptS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3696",
        "display_name": "TypescriptS3696",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Literals should not be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is a bad practice to `throw` something that's not derived at some level from `Error`. If you can't find an existing\n`Error` type that suitably conveys what you need to convey, then you should extend `Error` to create one.\n\nSpecifically, part of the point of throwing `Error`s is to communicate about the conditions of the error, but literals have far less\nability to communicate meaningfully than `Error`s because they don't include stacktraces.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4782",
        "display_name": "TypescriptS4782",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Optional property declarations should not use both '?' and 'undefined' syntax",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn TypeScript there are several ways to declare a property with `undefined` value: adding `| undefined` in the property type\nor using optional property syntax (`?` after its name). Use `| undefined` syntax when you want to be explicit that an object has\nthat property, in that case TypeScript compiler will not allow omitting it:\n\nUse optional property syntax for properties holding some additional information.\n\nUsing `| undefined` for optional property is redundant, it can be omitted without change to the actual type. Still if you want to force\nthe property in the object consider using only `| undefined` without `?`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S134",
        "display_name": "TypescriptS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `switch`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3330",
        "display_name": "TypescriptS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## Compliant Solution\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5759",
        "display_name": "TypescriptS5759",
        "severity": "info",
        "category": "security",
        "rule_title": "Forwarding client IP address is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsers often connect to web servers through HTTP proxies.\n\nProxy can be configured to forward the client IP address via the `X-Forwarded-For` or `Forwarded` HTTP headers.\n\nIP address is a personal information which can identify a single user and thus impact his privacy.\n\n## Ask Yourself Whether\n\n  -  The web application uses reverse proxies or similar but doesn't need to know the IP address of the user. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nUser IP address should not be forwarded unless the application needs it, as part of an authentication, authorization scheme or log management for\nexamples.\n\n## Sensitive Code Example\n\n[node-http-proxy](https://github.com/http-party/node-http-proxy)\n\n[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)\n\n## Compliant Solution\n\n[node-http-proxy](https://github.com/http-party/node-http-proxy)\n\n[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)\n\n## See\n\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) - X-Forwarded-For \n",
        "disable": false
      },
      {
        "real_name": "typescript:S125",
        "display_name": "TypescriptS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S126",
        "display_name": "TypescriptS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "typescript:S128",
        "display_name": "TypescriptS128",
        "severity": "error",
        "category": "convention",
        "rule_title": "Switch cases should end with an unconditional \"break\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in the following cases:\n\n## See\n\n  -  [MITRE, CWE-484](http://cwe.mitre.org/data/definitions/484.html) - Omitted Break Statement in Switch \n  <li> [CERT, MSC17-C.](https://wiki.sei.cmu.edu/confluence/x/ldYxBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> [CERT, MSC52-J.](https://wiki.sei.cmu.edu/confluence/x/1DdGBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2137",
        "display_name": "TypescriptS2137",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Special identifiers should not be bound or assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:\n\n  -  `eval` - evaluates a string as JavaScript code \n  -  `arguments` - used to access function arguments through indexed properties. \n  -  `undefined` - returned for values and properties that have not yet been assigned \n  -  `NaN` - Not a Number; returned when math functions fail. \n  -  `Infinity` - when a number exceeds the upper limit of the floating point numbers \n\nThese words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2138",
        "display_name": "TypescriptS2138",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"undefined\" should not be assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`undefined` is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n`null` should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4798",
        "display_name": "TypescriptS4798",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Optional boolean parameters should have default value",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving default value for optional boolean parameters makes the logic of function when missing that parameter more evident. When providing a default\nvalue is not possible, it is better to split the function into two with a clear responsibility separation.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2376",
        "display_name": "TypescriptS2376",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Property getters and setters should come in pairs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.\n\nThis rule also enforces the reverse situation (getter but no setter).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1848",
        "display_name": "TypescriptS1848",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Objects should not be created to be dropped immediately without being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.\n\nIf it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nImmediately dropped new objects inside `try`-statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2814",
        "display_name": "TypescriptS2814",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables and functions should not be redeclared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.\n\nThis rule also applies to function parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2933",
        "display_name": "TypescriptS2933",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Private properties that are only assigned in the constructor or at declaration should be \"readonly\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`readonly` properties can only be assigned in a class constructor or at the point of declaration. If a class has a property that's not\nmarked `readonly` but is only set in the constructor, it could cause confusion about the property's intended use. To avoid confusion, such\nproperties should be marked `readonly` to make their intended use explicit, and to prevent future maintainers from inadvertently changing\ntheir use.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5527",
        "display_name": "TypescriptS5527",
        "severity": "error",
        "category": "security",
        "rule_title": "Server hostnames should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate. \n\nThe certificate's hostname-specific data should match the server hostname.\n\nIt's not recommended to re-invent the wheel by implementing custom hostname verification.\n\nTLS/SSL libraries provide built-in hostname verification functions that should be used.\n\n## Noncompliant Code Example\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-297](https://cwe.mitre.org/data/definitions/297.html) - Improper Validation of Certificate with Host Mismatch \n",
        "disable": false
      },
      {
        "real_name": "typescript:S135",
        "display_name": "TypescriptS135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loops should not contain more than a single \"break\" or \"continue\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRestricting the number of `break` and `continue` statements in a loop is done in the interest of good structured programming.\n\n\nOnly one `break` or one `continue` statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4790",
        "display_name": "TypescriptS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "typescript:S138",
        "display_name": "TypescriptS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n\n## Exceptions\n\nThis function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned\na name.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2251",
        "display_name": "TypescriptS2251",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "A \"for\" loop update clause should move the counter in the right direction",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as `while` loops. More\ntypically, an infinite `for` loop is a bug. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC54-J.](https://wiki.sei.cmu.edu/confluence/x/aTdGBQ) - Avoid inadvertent wrapping of loop counters \n",
        "disable": false
      },
      {
        "real_name": "typescript:S139",
        "display_name": "TypescriptS139",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comments should not be located at the end of lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1533",
        "display_name": "TypescriptS1533",
        "severity": "info",
        "category": "convention",
        "rule_title": "Wrapper objects should not be used for primitive types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the `new` keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1774",
        "display_name": "TypescriptS1774",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The ternary operator should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose `if`/`else` structure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1530",
        "display_name": "TypescriptS1530",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function declarations should not be made within blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each\nother.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4123",
        "display_name": "TypescriptS4123",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"await\" should only be used with promises",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is possible to use `await` on values which are not `Promise`s, but it's useless and misleading. The point of\n`await` is to pause execution until the `Promise`'s asynchronous code has run to completion. With anything other than a\n`Promise`, there's nothing to wait for.\n\nThis rule raises an issue when an `await`ed value is guaranteed not to be a `Promise`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2068",
        "display_name": "TypescriptS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5332",
        "display_name": "TypescriptS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\nFor [nodemailer](https://nodemailer.com):\n\nFor [ftp](https://github.com/mscdex/node-ftp):\n\nFor [telnet-client](https://github.com/mkozjak/node-telnet-client):\n\n## Compliant Solution\n\nFor [nodemailer](https://nodemailer.com) one of the following options must be set:\n\nFor [ftp](https://github.com/mscdex/node-ftp):\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1539",
        "display_name": "TypescriptS1539",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"strict\" mode should be used with caution",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4124",
        "display_name": "TypescriptS4124",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Constructors should not be declared inside interfaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclare a constructor inside an `interface`, and you will get a simple method with the name \"constructor\". The same thing will happen if\nyou create a `new` method inside the `interface`: you'll get a simple method named \"new\".\n\nInstead, the intent was probably to specify that the type did not originate from a TypeScript file. In such cases, just use the <code>declare\nclass</code> syntax.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1535",
        "display_name": "TypescriptS1535",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"for...in\" loops should filter properties before acting on them",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `for...in` statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that don't take this into account can fail.\n\nTherefore, the body of every `for...in` statement should be wrapped in an `if` statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nLoops used to clone objects are ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1537",
        "display_name": "TypescriptS1537",
        "severity": "info",
        "category": "convention",
        "rule_title": "Trailing commas should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1656",
        "display_name": "TypescriptS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S905",
        "display_name": "TypescriptS905",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-empty statements should change control flow or have at least one side-effect",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement (other than a null statement, which means a statement containing only a semicolon `;`) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-482](http://cwe.mitre.org/data/definitions/482) - Comparing instead of Assigning \n",
        "disable": false
      },
      {
        "real_name": "typescript:S909",
        "display_name": "TypescriptS909",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"continue\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`continue` is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as `if` should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S103",
        "display_name": "TypescriptS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5691",
        "display_name": "TypescriptS5691",
        "severity": "warning",
        "category": "security",
        "rule_title": "Statically serving hidden files is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHidden files are created automatically by many tools to save user-preferences, well-known examples are `.profile`, `.bashrc`,\n`.bash_history` or .`git`. To simplify the view these files are not displayed by default using operating system commands like\n`ls`.\n\nOutside of the user environment, hidden files are sensitive because they are used to store privacy-related information or even hard-coded\nsecrets.\n\n## Ask Yourself Whether\n\n  -  Hidden files may have been inadvertently uploaded to the static server's public directory and it accepts requests to hidden files. \n  <li> There is no business use cases linked to serve files in `.name` format but the server is not configured to reject requests to this\n  type of files. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Disable the serving of hidden files. \n\n## Sensitive Code Example\n\n[Express.js serve-static](https://www.npmjs.com/package/serve-static) middleware:\n\n## Compliant Solution\n\n[Express.js serve-static](https://www.npmjs.com/package/serve-static) middleware:\n\n## See\n\n  <li> [github.com/mtojek/go-url-fuzzer](https://github.com/mtojek/go-url-fuzzer) - Discover hidden files and directories on a web server.\n  </li>\n  <li> [OWASP Web Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration. </li>\n  -  [CWE-538](https://cwe.mitre.org/data/definitions/538.html) - File and Directory Information Exposure \n",
        "disable": false
      },
      {
        "real_name": "typescript:S104",
        "display_name": "TypescriptS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S105",
        "display_name": "TypescriptS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5693",
        "display_name": "TypescriptS5693",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing requests with excessive content length is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevents DoS attacks.\n\n## Ask Yourself Whether\n\n  -  size limits are not defined for the different resources of the web application. \n  -  the web application is not protected by [rate limiting](https://en.wikipedia.org/wiki/Rate_limiting) features. \n  -  the web application infrastructure has limited resources. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      -  lower or equal to 8mb for file uploads. \n      -  lower or equal to 2mb for other requests. \n    \nIt is recommended to customize the rule with the limit values that correspond to the web application.\n\n## Sensitive Code Example\n\n[formidable](https://www.npmjs.com/package/formidable) file upload module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) file upload module:\n\n[body-parser](https://www.npmjs.com/package/body-parser) module:\n\n## Compliant Solution\n\n[formidable](https://www.npmjs.com/package/formidable) file upload module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) file upload module:\n\n[body-parser](https://www.npmjs.com/package/body-parser) module:\n\n## See\n\n  <li> [Owasp Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html) - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [CWE-770](https://cwe.mitre.org/data/definitions/770.html) - Allocation of Resources Without Limits or Throttling \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n",
        "disable": false
      },
      {
        "real_name": "typescript:S106",
        "display_name": "TypescriptS106",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Standard outputs should not be used directly to log anything",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDebug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, ERR02-J.](https://wiki.sei.cmu.edu/confluence/x/nzdGBQ) - Prevent exceptions while logging data \n",
        "disable": false
      },
      {
        "real_name": "typescript:S107",
        "display_name": "TypescriptS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S108",
        "display_name": "TypescriptS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty. Moreover `catch` blocks are ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S109",
        "display_name": "TypescriptS109",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Magic numbers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\n\nUsing magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\n\nThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\n\n-1, 0 and 1 are not considered magic numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1301",
        "display_name": "TypescriptS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements are useful when there are many different cases depending on the value of the same expression.\n\nFor just one or two cases however, the code will be more readable with `if` statements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4137",
        "display_name": "TypescriptS4137",
        "severity": "info",
        "category": "convention",
        "rule_title": "Type assertions should use \"as\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nType assertion can be done in two ways: with `as MyType` or with `&lt;MyType&gt;`. But since there is an ambiguity in the\nlatter when using JSX and there is no ambiguity in the former, `as` is preferred.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4138",
        "display_name": "TypescriptS4138",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"for of\" should be used with Iterables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the `for of` syntax. Use a\ncounter, and ... well you'll get the right behavior, but your code just isn't as clean or clear.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1541",
        "display_name": "TypescriptS1541",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cyclomatic Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2870",
        "display_name": "TypescriptS2870",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"delete\" should not be used on arrays",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `delete` operator can be used to remove a property from any object. Arrays are objects, so the `delete` operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. \n\nThe proper method for removing an element at a certain index would be:\n\n  -  `Array.prototype.splice` - add/remove elements from the array \n  -  `Array.prototype.pop` - add/remove elements from the end of the array \n  -  `Array.prototype.shift` - add/remove elements from the beginning of the array \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4139",
        "display_name": "TypescriptS4139",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for in\" should not be used with iterables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the `for of` syntax. Use\n`for in` and you'll iterate the properties, rather than the values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S121",
        "display_name": "TypescriptS121",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control structures should use curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP19-C.](https://wiki.sei.cmu.edu/confluence/x/g9YxBQ) - Use braces for the body of an if, for, or while statement \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2871",
        "display_name": "TypescriptS2871",
        "severity": "error",
        "category": "correctness",
        "rule_title": "A compare function should be provided when using \"Array.prototype.sort()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe default sort order is alphabetic, rather than numeric, regardless of the types in the array. Specifically, even if an array contains only\nnumbers, all values in it will be converted to strings and sorted lexicographically, for an order like this: 1, 15, 2, 20, 5.\n\nFortunately the `sort` method allows you to pass an optional compare function to specify the sort order. When a compare function is\nsupplied, the returned order depends on the return value of the compare function. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4136",
        "display_name": "TypescriptS4136",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method overloads should be grouped together",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S122",
        "display_name": "TypescriptS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2077",
        "display_name": "TypescriptS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule's current implementation does not follow variables. It will only detect SQL queries which are formatted directly in the function\ncall.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2990",
        "display_name": "TypescriptS2990",
        "severity": "info",
        "category": "convention",
        "rule_title": "The global \"this\" object should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the keyword `this` is used outside of an object, it refers to the global `this` object, which is the same thing as the\n`window` object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the `this`, or replace\nit with `window`; it will have the same effect and be more readable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2757",
        "display_name": "TypescriptS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-existent operators '=+', '=-' and '=!' should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs (`=+`, `=-` or `=!`) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-` and `=!` are used without any space between the two operators and when\nthere is at least one whitespace after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2999",
        "display_name": "TypescriptS2999",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"new\" operators should be used with functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `new` keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n`TypeError` because there won't be a constructor function for the `new` keyword to invoke.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2755",
        "display_name": "TypescriptS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\n## Noncompliant Code Example\n\n[libxmljs](https://github.com/libxmljs/libxmljs) module:\n\n## Compliant Solution\n\n[libxmljs](https://github.com/libxmljs/libxmljs) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> [OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n  </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3723",
        "display_name": "TypescriptS3723",
        "severity": "info",
        "category": "convention",
        "rule_title": "Trailing commas should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nModern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration\ndoes not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S113",
        "display_name": "TypescriptS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools work better when files end with an empty line.\n\nThis rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1788",
        "display_name": "TypescriptS1788",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Function parameters with default values should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify\nas many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.\n\nBut all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass `undefined` in order to \"get to\"\nthe non-default parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S117",
        "display_name": "TypescriptS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Variable, property and parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule checks that all variable,\nproperty and parameter names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1874",
        "display_name": "TypescriptS1874",
        "severity": "info",
        "category": "convention",
        "rule_title": "Deprecated APIs should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOnce deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-477](http://cwe.mitre.org/data/definitions/477.html) - Use of Obsolete Functions \n  -  [CERT, MET02-J.](https://wiki.sei.cmu.edu/confluence/x/6TdGBQ) - Do not use deprecated or obsolete classes or methods \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1994",
        "display_name": "TypescriptS1994",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"for\" loop increment clauses should modify the loops' counters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt can be extremely confusing when a `for` loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1751",
        "display_name": "TypescriptS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n`if` statement should be used instead.\n\nAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested `return`,\n`break` or `throw` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3257",
        "display_name": "TypescriptS3257",
        "severity": "info",
        "category": "convention",
        "rule_title": "Primitive types should be omitted from initialized or defaulted declarations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified. Specifically, primitive\n(`number`, `string`, `boolean` and others) types should be omitted from variable and parameter declaration when they\ncan be easily inferred from the initialized or defaulted value.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3499",
        "display_name": "TypescriptS3499",
        "severity": "info",
        "category": "convention",
        "rule_title": "Shorthand object properties should be grouped at the beginning or end of an object declaration",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGrouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1871",
        "display_name": "TypescriptS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:javascript:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3498",
        "display_name": "TypescriptS3498",
        "severity": "info",
        "category": "convention",
        "rule_title": "Object literal shorthand syntax should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1515",
        "display_name": "TypescriptS1515",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not be defined inside loops",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDefining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1516",
        "display_name": "TypescriptS1516",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiline string literals should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nContinuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2966",
        "display_name": "TypescriptS2966",
        "severity": "info",
        "category": "convention",
        "rule_title": "Non-null assertions should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe point of declaring an optional property or parameter is to make explicit the fact that it might contain no valid value, i.e. `null`\nor `undefined`. Using a non-null assertion (the `!.` operator) will lead to a runtime error if the optional does contain\n`null` or `undefined`. Even if the value is tested first, it's still considered a bad practice to use a non-null assertion. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3812",
        "display_name": "TypescriptS3812",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Results of \"in\" and \"instanceof\" should be negated rather than operands",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMixing up the order of operations will almost always yield unexpected results.\n\nSimilarly, mis-applied negation will also yield bad results. For instance consider the difference between `!key in dict` and <code>!(key\nin dict)</code>. The first looks for a boolean value (`!key`) in `dict`, and the other looks for a string and inverts the\nresult. `!obj instanceof SomeClass` has the same problem.\n\nThis rule raises an issue when the left operand of an `in` or `instanceof` operator is negated.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1192",
        "display_name": "TypescriptS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching `/^\\w*$/`.\nString literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. <code>'use\nstrict';</code>.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5689",
        "display_name": "TypescriptS5689",
        "severity": "info",
        "category": "security",
        "rule_title": "Disclosing fingerprints from web application technologies is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDisclosing technology fingerprints allows an attacker to gather information about the technologies used to develop the web application and to\nperform relevant security assessments more quickly (like the identification of known vulnerable components).\n\n## Ask Yourself Whether\n\n  -  The `x-powered-by` HTTP header or similar is used by the application. \n  -  Technologies used by the application are confidential and should not be easily guessed. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nIt's recommended to not disclose technologies used on a website, with `x-powered-by` HTTP header for example. \n\nIn addition, it's better to completely disable this HTTP header rather than setting it a random value.\n\n## Sensitive Code Example\n\n[Express.js](https://www.npmjs.com/package/express) name is disclosed by default into the `x-powered-by` HTTP header:\n\n## Compliant Solution\n\n`x-powered-by` HTTP header should be disabled in [Express.js](https://www.npmjs.com/package/express) with\n`app.disable` or with helmet [hidePoweredBy](https://www.npmjs.com/package/helmet) middleware:\n\n## See\n\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html\">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Information Exposure \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1763",
        "display_name": "TypescriptS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`, `break` and `continue`) and `throw` expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores unreachable `break` statements in `switch` clauses.\n\nHoisted variables declarations without initialization are always considered reachable.\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1764",
        "display_name": "TypescriptS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThe specific case of testing one variable against itself is a valid test for `NaN` and is therefore ignored.\n\nSimilarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. \n\nMoreover comma operator `,` and `instanceof` operator are ignored as there are use-cases when there usage is valid.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:javascript:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "typescript:S5443",
        "display_name": "TypescriptS5443",
        "severity": "error",
        "category": "security",
        "rule_title": "Using publicly writable directories is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n`/tmp` in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2012-2451](https://nvd.nist.gov/vuln/detail/CVE-2012-2451) \n  -  [CVE-2015-1838](https://nvd.nist.gov/vuln/detail/CVE-2015-1838) \n\nThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like `/tmp` (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., `TMP` and `TMPDIR`.\n\n  -  `/tmp` \n  -  `/var/tmp` \n  -  `/usr/tmp` \n  -  `/dev/shm` \n  -  `/dev/mqueue` \n  -  `/run/lock` \n  -  `/var/run/lock` \n  -  `/Library/Caches` \n  -  `/Users/Shared` \n  -  `/private/tmp` \n  -  `/private/var/tmp` \n  -  `\\Windows\\Temp` \n  -  `\\Temp` \n  -  `\\TMP` \n\n## Ask Yourself Whether\n\n  -  Files are read from or written into a publicly writable folder \n  -  The application creates files with predictable names into a publicly writable folder \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      -  The generated filename is unpredictable \n      -  The file is readable and writable only by the creating user ID \n      -  The file descriptor is not inherited by child processes \n      -  The file will be destroyed as soon as it is closed \n    \n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "typescript:S100",
        "display_name": "TypescriptS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function and method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S101",
        "display_name": "TypescriptS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names (and interfaces for TypeScript)\nmatch a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1529",
        "display_name": "TypescriptS1529",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Bitwise operators should not be used in boolean contexts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe bitwise operators `&amp;`, `|` can be mistaken for the boolean operators `&amp;&amp;` and `||`.\n\n\nThis rule raises an issue when `&amp;` or `|` is used in a boolean context.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a file contains other bitwise operations, (`^`, `&lt;&lt;`, `&gt;&gt;&gt;`, `&gt;&gt;`,\n`~`, `&amp;=`, `^=`, `|=`, `&lt;&lt;=`, `&gt;&gt;=`, `&gt;&gt;&gt;=` and\n`&amp;` or `|` used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2737",
        "display_name": "TypescriptS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"catch\" clauses should do more than rethrow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `catch` clause that only rethrows the caught exception has the same effect as omitting the `catch` altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1526",
        "display_name": "TypescriptS1526",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables declared with \"var\" should be declared before they are used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables declared with `var` have the special property that regardless of where they're declared in a function they \"float\" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. \n\nTo keep confusion to a minimum, `var` declarations should happen before they are used for the first time.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1528",
        "display_name": "TypescriptS1528",
        "severity": "info",
        "category": "convention",
        "rule_title": "Array constructors should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArray literals should always be preferred to Array constructors.\n\nArray constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:\n\n  -  If the argument is a number and it is a natural number the length will be equal to the value of the argument. \n\n  -  If the argument is a number, but not a natural number an exception will be thrown. \n\n  -  Otherwise the array will have one element with the argument as its value. \n\nNote that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't\ncontain anything, so no callbacks will be applied to the array elements.\n\nFor these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2612",
        "display_name": "TypescriptS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose POSIX file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"`others`\" class refers to all users except the owner of the file and the members of the group assigned to this file.\n\nGranting permissions to this group can lead to unintended access to files. \n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\nNode.js [`fs`](https://nodejs.org/api/fs.html)\n\nNode.js [`process.umask`](https://nodejs.org/api/process.html#process_process_umask_mask)\n\n## Compliant Solution\n\nNode.js [`fs`](https://nodejs.org/api/fs.html)\n\nNode.js [`process.umask`](https://nodejs.org/api/process.html#process_process_umask_mask)\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1523",
        "display_name": "TypescriptS1523",
        "severity": "error",
        "category": "security",
        "rule_title": "Dynamically executing code is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExecuting code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2017-9807](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807) \n  -  [CVE-2017-9802](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802) \n\nSome APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon as they also increase the risk of <a\nhref=\"https://www.owasp.org/index.php/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (exemple: XSS\nattack) and have a huge impact on an application's security.\n\nThis rule raises issues on calls to `eval` and `Function` constructor. This rule does not detect code injections. It only\nhighlights the use of APIs which should be used sparingly and very carefully. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  -  the executed code may come from an untrusted source and hasn't been sanitized. \n  -  you really need to run code dynamically. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a [sandboxed](https://en.wikipedia.org/wiki/Sandbox_(computer_security)) environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).\n\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\n\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\n\n## Sensitive Code Example\n\n## Exceptions\n\nThis rule will not raise an issue when the argument of the `eval` or `Function` is a literal string as it is reasonably\nsafe.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE CWE-95](http://cwe.mitre.org/data/definitions/95.html) - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3512",
        "display_name": "TypescriptS3512",
        "severity": "info",
        "category": "convention",
        "rule_title": "Template strings should be used instead of concatenation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2424",
        "display_name": "TypescriptS2424",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Built-in objects should not be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.\n\nThis rule detects overrides of the following native objects:\n\n  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError </li>\n  -  Numbers and dates - Number, Math, Date \n  -  Text processing - String, RegExp \n  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array </li>\n  -  Keyed collections - Map, Set, WeakMap, WeakSet \n  -  Structured data - ArrayBuffer, DataView, JSON \n  -  Control abstraction objects - Promise \n  -  Reflection - Reflect, Proxy \n  -  Internationalization - Intl \n  -  Non-standard objects - Generator, Iterator, ParallelArray, StopIteration \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3513",
        "display_name": "TypescriptS3513",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"arguments\" should not be accessed directly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args `function`. \n\nBut just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. \n\nIf you don't want to name arguments explicitly, use the `...` syntax to specify that an a variable number of arguments is expected. Then\ninside the function, you'll be dealing with a first-class array, rather than an array-like structure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4721",
        "display_name": "TypescriptS4721",
        "severity": "warning",
        "category": "security",
        "rule_title": "Using shell interpreter when executing OS commands is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.\n\n## Ask Yourself Whether\n\n  -  OS command name or parameters are user-controlled. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nUse functions that don't spawn a shell.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-78](http://cwe.mitre.org/data/definitions/78) - Improper Neutralization of Special Elements used in an OS Command \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1219",
        "display_name": "TypescriptS1219",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not contain non-case labels",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\n\n## Noncompliant Code Example\n\nCase 1, the code is syntactically correct but the behavior is not the expected one\n\nCase 2, the code is correct and behaves as expected but is hardly readable \n\n## Compliant Solution\n\nCase 1\n\nCase 2\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1451",
        "display_name": "TypescriptS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2427",
        "display_name": "TypescriptS2427",
        "severity": "info",
        "category": "correctness",
        "rule_title": "The base should be provided to \"parseInt\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `parseInt` function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3516",
        "display_name": "TypescriptS3516",
        "severity": "error",
        "category": "convention",
        "rule_title": "Function returns should not be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.\n\nThis rule raises an issue when a function contains several `return` statements that all return the same value.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3514",
        "display_name": "TypescriptS3514",
        "severity": "info",
        "category": "convention",
        "rule_title": "Destructuring syntax should be used for assignments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic. \n\nThis rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4043",
        "display_name": "TypescriptS4043",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Array-mutating methods should not be used misleadingly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMany of JavaScript's `Array` methods return an altered version of the array while leaving the source array intact. `reverse`\nand `sort` do not fall into this category. Instead, they alter the source array **in addition to** returning the altered version,\nwhich is likely not what was intended.\n\nThis rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original\nvalue is altered.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4165",
        "display_name": "TypescriptS4165",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe transitive property says that if `a == b` and `b == c`, then `a == c`. In such cases, there's no point in\nassigning `a` to `c` or vice versa because they're already equivalent. \n\nThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3402",
        "display_name": "TypescriptS3402",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings and non-strings should not be added",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse a `+` with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.\n\nThis rule raises an issue when `+` is used with a string and a non-string.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3524",
        "display_name": "TypescriptS3524",
        "severity": "info",
        "category": "convention",
        "rule_title": "Braces and parentheses should be used consistently with arrow functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.\n\n## Noncompliant Code Example\n\nWith the configured defaults forbidding parentheses\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S2310",
        "display_name": "TypescriptS2310",
        "severity": "error",
        "category": "convention",
        "rule_title": "Loop counters should not be assigned to from within the loop body",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLoop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in\nthe loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4619",
        "display_name": "TypescriptS4619",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"in\" should not be used on arrays",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `in` operator used on an array is valid but the code will likely not have the expected behavior. The `in` operator deals\nwith the indexes of the array, not with the values.\n\nIf checking for an array slot is indeed desired, using `hasOwnProperty` makes the code intention clearer.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1226",
        "display_name": "TypescriptS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able\nto tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some\ndevelopers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could\nconfuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3525",
        "display_name": "TypescriptS3525",
        "severity": "error",
        "category": "convention",
        "rule_title": "Class methods should be used instead of \"prototype\" assignments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOriginally JavaScript didn't support `class`es, and class-like behavior had to be kludged using things like `prototype`\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering `prototype` uses should be converted to\ntrue `class`es. The new syntax is more expressive and clearer, especially to those with experience in other languages.\n\nSpecifically, with ES2015, you should simply declare a `class` and define its methods inside the class declaration.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1105",
        "display_name": "TypescriptS1105",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the end of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention\nsetup in parameter:\n\n  -  [1tbs](https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style) (default) \n  -  [allman](https://en.wikipedia.org/wiki/Indentation_style#Allman_style) \n  -  [stroustrup](https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup) \n\n## Noncompliant Code Example\n\nUsing the parameter default (1tbs):\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Object literals appearing as arguments can start on their own line. \n\n  -  When blocks are inlined (left and right curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "typescript:S1313",
        "display_name": "TypescriptS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3854",
        "display_name": "TypescriptS3854",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"super()\" should be invoked appropriately",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are situations where `super()` must be invoked and situations where `super()` cannot be invoked.\n\nThe basic rule is: a constructor in a non-derived class cannot invoke `super()`; a constructor in a derived class must invoke\n`super()`.\n\nFurthermore:\n\n  -  `super()` must be invoked before the `this` and `super` keywords can be used. \n  -  `super()` must be invoked with the same number of arguments as the base class' constructor. \n  -  `super()` can only be invoked in a constructor - not in any other method. \n  -  `super()` cannot be invoked multiple times in the same constructor. \n\n### Known Limitations\n\n  -  False negatives: some issues are not raised if the base class is not defined in the same file as the current class. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3972",
        "display_name": "TypescriptS3972",
        "severity": "error",
        "category": "convention",
        "rule_title": "Conditionals should start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an `if` and its\nresulting **then** statement. However, when an `if` is placed on the same line as the closing `}` from a preceding\n**then**, **else** or **else if** part, it is either an error - `else` is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4822",
        "display_name": "TypescriptS4822",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Promise rejections should not be caught by 'try' block",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn exception (including `reject`) thrown by a promise will not be caught by a nesting `try` block, due to the asynchronous\nnature of execution. Instead, use `catch` method of `Promise` or wrap it inside `await` expression.\n\nThis rule reports `try-catch` statements containing nothing else but call(s) to a function returning a `Promise` (thus it's\nless likely that `catch` is intended to catch something else than `Promise` rejection).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3973",
        "display_name": "TypescriptS3973",
        "severity": "error",
        "category": "convention",
        "rule_title": "A conditionally executed single line should be denoted by indentation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4023",
        "display_name": "TypescriptS4023",
        "severity": "info",
        "category": "convention",
        "rule_title": "Interfaces should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty interface is equivalent to an empty object ('{}'). Normally you cannot directly assign an object literal to a type when the object literal\ncontains more properties than are specified in the type. But in the case of an empty interface, this check is not done, and such assignments will be\nsuccessful. The result is highly likely to confuse maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4144",
        "display_name": "TypescriptS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFunctions with fewer than 3 lines are ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1439",
        "display_name": "TypescriptS1439",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Only \"while\", \"do\", \"for\" and \"switch\" statements should be labelled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement or block of statements can be identified by a label, but those labels should be used only on `while`,\n`do-while`, `for` and `switch` statements. Using labels in any other context leads to unstructured, confusing code.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1438",
        "display_name": "TypescriptS1438",
        "severity": "info",
        "category": "convention",
        "rule_title": "Statements should end with semicolons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn JavaScript, the semicolon (`;`) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1314",
        "display_name": "TypescriptS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3616",
        "display_name": "TypescriptS3616",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Comma and logical OR operators should not be used in switch cases",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe comma operator (`,`) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a `switch` `case`. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.\n\nSimilarly the logical OR operator (`||`) will not work in a `switch` `case`, only the first argument will be\nconsidered at execution time.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3735",
        "display_name": "TypescriptS3735",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"void\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `void` operator evaluates its argument and unconditionally returns `undefined`. It can be useful in pre-ECMAScript 5\nenvironments, where `undefined` could be reassigned, but generally, its use makes code harder to understand.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is raised when `void 0` is used in place of `undefined`. \n\nNo issue is also raised when `void` is used before immediately invoked function expressions.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4140",
        "display_name": "TypescriptS4140",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sparse arrays should not be declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn array declared with missing (\"sparse\") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert\nthe missing value and forgot.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4143",
        "display_name": "TypescriptS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection elements should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S888",
        "display_name": "TypescriptS888",
        "severity": "error",
        "category": "convention",
        "rule_title": "Equality operators should not be used in \"for\" loop termination conditions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting `for` loop termination using an equality operator (`==` and `!=`) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\n\n  -  starts below the ending value and is incremented by 1 on each iteration. \n  -  starts above the ending value and is decremented by 1 on each iteration. \n\nEquality operators are also ignored when the test is against `null`.\n\n## See\n\n  -  [MITRE, CWE-835](http://cwe.mitre.org/data/definitions/835) - Loop with Unreachable Exit Condition ('Infinite Loop') \n  -  [CERT, MSC21-C.](https://wiki.sei.cmu.edu/confluence/x/x9YxBQ) - Use robust loop termination conditions \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3863",
        "display_name": "TypescriptS3863",
        "severity": "info",
        "category": "convention",
        "rule_title": "Imports from the same modules should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMultiple imports from the same module should be merged together to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4830",
        "display_name": "TypescriptS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nIt's not recommended to reinvent the wheel by implementing custom certificate chain validation.\n\nTLS libraries provide built-in certificate validation functions that should be used.\n\n## Noncompliant Code Example\n\nThere is no way to disable certificate verification in tls, https and request modules but it is possible to not reject request when verification\nfails.\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3984",
        "display_name": "TypescriptS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Errors should not be created without being thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Error` without actually throwing it is useless and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1441",
        "display_name": "TypescriptS1441",
        "severity": "info",
        "category": "convention",
        "rule_title": "Quotes for string literals should be used consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that all string literals use the same kind of quotes.\n\n## Noncompliant Code Example\n\nUsing the parameter default (forcing single quotes):\n\n## Compliant Solution\n\n## Exceptions\n\nStrings that contain quotes are ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3981",
        "display_name": "TypescriptS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection sizes and array length comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always `true`. Similarly testing that it is less than zero will always return\n`false`. Perhaps the intent was to check the non-emptiness of the collection or array instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4156",
        "display_name": "TypescriptS4156",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"module\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach file is considered an \"external\" module. The use of the `module` keyword creates an internal module, and was used before the\nECMAScript 2015 addition of `namespace`s for the same purpose. Now that `namespace` is available, the use of `module`\nis deprecated because it does the same thing, and its use could confuse maintainers unaware of the history of the language.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S1440",
        "display_name": "TypescriptS1440",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `==` and `!=` operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates `' \\t\\r\\n' == 0` as `true`.\n\nIt is best to always use the side-effect-less `===` and `!==` operators instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEven if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of `==` or\n`!=` is tolerated in such context. In the following case, if `foo` hasn't been initialized, its default value is not\n`null` but `undefined`. Nevertheless `undefined == null`, so JavaScript developers get the expected behavior.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4158",
        "display_name": "TypescriptS4158",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Empty collections should not be accessed or iterated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally\nomitted or the developer doesn't understand the situation.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4157",
        "display_name": "TypescriptS4157",
        "severity": "info",
        "category": "convention",
        "rule_title": "Default type parameters should be omitted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason to repeat a default type unless it is early in a list and other, non-default types come after it. Instead, leave it out and only\nsupply type when it is something other than the default.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5247",
        "display_name": "TypescriptS5247",
        "severity": "warning",
        "category": "security",
        "rule_title": "Disabling auto-escaping in template engines is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo reduce the risk of cross-site scripting attacks, templating systems, such as `Twig`, `Django`, `Smarty`,\n`Groovy's template engine`, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).\n\nAuto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into [html entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity)) will not be relevant\nwhen variables are used in a [html attribute](https://en.wikipedia.org/wiki/HTML_attribute) because '`:`' character is not\nescaped and thus an attack as below is possible:\n\n## Ask Yourself Whether\n\n  <li> Templates are used to render web content and\n    <ul>\n      -  dynamic variables in templates come from untrusted locations or are user-controlled inputs \n      -  there is no local mechanism in place to sanitize or validate the inputs. \n    \nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nEnable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.\n\n## Sensitive Code Example\n\n[mustache.js](https://www.npmjs.com/package/mustache) template engine:\n\n[handlebars.js](https://www.npmjs.com/package/handlebars) template engine:\n\n[markdown-it](https://www.npmjs.com/package/markdown-it) markup language parser:\n\n[marked](https://www.npmjs.com/package/marked) markup language parser:\n\n[kramed](https://www.npmjs.com/package/kramed) markup language parser:\n\n## Compliant Solution\n\n[mustache.js](https://www.npmjs.com/package/mustache) template engine:\n\n[handlebars.js](https://www.npmjs.com/package/handlebars) template engine:\n\n[markdown-it](https://www.npmjs.com/package/markdown-it) markup language parser:\n\n[marked](https://www.npmjs.com/package/marked) markup language parser:\n\n[kramed](https://www.npmjs.com/package/kramed) markup language parser:\n\n## See\n\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [MITRE, CWE-79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> [MITRE, CWE-80](https://cwe.mitre.org/data/definitions/80.html) - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> [MITRE, CWE-83](https://cwe.mitre.org/data/definitions/83.html) - Improper Neutralization of Script in Attributes in a Web Page\n  </li>\n  -  [MITRE, CWE-84](https://cwe.mitre.org/data/definitions/84.html) - Improper Neutralization of Encoded URI Schemes in a Web Page \n",
        "disable": false
      },
      {
        "real_name": "typescript:S3504",
        "display_name": "TypescriptS3504",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables should be declared with \"let\" or \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 introduced the `let` and `const` keywords for block-scope variable declaration. Using `const`\ncreates a read-only (constant) variable.\n\nThe distinction between the variable types created by `var` and by `let` is significant, and a switch to `let`\nwill help alleviate many of the variable scope issues which have caused confusion in the past. \n\nBecause these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from `var` to `let`, and you should be aware that they raise `SyntaxError`s\nin pre-ECMAScript 2015 environments.\n\nThis rule raises an issue when `var` is used instead of `const` or `let`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S3626",
        "display_name": "TypescriptS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements, such as `return`, `break` and `continue` let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`break` and `return` inside `switch` statement are ignored, because they are often used for consistency.\n`continue` with label is also ignored, because label is usually used for clarity. Also a jump statement being a single statement in a block\nis ignored.\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4030",
        "display_name": "TypescriptS4030",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collection and array contents should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the\ncollection moot, or an access is missing.\n\nThis rule raises an issue when no methods are called on a collection other than those that add or remove values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S4275",
        "display_name": "TypescriptS4275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Getters and setters should access the expected fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGetters and setters provide a way to enforce encapsulation by providing `public` methods that give controlled access to\n`private` fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed\ngetters and setters, which can result in the wrong field being accessed by a getter or setter.\n\nThis rule raises an issue in any of these cases:\n\n  -  A setter does not update the field with the corresponding name. \n  -  A getter does not access the field with the corresponding name. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "typescript:S5122",
        "display_name": "TypescriptS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\n[nodejs http](https://nodejs.org/api/http.html) built-in module:\n\n[Express.js](https://www.npmjs.com/package/express) framework with [cors middleware](https://www.npmjs.com/package/cors):\n\n## Compliant Solution\n\n[nodejs http](https://nodejs.org/api/http.html) built-in module:\n\n[Express.js](https://www.npmjs.com/package/express) framework with [cors middleware](https://www.npmjs.com/package/cors):\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "typescript:S2092",
        "display_name": "TypescriptS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content) or not (ie\n  HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## Compliant Solution\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "flex:S1455",
        "display_name": "FlexS1455",
        "severity": "info",
        "category": "convention",
        "rule_title": "Package definition should be separate from Class definition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring the package and class together has been deprecated since ActionScript 3. The package definition should be declared outside of the class\ndefinition even if the old syntax is still supported. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1454",
        "display_name": "FlexS1454",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Multiple \"++\" or \"--\" unary operators should not be used in a single arithmetic expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing several \"--\" or \"++\" unary operators in the same arithmetic expression can quickly make the expression unreadable. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S4524",
        "display_name": "FlexS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be first or last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nfirst or the last one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1176",
        "display_name": "FlexS1176",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Public classes, methods, properties and metadata should be documented with ASDoc",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTry to imagine using the standard Flex API without ASDoc. It would be a nightmare, because ASDoc is the only way to understand of the contract of\nthe API.\n\nDocumenting an API with ASDoc increases the productivity of the developers use it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nClasses or class elements with an ASDoc `@private` comment are ignored by this rule.\n",
        "disable": false
      },
      {
        "real_name": "flex:ParsingError",
        "display_name": "FlexParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Flex parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the Flex parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1451",
        "display_name": "FlexS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:LineLength",
        "display_name": "FlexLinelength",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1172",
        "display_name": "FlexS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe following cases are ignored\n\n  -  event handlers. \n  -  overriding methods. \n  -  all methods in classes implementing one or more interfaces. \n  <li> methods which are empty or where the body consists of a single comment or a single `throw` statement (i.e. where the intention is\n  apparently to simulate an abstract class). </li>\n\n## See\n\n  <li> [CERT, MSC12-C.](https://www.securecoding.cert.org/confluence/x/NYA5) - Detect and remove code that has no effect or is never\n  executed </li>\n",
        "disable": false
      },
      {
        "real_name": "flex:S107",
        "display_name": "FlexS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1170",
        "display_name": "FlexS1170",
        "severity": "info",
        "category": "convention",
        "rule_title": "Public constants and fields initialized at declaration should be \"const static\" rather than merely \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMaking a public constant just `const` as opposed to `static const` leads to duplicating its value for every instance of the\nclass, uselessly increasing the amount of memory required to execute the application.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S108",
        "display_name": "FlexS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1301",
        "display_name": "FlexS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements are useful when there are many different cases depending on the value of the same expression.\n\nFor just one or two cases however, the code will be more readable with `if` statements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1466",
        "display_name": "FlexS1466",
        "severity": "error",
        "category": "security",
        "rule_title": "The flash.system.Security.exactSettings property should never be set to false",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Security.exactSettings value should remain set at the default value of true. Setting this value to false could make the SWF vulnerable to\ncross-domain attacks.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1467",
        "display_name": "FlexS1467",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Constructors should not dispatch events",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA listener can be attached to an object only after it has been constructed. So dispatching an event in a constructor is useless and error prone.\n\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "flex:S1982",
        "display_name": "FlexS1982",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"MovieClip.onEnterFrame\" event handler should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `onEnterFrame` event handler is continually invoked at the frame rate of the SWF file, regardless of which individual movie frame it\nis set for. Having too many `onEnterFrame` handlers can seriously degrade performance. \n\nIf the use of this event handler cannot be avoided entirely, then it should be created as close to its use as possible, and then destroyed as soon\nas possible afterward.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "flex:S1465",
        "display_name": "FlexS1465",
        "severity": "error",
        "category": "security",
        "rule_title": "\"LocalConnection\" should be configured to narrowly specify the domains with which local connections to other Flex application are allowed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `LocalConnection` object is used to invoke a method in another `LocalConnection` object, either within a single SWF file or\nbetween multiple SWF files. This kind of local connection should be authorized only when the origin (domain) of the other Flex applications is\nperfectly defined. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1784",
        "display_name": "FlexS1784",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Method visibility should be explicitly declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccess modifiers define which classes can access properties, variables, methods, and other classes. If an access modifier is not specified, the\naccess level defaults to `internal`, which grants access to all classes in the same package. This may be what is intended, but it should be\nspecified explicitly to avoid confusion.\n\nAvailable access modifiers are:\n\n  -  `internal` - access allowed within the same package \n  -  `private` - access allowed only within the same class \n  -  `protected` - access allowed to the class and its child classes \n  -  `public` - unfettered access by all \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1068",
        "display_name": "FlexS1068",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" fields should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `private` field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1145",
        "display_name": "FlexS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "flex:S1464",
        "display_name": "FlexS1464",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"ManagedEvents\" tags should have companion \"Event\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe \"ManagedEvents\" metadata tag allows you to flag an event as being managed. By definition this \"ManagedEvents\" metadata tag should be used in\npair with an \"Event\" metadata tag. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1144",
        "display_name": "FlexS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" functions should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPrivate functions that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the\nsize of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1462",
        "display_name": "FlexS1462",
        "severity": "error",
        "category": "convention",
        "rule_title": "Event names should not be hardcoded in event listeners",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing plain string event names in even listeners is an anti-pattern; if the event is renamed, the application can start behaving unexpectedly. A\nconstant variable should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1463",
        "display_name": "FlexS1463",
        "severity": "error",
        "category": "convention",
        "rule_title": "Event types should be defined in metadata tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the Flex documentation :\n\n> \n  <p>In an ActionScript file, when you define component events or other aspects of a component that affect more than a single property, you add the\n  metadata tag outside the class definition so that the metadata is bound to the entire class, as the following example shows:</p>\n  <pre>\n// Add the [Event] metadata tag outside of the class file.\n[Event(name=\"enableChange\", type=\"flash.events.Event\")]\npublic class ModalText extends TextArea {\n\n    ...\n\n    // Define class properties/methods\n    private var _enableTA:Boolean;\n\n    // Add the [Inspectable] metadata tag before the individual property.\n    [Inspectable(defaultValue=\"false\")]\n    public function set enableTA(val:Boolean):void {\n        _enableTA = val;\n        this.enabled = val;\n\n        // Define event object, initialize it, then dispatch it.\n        var eventObj:Event = new Event(\"enableChange\");\n        dispatchEvent(eventObj);\n    }\n}\n</pre>\n\n\nIn this example, the \"enableChange\" event must be considered part of the API. Therefore, it should be strongly typed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1066",
        "display_name": "FlexS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S120",
        "display_name": "FlexS120",
        "severity": "info",
        "category": "convention",
        "rule_title": "Package names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z]+(\\.[a-z][a-z0-9]*)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1186",
        "display_name": "FlexS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an `NotSupportedException` should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:OneStatementPerLine",
        "display_name": "FlexOnestatementperline",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1142",
        "display_name": "FlexS1142",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not contain too many return statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "flex:S1185",
        "display_name": "FlexS1185",
        "severity": "info",
        "category": "convention",
        "rule_title": "Overriding methods should do more than simply call the same method in the super class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding a method just to call the same method from the super class without performing any other actions is useless and misleading.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1821",
        "display_name": "FlexS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S3923",
        "display_name": "FlexS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1469",
        "display_name": "FlexS1469",
        "severity": "error",
        "category": "convention",
        "rule_title": "The element type of an array field should be specified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nQuoted from the Flex documentation :\n\n> \n  <p>When you define an Array variable in ActionScript, you specify Array as the data type of the variable. However, you cannot specify the data type\n  of the elements of the Array.</p>\n  <p>To allow the Flex MXML compiler to perform type checking on Array elements, you can use the [ArrayElementType] metadata tag to specify the\n  allowed data type of the Array elements.</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1468",
        "display_name": "FlexS1468",
        "severity": "error",
        "category": "security",
        "rule_title": "Security.allowDomain(...) should only be used in a tightly focused manner",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling Security.allowDomain(\"*\") lets any domain cross-script into the domain of this SWF and exercise its functionality.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1820",
        "display_name": "FlexS1820",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.\n\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "flex:S116",
        "display_name": "FlexS116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Field names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[_a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S115",
        "display_name": "FlexS115",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constant names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S117",
        "display_name": "FlexS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[_a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1434",
        "display_name": "FlexS1434",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables of the \"Object\" type should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new variable with the type \"Object\" means that it may be used to store any kind of object. This feature may be required in some specific\ncontexts, but it leaves the compiler unable to do any kind of type checking, and is therefore a hazardous practice. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1950",
        "display_name": "FlexS1950",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Cases in a \"switch\" should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving multiple cases in a `switch` with the same condition is confusing at best. At worst, it's a bug that is likely to induce further\nbugs as the code is maintained. \n\nIf the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that\nfuture maintenance will be done on the dead case, rather than on the one that's actually used.\n\nOn the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1312",
        "display_name": "FlexS1312",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loggers should be \"private static const\" and should share naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLoggers should be:\n\n  <li> `private`: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> `static`: not dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  -  `const`: created once and only once per class. \n\n## Noncompliant Code Example\n\nWith the default regular expression `LOG(?:GER)?`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1871",
        "display_name": "FlexS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:flex:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "flex:FunctionSinglePointOfExit",
        "display_name": "FlexFunctionsinglepointofexit",
        "severity": "info",
        "category": "convention",
        "rule_title": "A function should have a single point of exit at the end of the function",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis is required by IEC 61508, under good programming style.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S134",
        "display_name": "FlexS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\" and \"switch\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `do while` and `switch` statements is a key ingredient for\nmaking what's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "flex:S1438",
        "display_name": "FlexS1438",
        "severity": "info",
        "category": "convention",
        "rule_title": "Statements should end with semicolons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Flex, the semicolon is optional as a statement separator, but omitting semicolons can be confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1439",
        "display_name": "FlexS1439",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Only \"while\", \"do\" and \"for\" statements should be labelled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement or block of statements can be identified by a label, but those labels should be used only on `while`,\n`do-while` and `for` statements. Using labels in any other context leads to unstructured, confusing code. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:SwitchWithoutDefault",
        "display_name": "FlexSwitchwithoutdefault",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://www.securecoding.cert.org/confluence/x/YgE) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "flex:S1117",
        "display_name": "FlexS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Local variables should not shadow class fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## Noncompliant Code Example\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "flex:S4507",
        "display_name": "FlexS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\nThe `trace()` function outputs debug statements, which can be read by anyone with a debug version of the Flash player:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "flex:FunctionComplexity",
        "display_name": "FlexFunctioncomplexity",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cyclomatic Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1314",
        "display_name": "FlexS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL18-C.](https://www.securecoding.cert.org/confluence/x/_QC7AQ) - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  -  [CERT, DCL50-J.](https://www.securecoding.cert.org/confluence/x/hYClBg) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "flex:S1952",
        "display_name": "FlexS1952",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Objects should not be instantiated inside a loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt can be expensive to instantiate a new object, and doing so inside a loop is typically an error. Instead, create the object once, before the\nloop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1116",
        "display_name": "FlexS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Empty statements should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEmpty statements, i.e. `;`, are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://www.securecoding.cert.org/confluence/x/NYA5) - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> [CERT, MSC51-J.](https://www.securecoding.cert.org/confluence/x/7gCTAw) - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> [CERT, EXP15-C.](https://www.securecoding.cert.org/confluence/x/i4FtAg) - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n",
        "disable": false
      },
      {
        "real_name": "flex:S1435",
        "display_name": "FlexS1435",
        "severity": "error",
        "category": "convention",
        "rule_title": "The special \"star\" type should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the ActionScript language reference, the star type:\n\n> \n  <p>Specifies that a property is untyped. Use of the asterisk symbol for a type annotation is equivalent to using no type annotation. Expressions\n  that read from untyped properties are considered untyped expressions. Use of untyped expressions or properties is recommended in the following\n  circumstances:</p>\n  <ul>\n    <li> When you want to defer type checking to runtime. You can use an untyped property or expression to circumvent compile-time type checking in\n    strict mode. Note, however, that runtime type checking of assignment statements occurs whether you use strict mode or not. </li>\n    <li> When you want to store the value undefined in a property. Unlike previous versions of ActionScript, the value undefined is not a member of\n    the Object data type. You must use an untyped property to store the value undefined. </li>\n  </ul>\n\n\nBut deferring type checking to runtime can highly impact the robustness of the application because the compiler is unable to assist the\ndeveloper.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:CommentedCode",
        "display_name": "FlexCommentedcode",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "flex:WithStatement",
        "display_name": "FlexWithstatement",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"with\" statements should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNever use `with` statements, since they decrease readability. When you do not specify a variable's scope, you do not always know where\nyou are setting properties, so your code can be confusing.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:NonEmptyCaseWithoutBreak",
        "display_name": "FlexNonemptycasewithoutbreak",
        "severity": "error",
        "category": "convention",
        "rule_title": "Switch cases should end with an unconditional \"break\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in the following cases:\n\n## See\n\n  -  [MITRE, CWE-484](http://cwe.mitre.org/data/definitions/484.html) - Omitted Break Statement in Switch \n  <li> [CERT, MSC17-C.](https://www.securecoding.cert.org/confluence/x/YIFLAQ) - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> [CERT, MSC52-J.](https://www.securecoding.cert.org/confluence/x/ewHAAQ) - Finish every set of statements associated with a case\n  label with a break statement </li>\n",
        "disable": false
      },
      {
        "real_name": "flex:S1470",
        "display_name": "FlexS1470",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Classes that extend \"Event\" should override \"Event.clone()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding Event.clone() is a required part of the API contract:\n\n> \n  <p>You are required to override the Event.clone() method in your Event subclass. The clone() method returns a cloned copy of the event object by\n  setting the type property and any new properties in the clone. Typically, you define the clone() method to return an event instance created with the\n  new operator.</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1151",
        "display_name": "FlexS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch case\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `switch` statement should be used only to clearly define some new branches in the control flow. As soon as a `case`\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S127",
        "display_name": "FlexS127",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for\" loop stop conditions should be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. \n\nStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\n\nThis rule tracks three types of non-invariant stop conditions:\n\n  -  When the loop counters are updated in the body of the `for` loop \n  -  When the stop condition depend upon a method call \n  -  When the stop condition depends on an object property, since such properties could change during the execution of the loop. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:ActionScript2",
        "display_name": "FlexActionscript2",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements, operators and keywords specific to ActionScript 2 should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsage of statements, operators and keywords specific to ActionScript 2 does not allow to migrate to ActionScript 3. This includes \"intrinsic\"\nkeyword, set variable statement and following list of operators:\n\n  -  `&lt;&gt;` (inequality) - use `!=` instead \n  -  `add` (concatenation (strings)) - use `+` instead \n  -  `eq` (equality (strings)) - use `==` instead \n  -  `ne` (not equal (strings)) - use `!=` instead \n  -  `lt` (less than (strings)) - use `&lt;` instead \n  -  `le` (less than or equal to (strings)) - use `&lt;=` instead \n  -  `gt` (greater than (strings)) - use `&gt;` instead \n  -  `ge` (greater than or equal to (strings)) - use `&gt;=` instead \n  -  `and` (logical and) - use `&amp;&amp;` instead \n  -  `or` (logical or) - use `||` instead \n  -  `not` (logical not) - use `!` instead \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "flex:S1444",
        "display_name": "FlexS1444",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"public static\" fields should be constant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to declare a field \"public\" and \"static\" without also declaring it \"const\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n`null`. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-500](http://cwe.mitre.org/data/definitions/500.html) - Public Static Field Not Marked Final \n  -  [CERT OBJ10-J.](https://www.securecoding.cert.org/confluence/x/QQBqAQ) - Do not use public static nonfinal fields \n",
        "disable": false
      },
      {
        "real_name": "flex:S1445",
        "display_name": "FlexS1445",
        "severity": "info",
        "category": "convention",
        "rule_title": "Constructors should not have a \"void\" return type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven though this is syntactically correct, the `void` return type should not be used in the signature of a constructor. Indeed some\ndevelopers might be confused by this syntax, believing that the constructor is in fact a standard function. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1125",
        "display_name": "FlexS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1440",
        "display_name": "FlexS1440",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `==` and `!=` operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates `' \\t\\r\\n' == 0` as `true`.\n\nIt is best to always use the side-effect-less `===` and `!==` operators instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S100",
        "display_name": "FlexS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression: ^[a-z][a-zA-Z0-9]*$\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S101",
        "display_name": "FlexS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1448",
        "display_name": "FlexS1448",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Classes should not have too many methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n",
        "disable": false
      },
      {
        "real_name": "flex:S1446",
        "display_name": "FlexS1446",
        "severity": "error",
        "category": "convention",
        "rule_title": "Dynamic classes should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dynamic class defines an object that can be altered at run time by adding or changing properties and methods. This extremely powerful mechanism\nshould be used very carefully, and only in very limited use cases. \n\nIndeed, by definition dynamic classes make refactoring difficult and prevent the compiler from raising potential errors at compile time. \n\n## Noncompliant Code Example\n\n \n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1447",
        "display_name": "FlexS1447",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Constructor bodies should be as lightweight as possible",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn ActionScript 3, constructor code is always interpreted rather than compiled by the JIT at runtime, which is why the body of a constructor should\nbe as lightweight as possible. As soon as a constructor contains branches (\"if\", \"for\", \"switch\", ...) an issue is logged.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S1481",
        "display_name": "FlexS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "flex:S138",
        "display_name": "FlexS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "flex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "common-ts:DuplicatedBlocks",
        "display_name": "CommonTsDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-ts:FailedUnitTests",
        "display_name": "CommonTsFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-ts:SkippedUnitTests",
        "display_name": "CommonTsSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-ts:InsufficientCommentDensity",
        "display_name": "CommonTsInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-ts:InsufficientLineCoverage",
        "display_name": "CommonTsInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-ts:InsufficientBranchCoverage",
        "display_name": "CommonTsInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "ts"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-scala:DuplicatedBlocks",
        "display_name": "CommonScalaDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-scala:FailedUnitTests",
        "display_name": "CommonScalaFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-scala:SkippedUnitTests",
        "display_name": "CommonScalaSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-scala:InsufficientCommentDensity",
        "display_name": "CommonScalaInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-scala:InsufficientLineCoverage",
        "display_name": "CommonScalaInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-scala:InsufficientBranchCoverage",
        "display_name": "CommonScalaInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "scala:S1313",
        "display_name": "ScalaS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "scala:S1135",
        "display_name": "ScalaS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "scala:S3776",
        "display_name": "ScalaS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "scala:S1134",
        "display_name": "ScalaS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "scala:S1871",
        "display_name": "ScalaS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `match` statement or two branches in an `if` chain with the same implementation is at best\nduplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should be\ncombined, or for a `match`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `match` statement that contain a\nsingle line of code.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `match`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `match`-es with default\nclauses, rule {rule:scala:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "scala:S1451",
        "display_name": "ScalaS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S2068",
        "display_name": "ScalaS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](http://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](http://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "scala:S134",
        "display_name": "ScalaS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"match\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `match`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n",
        "disable": false
      },
      {
        "real_name": "scala:S4144",
        "display_name": "ScalaS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nMethods with fewer than 2 statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "scala:S4663",
        "display_name": "ScalaS4663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multi-line comments should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be\nremoved.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "scala:ParsingError",
        "display_name": "ScalaParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Scala parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1656",
        "display_name": "ScalaS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "scala:S103",
        "display_name": "ScalaS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "scala:S125",
        "display_name": "ScalaS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1479",
        "display_name": "ScalaS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"match\" expressions should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `match` expressions have a large number of clauses, it is usually an attempt to map two sets of data. A real map structure would be\nmore readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "scala:S105",
        "display_name": "ScalaS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1151",
        "display_name": "ScalaS1151",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"match case\" clauses should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `match` statement should be used only to clearly define some new branches in the control flow. As soon as a `case` clause\ncontains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n`case` clause should be extracted into a dedicated method.\n\n## Noncompliant Code Example\n\nWith the default threshold of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S1172",
        "display_name": "ScalaS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "scala:S104",
        "display_name": "ScalaS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1192",
        "display_name": "ScalaS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits\nand '_'.\n",
        "disable": false
      },
      {
        "real_name": "scala:S126",
        "display_name": "ScalaS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `case _` clause in a `match`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen all branches of an `if`-`else if` end with `return`, `break` or `throw`, the code that\ncomes after the `if` implicitly behaves as if it was in an `else` clause. This rule will therefore ignore that case.\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "scala:S107",
        "display_name": "ScalaS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n",
        "disable": false
      },
      {
        "real_name": "scala:S108",
        "display_name": "ScalaS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1764",
        "display_name": "ScalaS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Exceptions\n\nThis rule ignores `*`, `+`, and `=`. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:scala:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "scala:S1763",
        "display_name": "ScalaS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`) move control flow out of the current code block. So any statements that come after a jump are dead code. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "scala:S1862",
        "display_name": "ScalaS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if\"/\"else if\" statements and \"case\" in a \"match\" should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `match` and a chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to `true`.\n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n\nFor a `match`, the second `case` will never be executed, rendering it dead code. Worse there is the risk in this situation\nthat future maintenance will be done on the dead case, rather than on the one that's actually used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "scala:S1940",
        "display_name": "ScalaS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S1125",
        "display_name": "ScalaS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRedundant Boolean literals should be removed from expressions to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S1144",
        "display_name": "ScalaS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused \"private\" methods should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`private` methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1145",
        "display_name": "ScalaS1145",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`if` statements with conditions that are always false have the effect of making blocks of code non-functional. `if`\nstatements with conditions that are always true are completely redundant, and make the code less readable.\n\nThere are three possible causes for the presence of such code: \n\n  -  An if statement was changed during debugging and that debug code has been committed. \n  -  Some value was left unset. \n  -  Some logic is not doing what the programmer thought it did. \n\nIn any of these cases, unconditional `if` statements should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570.html) - Expression is Always False \n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571.html) - Expression is Always True \n",
        "disable": false
      },
      {
        "real_name": "scala:S1066",
        "display_name": "ScalaS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S1067",
        "display_name": "ScalaS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;` and `||` operators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n\n## Noncompliant Code Example\n\nWith the default threshold value of 3:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S101",
        "display_name": "ScalaS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S1186",
        "display_name": "ScalaS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a method not to have a method body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n",
        "disable": false
      },
      {
        "real_name": "scala:S122",
        "display_name": "ScalaS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S100",
        "display_name": "ScalaS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S3923",
        "display_name": "ScalaS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `match` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `match`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `match`-es without `case _`\nalternatives.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1481",
        "display_name": "ScalaS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n",
        "disable": false
      },
      {
        "real_name": "scala:S1821",
        "display_name": "ScalaS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"match\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `match` structures are difficult to understand because you can easily confuse the cases of an inner `match` as\nbelonging to an outer statement. Therefore nested `match` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `match` statements, but if you cannot, then consider moving\nthe inner `match` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "scala:S117",
        "display_name": "ScalaS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n",
        "disable": false
      },
      {
        "real_name": "scala:S138",
        "display_name": "ScalaS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Methods should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "scala"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.\n\nAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "common-py:DuplicatedBlocks",
        "display_name": "CommonPyDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-py:FailedUnitTests",
        "display_name": "CommonPyFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-py:SkippedUnitTests",
        "display_name": "CommonPySkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-py:InsufficientCommentDensity",
        "display_name": "CommonPyInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-py:InsufficientLineCoverage",
        "display_name": "CommonPyInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-py:InsufficientBranchCoverage",
        "display_name": "CommonPyInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-xml:FailedUnitTests",
        "display_name": "CommonXmlFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-xml:DuplicatedBlocks",
        "display_name": "CommonXmlDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-xml:InsufficientCommentDensity",
        "display_name": "CommonXmlInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-xml:SkippedUnitTests",
        "display_name": "CommonXmlSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-xml:InsufficientLineCoverage",
        "display_name": "CommonXmlInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-xml:InsufficientBranchCoverage",
        "display_name": "CommonXmlInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "Web:IllegalNamespaceCheck",
        "display_name": "WebIllegalnamespacecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of disallowed namespaces in XHTML documents",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows to ban declaration of some namespaces in the root element of XHML documents.\n\n## Noncompliant Code Example\n\nWith a \"namespaces\" value of \"http://java.sun.com/jsf/facelets\":\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S1135",
        "display_name": "WebS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "Web:S1134",
        "display_name": "WebS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "Web:S4645",
        "display_name": "WebS4645",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "<script>...</script> elements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen parsing a script node, the browser treats its contents as plain text, and immediately finishes parsing when it finds the first closing\n`&lt;/script&gt;` character sequence.\n\nAs a consequence, nested script nodes are not possible, because all opening `&lt;script&gt;` tags found along the way are ignored. \n\nWeb browsers doesn't support nested `&lt;script&gt;...&lt;/script&gt;` elements. But there is no error in such case and browsers just\nclose the first encountered `&lt;script&gt;` tag as soon as a closing `&lt;/script&gt;` tag is found along the way. So there is\na big chance to display something totally unexpected to the end-users. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S5255",
        "display_name": "WebS5255",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"aria-label\" or \"aria-labelledby\" attributes should be used to differentiate similar elements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a page contains multiple `&lt;nav&gt;`&nbsp;or `&lt;aside&gt;` elements, each one should have an `aria-label`\nor `aria-labelledby` attribute so that they can be differentiated. The same rule applies when multiple elements have\na&nbsp;`role` attribute with the same \"landmark\" value.\n\nLandmark roles are: `banner`, `complementary`, `contentinfo`, `form`, `main`,\n`navigation`, `search`, `application`.&nbsp;\n\nThe use of ARIA markup helps users of&nbsp;screen readers navigate across blocks of content. For example it makes groups of links easier to locate\nor skip.\n\n## Noncompliant Code Example\n\nMultiple `&lt;nav&gt;` element\n\nRepeated \"landmark\" role `\"navigation\"`\n\n## Compliant Solution\n\n## See\n\n  -  [WCAG2, ARIA11](https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html) - Using ARIA landmarks to identify regions of a page \n  -  [WCAG2, H97](https://www.w3.org/TR/WCAG20-TECHS/H97.html) - Grouping related links using the nav element \n  <li> <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0&amp;showtechniques=131#qr-content-structure-separation-programmatic\">WCAG2\n  1.3.1</a> Info and Relationships </li>\n",
        "disable": false
      },
      {
        "real_name": "Web:S5256",
        "display_name": "WebS5256",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Tables should have headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssistive technologies, such as screen readers, use `&lt;th&gt;` headers to provide some context when users navigates a table. Without\nit the user gets rapidly lost in the flow of data.\n\nHeaders should be properly associated with the corresponding `&lt;td&gt;`&nbsp;cells by using either a `scope` attribute or\n`headers` and `id` attributes. See&nbsp;<a href=\"https://www.w3.org/WAI/tutorials/tables/tips/\">W3C WAI&nbsp;Web Accessibility\nTutorials</a>&nbsp;for more information.\n\nThis rule raises an issue whenever a `&lt;table&gt;` does not contain any&nbsp;`&lt;th&gt;`&nbsp;elements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised on &lt;table&gt; used for layout purpose, i.e. when it contains a `role` attribute set to\n`\"presentation\"` or `\"none\"`. Note that <a href=\"https://www.w3schools.com/html/html_layout.asp\">using &lt;table&gt; for layout\npurpose is a bad practice</a>.\n\nNo issue will be raised on &lt;table&gt; containing an `aria-hidden` attribute set to `\"true\"`.\n\n## See\n\n  <li> [WCAG2, 1.3.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic)&nbsp;-&nbsp;Info\n  and Relationships </li>\n  -  [WCAG2,&nbsp;H51](https://www.w3.org/TR/WCAG20-TECHS/H51) - Using table markup to present tabular information \n",
        "disable": false
      },
      {
        "real_name": "Web:PageWithoutTitleCheck",
        "display_name": "WebPagewithouttitlecheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"<title>\" should be present in all pages",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTitles are important because they are displayed in search engine results as well as the browser's toolbar.\n\nThis rule verifies that the `&lt;head&gt;` tag contains a `&lt;title&gt;` one, and the `&lt;html&gt;` tag a\n`&lt;head&gt;` one.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S5257",
        "display_name": "WebS5257",
        "severity": "warning",
        "category": "convention",
        "rule_title": "HTML \"<table>\" should not be used for layout purposes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHTML &lt;table&gt; elements should not be used for layout purpose as it can confuse screen readers. It is recommended to use CSS instead.\n\nThis rule raises an issue on every `&lt;table&gt;` element containing a `role`&nbsp;attribute set to\n`\"presentation\"` or `\"none\"`, which is how [W3C recommends](https://www.w3.org/WAI/tutorials/tables/tips/) marks\nlayout tables.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [HTML Layouts](https://www.w3schools.com/html/html_layout.asp) \n",
        "disable": false
      },
      {
        "real_name": "Web:S5258",
        "display_name": "WebS5258",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Tables used for layout should not include semantic markup",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTables used for layout should not include semantic markup, such as `&lt;th&gt;` elements, as it can confuses assistive technologies. At\nbest this information will be ignored by screen readers and makes the code less maintainable. However it can also confuse some screen readers and\nreduce the web page accessibility.\n\nThis rule raises an issue when a `&lt;table&gt;` element containing the&nbsp;`role` attribute set to\n`\"presentation\"` or `\"none\"` also contains any of:\n\n  -  a `&lt;caption&gt;` element \n  -  a `&lt;th&gt;` element \n  -  a non-empty `summary` attribute \n  -  an `&lt;td&gt;` element with a `headers` or `scope` attribute \n\n## Noncompliant Code Example\n\n## See\n\n  <li> [WCAG2, 1.3.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic)&nbsp;-&nbsp;Info\n  and Relationships </li>\n  <li> [WCAG2, F46](https://www.w3.org/TR/WCAG20-TECHS/F46.html) - Failure of Success Criterion 1.3.1 due to using th elements, caption\n  elements, or non-empty summary attributes in layout tables </li>\n",
        "disable": false
      },
      {
        "real_name": "Web:FrameWithoutTitleCheck",
        "display_name": "WebFramewithouttitlecheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"<frames>\" should have a \"title\" attribute",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFrames allow different web pages to be put together on the same visual space. Users without disabilities can easily scan the contents of all frames\nat once. However, visually impaired users using screen readers hear the page content linearly.\n\nThe `title` attribute is used to list all the page's frames, enabling those users to easily navigate among them. Therefore, the\n`&lt;frame&gt;` and `&lt;iframe&gt;` tags should always have a `title` attribute.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:UnclosedTagCheck",
        "display_name": "WebUnclosedtagcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "All HTML tags should be closed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven if all browsers are fault-tolerant, HTML tags should be closed to prevent any unexpected behavior.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:MaxLineLengthCheck",
        "display_name": "WebMaxlinelengthcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "Web:RequiredAttributeCheck",
        "display_name": "WebRequiredattributecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track lack of required attributes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that the specified attributes are present in HTML tags.\n\n## Noncompliant Code Example\n\nGiven a required attribute list of: `img.alt,img.height,img.width`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:AvoidHtmlCommentCheck",
        "display_name": "WebAvoidhtmlcommentcheck",
        "severity": "info",
        "category": "security",
        "rule_title": "Using HTML comments is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing HTML-style comments in a page that will be generated or interpolated server-side before being served to the user increases the risk of\nexposing data that should be kept private. For instance, a developer comment or line of debugging information that's left in a page could easily (and\nhas) inadvertently expose:\n\n  -  Version numbers and host names \n  -  Full, server-side path names \n  -  Sensitive user data \n\nEvery other language has its own native comment format, thus there is no justification for using HTML-style comments in anything other than a pure\nHTML or XML file.\n\n## Ask Yourself Whether\n\n  -  The comment contains sensitive information. \n  -  The comment can be removed. \n\n## Recommended Secure Coding Practices\n\nIt is recommended to remove the comment or change its style so that it is not output to the client.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-615](http://cwe.mitre.org/data/definitions/615.html) - Information Exposure Through Comments \n",
        "disable": false
      },
      {
        "real_name": "Web:S5254",
        "display_name": "WebS5254",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"<html>\" element should have a language attribute",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `&lt;html&gt;`&nbsp;element should provide the `lang` and/or `xml:lang` attribute in order to identify the\ndefault language of a document.\n\nIt enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and\naccent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.\n\nOther benefits of marking the language include:\n\n  -  assisting user agents in providing dictionary definitions or helping users benefit from translation tools. \n  <li> improving [search engine ranking](https://blogs.bing.com/webmaster/2011/03/01/how-to-tell-bing-your-websites-country-and-language/).\n  </li>\n\nBoth the `lang` and the `xml:lang` attributes can take only one value.\n\n&nbsp;\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [WCAG2, H57](https://www.w3.org/TR/WCAG20-TECHS/html.html#H57) - Using language attributes on the html element \n  -  [WCAG2, 3.1.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id) - Language of Page \n",
        "disable": false
      },
      {
        "real_name": "Web:ServerSideImageMapsCheck",
        "display_name": "WebServersideimagemapscheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Server-side image maps (\"ismap\" attribute) should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `ismap` attribute in an `img` tag creates a server-side image map: The browser sends the coordinates of the clicked point\nto the server.\n\nFor any person who cannot use a mouse, this form of navigation is inaccessible because it is the position of the cursor on the image that\ndetermines the action.\n\nOn the other hand, client-side image maps, which use the `usemap` attribute allow for each clickable area to specify an alternate text,\nenabling accessibility for the blind.\n\nFurther, in terms of separation of concerns, it is definitely better to leave the task of mapping pixels to links to the client.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:DoctypePresenceCheck",
        "display_name": "WebDoctypepresencecheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"<!DOCTYPE>\" declarations should appear before \"<html>\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `&lt;!DOCTYPE&gt;` declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret\nthe various elements.\n\nValidators also rely on it to know which rules to enforce.\n\nIt should always preceed the `&lt;html&gt;` tag.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:IllegalElementCheck",
        "display_name": "WebIllegalelementcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of disallowed elements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that the specified HTML elements are not present.\n\n## Noncompliant Code Example\n\nFor a disallowed list of \"font,center\":\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S4084",
        "display_name": "WebS4084",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Videos should have subtitles",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn order to make your site usable by as many people as possible, subtitles should be provided for videos.\n\nThis rule raises an issue when a `video` does not include at least one `&lt;track/&gt;` tag with the `kind`\nattribute set to `captions`, or `descriptions` or at the very least `subtitles`.\n\nNote that the `subtitles` kind is not meant for accessibility but for translation. The kind `captions` targets people with\nhearing impairment, whereas `descriptions` targets people with vision impairment.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:DoubleQuotesCheck",
        "display_name": "WebDoublequotescheck",
        "severity": "info",
        "category": "convention",
        "rule_title": "Attributes should be quoted using double quotes rather than single ones",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nChecker to find use of single quote where double quote is preferred.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:UnsupportedTagsInHtml5Check",
        "display_name": "WebUnsupportedtagsinhtml5check",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Elements deprecated in HTML5 should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWith the advent of HTML5, many old elements were deprecated. To ensure the best user experience, deprecated elements should not be used. This rule\nchecks for the following deprecated elements:\n      |Element      |Remediation Action    \n      |`basefont`, `big`, `blink`, `center`, `font`, `marquee`,      `multicol`, `nobr`, `spacer`, `tt`      |use CSS    \n      |`acronym`      |use `abbr`    \n      |`applet`      |use `embed` or `object`    \n      |`bgsound`      |use `audio`    \n      |`frame`, `frameset`, `noframes`      |restructure the page to remove frames    \n      |`isindex`      |use form controls    \n      |`dir`      |use `ul`    \n      |`hgroup`      |use `header` or `div`    \n      |`listing`      |use `pre` and `code`    \n      |`nextid`      |use GUIDS    \n      |`noembed`      |use `object` instead of `embed` when fallback is necessary    \n      |`plaintext`      |use the \"text/plain\" MIME type    \n      |`strike`      |use `del` or `s`    \n      |`xmp`      |use `pre` or `code`, and escape \"&lt;\" and \"&amp;\" characters    \n\n## See\n\n  -  W3C, [Obsolete Features](https://www.w3.org/TR/html5-diff) \n  -  WHATWG, [Obsolete Features](https://html.spec.whatwg.org/multipage/obsolete.html) \n",
        "disable": false
      },
      {
        "real_name": "Web:WhiteSpaceAroundCheck",
        "display_name": "WebWhitespacearoundcheck",
        "severity": "info",
        "category": "convention",
        "rule_title": "White space should be used in JSP/JSF tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe proper use of white space makes a major contribution to code readability. \n\nThis rule raises an issue when there is not a space character after the beginning and before the end of each comment (<code>&lt;!-- ...\n--&gt;</code>), directive (`&lt;%@ ... %&gt;`), and expression (`&lt;% ... %&gt;`).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S5148",
        "display_name": "WebS5148",
        "severity": "info",
        "category": "security",
        "rule_title": "Links with \"target=_blank\" are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a link opens a URL in a new tab with `target=\"_blank\"`, it is very simple for the opened page to change the `location`\nof the original page because the JavaScript variable `window.opener` is not `null` and thus `window.opener.location`\ncan be set by the opened page. This exposes the user to very simple phishing attacks.\n\nImagine a link posted on a comment of a popular web site (say: \"http://example.com/dangerous\") that opens a new tab that changes the URL of the\noriginal page to \"http://example.com/dangerous\". On \"http://example.com/dangerous\" you land at a fake login page similar to the one at\n\"http://example.com/dangerous\" but controlled by the hacker and asking the user to log in again, pretending that the session just timed-out.\n\nTo prevent pages from abusing `window.opener`, use `rel=noopener` on `&lt;a href=&gt;` to force its value to be\n`null` on the opened pages.\n\nIn Chrome 88+, Firefox 79+ or Safari 12.1+ `target=_blank` on anchors implies `rel=noopener` which make the protection\nenabled by default.\n\n## Ask Yourself Whether\n\n  -  The application opens untrusted external URL in a new tab using `target=_blank` \n  -  The application supports web browsers before Chrome 88, Firefox 79 or Safari 12.1 \n\nThere is a risk if you answered yes to all of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `rel=noopener` on `&lt;a href=&gt;` prevent untrusted pages from abusing `window.opener`. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo Issue will be raised when `href` contains a hardcoded relative url as there it has less chances of being vulnerable. An url is\nconsidered hardcoded and relative if it doesn't start with `http://` or `https://`, and if it does not contain any of the\ncharacters {}$()[]\n\n## See\n\n  -  [Reverse Tabnabbing](https://owasp.org/www-community/attacks/Reverse_Tabnabbing) \n  -  [https://mathiasbynens.github.io/rel-noopener/](https://mathiasbynens.github.io/rel-noopener/) \n",
        "disable": false
      },
      {
        "real_name": "Web:TableWithoutCaptionCheck",
        "display_name": "WebTablewithoutcaptioncheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"<table>\" tags should have a description",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn order to be accessible to visually impaired users, it is important that tables provides a description of its content before the data is\naccessed.\n\nThe simplest way to do it, and also the one [recommended by WCAG2](https://www.w3.org/TR/WCAG20-TECHS/H39) is to add a\n`&lt;caption&gt;` element inside the `&lt;table&gt;`.\n\nOther technics this rule accepts are:\n\n  <li> adding a concise description via [`aria-label`](https://www.w3.org/TR/wai-aria/#aria-label) or <a\n  href=\"https://www.w3.org/TR/wai-aria/#aria-labelledby\">`aria-labelledby`</a> attributes in the `&lt;table&gt;`. </li>\n  <li> referencing a description element with an [`aria-describedby`](https://www.w3.org/TR/wai-aria/#aria-describedby)\n  attribute in the `&lt;table&gt;`. </li>\n  -  embedding the `&lt;table&gt;` inside a `&lt;figure&gt;` which also contains a `&lt;figcaption&gt;`. \n  <li> adding a `summary` attribute to the `&lt;table&gt;` tag. However note that this attribute has been deprecated in HTML5.\n  </li>\n\nSee&nbsp;[W3C WAI&nbsp;Web Accessibility Tutorials](https://www.w3.org/WAI/tutorials/tables/tips/)&nbsp;for more information.\n\nThis rule raises an issue when a `&lt;table&gt;` has neither of the previously mentioned description mechanisms.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nAdding a `&lt;caption&gt;` element.\n\nAdding an `aria-describedby` attribute.\n\nEmbedding the table in a `&lt;figure&gt;` which also contains a `&lt;figcaption&gt;`.\n\nAdding a `summary` attribute.&nbsp;However note that this attribute has been deprecated in HTML5.\n\n## Exceptions\n\nNo issue will be raised on `&lt;table&gt;` used for layout purpose, i.e. when it contains a `role` attribute set to\n`\"presentation\"` or `\"none\"`. Note that using `&lt;table&gt;` for layout purpose is a bad practice.\n\nNo issue will be raised either on `&lt;table&gt;` containing an `aria-hidden` attribute set to `\"true\"`.\n\n## See\n\n  <li> [WCAG2, 1.3.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic)&nbsp;-&nbsp;Info\n  and Relationships </li>\n  <li> [WCAG2,&nbsp;H39](https://www.w3.org/TR/WCAG20-TECHS/H39) - Using caption elements to associate data table captions with data tables\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "Web:FileLengthCheck",
        "display_name": "WebFilelengthcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "Web:S1827",
        "display_name": "WebS1827",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Attributes deprecated  in HTML5 should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWith the advent of HTML5, many old attributes were deprecated. To ensure the best user experience, deprecated attributes should not be used. This\nrule checks for the following deprecated attributes, where CSS should be used instead.\n\n### Attributes\n      |Attribute      |Removed from    \n      |`accept`      |`form`    \n      |`align`      |`caption`, `col`, `div`, `embed`, `h1-h6`, `hr`, `iframe`,      `img`, `input`, `legend`, `object`, `p`, `table`, `tbody`,      `thead`, `tfoot`, `td`, `th`, `tr`    \n      |`alink`      |`body`    \n      |`allowtransparency`      |`iframe`    \n      |`archive`      |`object`    \n      |`axis`      |`td`, `th`    \n      |`background`      |`body`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `td`,      `th`    \n      |`bgcolor`      |`body`, `table`, `td`, `th`, `tr`    \n      |`border`      |`img` (`border=\"0\"` allowed), `object`    \n      |`bordercolor`      |`table`    \n      |`cellpadding`      |`table`    \n      |`cellspacing`      |`table`    \n      |`char`      |`col`, `tbody`, `thead`, `tfoot`, `td`, `th`, `tr`    \n      |`charoff`      |`col`, `tbody`, `thead`, `tfoot`, `td`, `th`, `tr`    \n      |`charset`      |`a`, `link`    \n      |`classid`      |`object`    \n      |`clear`      |`br`    \n      |`code`      |`object`    \n      |`codebase`      |`object`    \n      |`codetype`      |`object`    \n      |`color`      |`hr`    \n      |`compact`      |`dl`, `ol`, `ul`    \n      |`coords`      |`a`    \n      |`datafld`      |`a`, `applet`, `button`, `div`, `fieldset`, `frame`, `iframe`,      `img`, `input`, `label`, `legend`, `marquee`, `object`, `param`,      `select`, `span`, `textarea`    \n      |`dataformatas`      |`button`, `div`, `input`, `label`, `legend`, `marquee`,      `object`, `option`, `select`, `span`, `table`    \n      |`datapagesize`      |`table`    \n      |`datasrc`      |`a`, `applet`, `button`, `div`, `frame`, `iframe`, `img`,      `input`, `label`, `legend`, `marquee`, `object`, `option`,      `select`, `span`, `table`, `textarea`    \n      |`declare`      |`object`    \n      |`event`      |`script`    \n      |`for`      |`script`    \n      |`frame`      |`table`    \n      |`frameborder`      |`iframe`    \n      |`height`      |`td`, `th`    \n      |`hspace`      |`embed`, `iframe`, `img`, `input`, `object`    \n      |`ismap`      |`input`    \n      |`langauge`      |`script` (`language=\"javascript\"`, case insensitive, allowed)    \n      |`link`      |`body`    \n      |`lowsrc`      |`img`    \n      |`marginbottom`      |`body`    \n      |`marginheight`      |`body`, `iframe`    \n      |`marginleft`      |`body`    \n      |`marginright`      |`body`    \n      |`margintop`      |`body`    \n      |`marginwidth`      |`body`, `iframe`    \n      |`methods`      |`a`, `link`    \n      |`name`      |`a` (`name=\"[a's element id]\"` allowed), `embed`, `img`, `option`    \n      |`nohref`      |`area`    \n      |`noshade`      |`hr`    \n      |`nowrap`      |`td`, `th`    \n      |`profile`      |`head`    \n      |`rules`      |`table`    \n      |`scheme`      |`meta`    \n      |`scope`      |`td`    \n      |`scrolling`      |`iframe`    \n      |`shape`      |`a`    \n      |`size`      |`hr`    \n      |`standby`      |`object`    \n      |`summary`      |`table`    \n      |`target`      |`link`    \n      |`text`      |`body`    \n      |`type`      |`li`, `param`, `ul`    \n      |`urn`      |`a`, `link`    \n      |`usemap`      |`input`    \n      |`valign`      |`col`, `tbody`, `thead`, `tfoot`, `td`, `th`, `tr`    \n      |`valuetype`      |`param`    \n      |`version`      |`html`    \n      |`vlink`      |`body`    \n      |`vspace`      |`embed`, `iframe`, `img`, `input`, `object`    \n      |`width`      |`col`, `hr`, `pre`, `table`, `td`, `th`    \n\n## See\n\n  -  W3C, [Differences in HTML5](https://www.w3.org/TR/html5-diff) \n  -  WHATWG, [Obsolete Features](https://html.spec.whatwg.org/multipage/obsolete.html) \n",
        "disable": false
      },
      {
        "real_name": "Web:BoldAndItalicTagsCheck",
        "display_name": "WebBoldanditalictagscheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"<strong>\" and \"<em>\" tags should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `&lt;strong&gt;`/`&lt;b&gt;` and `&lt;em&gt;`/`&lt;i&gt;` tags have exactly the same effect in most\nweb browsers, but there is a fundamental difference between them: `&lt;strong&gt;` and `&lt;em&gt;` have a semantic meaning\nwhereas `&lt;b&gt;` and `&lt;i&gt;` only convey styling information like CSS. \n\nWhile `&lt;b&gt;` can have simply no effect on a some devices with limited display or when a screen reader software is used by a blind\nperson, `&lt;strong&gt;` will:\n\n  -  Display the text bold in normal browsers \n  -  Speak with lower tone when using a screen reader such as Jaws \n\nConsequently:\n\n  -  in order to convey semantics, the `&lt;b&gt;` and `&lt;i&gt;` tags shall never be used, \n  <li> in order to convey styling information, the `&lt;b&gt;` and `&lt;i&gt;` should be avoided and CSS should be used instead.\n  </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in case of <a href=\"https://www.w3.org/WAI/GL/wiki/Using_aria-hidden%3Dtrue_on_an_icon_font_that_AT_should_ignore\">icon\nfonts</a> usage.\n",
        "disable": false
      },
      {
        "real_name": "Web:IllegalTagLibsCheck",
        "display_name": "WebIllegaltaglibscheck",
        "severity": "error",
        "category": "convention",
        "rule_title": "Disallowed \"taglibs\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that the disallowed tag libraries are not used.\n\n## Noncompliant Code Example\n\nUsing the default parameter for this rule, \"http://java.sun.com/jstl/sql\":\n",
        "disable": false
      },
      {
        "real_name": "Web:AvoidCommentedOutCodeCheck",
        "display_name": "WebAvoidcommentedoutcodecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "Web:DynamicJspIncludeCheck",
        "display_name": "WebDynamicjspincludecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Dynamic includes should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nContent that doesn't change or that doesn't change often should be included using a mechanism which won't try to interpret it. Specifically,\n`&lt;%@ include file=\"...\" %&gt;`, which includes the file in the JSP servlet translation phase (i.e. it happens once), should be used\ninstead of `&lt;jsp:include page=\"...\" /&gt;`, which includes the page on the file, when the content is being served to the user.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:MetaRefreshCheck",
        "display_name": "WebMetarefreshcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Meta tags should not be used to refresh or redirect",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse of `&lt;meta http-equiv=\"refresh\"&gt;` is discouraged by the World Wide Web Consortium (W3C).\n\nIf a user clicks the 'Back' button, some browers will go back to the redirecting page, which will prevent the user from actually going back.\n\nTo refresh the page, a better alternative is to use Ajax, to refresh only what needs to be refreshed and not the whole page.\n\nTo redirect to another page, using the HTTP response status code 301 'Moved Permanently' and 302 'Found' is a better option.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S5260",
        "display_name": "WebS5260",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Table cells should reference their headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a `&lt;td&gt;` cell has a `headers` attribute, it should reference only IDs of headers in the same column and row.\n\nNote that it is usually better to use `scope` attributes of `&lt;th&gt;` headers instead of `headers` attribute.\n`headers` attribute requires you to list every corresponding `&lt;th&gt;` header's `id`, which is error-prone and\nmakes the code less maintainable. See&nbsp;<a href=\"https://www.w3.org/WAI/tutorials/tables/tips/\">W3C WAI&nbsp;Web Accessibility\nTutorials</a>&nbsp;for more information.\n\nIf your table is too complex, it might be better to split it into multiple small tables as it improves both readability and maintainability.\n\nThis rule raises an issue when the `headers` attribute of a `&lt;td&gt;` cell contains IDs which don't belong to a header in\nthe same row or column.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nNo issue will be raised if the `headers` attribute contains the following characters: {}()[]$. This avoids false positives on variables\ncoming from Javascript frameworks such as Angular.\n\n## See\n\n  <li> [WCAG2, 1.3.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic)&nbsp;-&nbsp;Info\n  and Relationships </li>\n  <li> [WCAG2, H43](https://www.w3.org/TR/WCAG20-TECHS/html.html#H43) - Using id and headers attributes to associate data cells with header\n  cells in data tables </li>\n",
        "disable": false
      },
      {
        "real_name": "Web:S5264",
        "display_name": "WebS5264",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"<object>\" tags should provide an alternative content",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssistive technologies, such as screen readers, will not be able to render `&lt;object&gt;` elements, in such cases it is the content of\nthe `&lt;object&gt;` which is provided to the user. This alternative content needs to be accessible or the screen readers won't be able to\nuse it. For example, if an `&lt;img&gt;` is used it must contain an `alt` attribute (see corresponding rule\nWeb:ImgWithoutAltCheck).\n\nThis rule raises an issue when an `&lt;object&gt;` tag does not have any alternative content.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [WCAG2, H53](https://www.w3.org/TR/WCAG20-TECHS/H53.html) - Using the body of the object element \n  -  [WCAG2, 1.1.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all) - Non-text Content \n  <li> [WCAG2, 1.2.3](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-media-equiv-audio-desc) - Audio Description or Media\n  Alternative (Prerecorded) </li>\n  -  [WCAG2, 1.2.8](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-media-equiv-text-doc) - Media Alternative (Prerecorded) \n",
        "disable": false
      },
      {
        "real_name": "Web:MouseEventWithoutKeyboardEquivalentCheck",
        "display_name": "WebMouseeventwithoutkeyboardequivalentcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Mouse events should have corresponding keyboard events",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOffering the same experience with the mouse and the keyboard allow users to pick their preferred devices.\n\nAdditionally, users of assistive technology will also be able to browse the site even if they cannot use the mouse.\n\nThis rule raises an issue when:\n\n  -  an HTML element with an `onMouseover` attribute doesn't also have an&nbsp;`onFocus&nbsp;attribute.` \n  -  an HTML element with an `onMouseout` attribute doesn't also have an&nbsp;`onBlur&nbsp;attribute.` \n  <li> an HTML element with an `onClick` attribute doesn't also have one of the following attributes: `onKeyDown`,\n  `onKeyUp`, `onKeyPress`. </li>\n\nNote that in the case of&nbsp;`onClick`, the equivalent keyboard handler should support both the \"Enter\" and \"Space\" keys as these are\nusually used by screen-readers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nNote that setting the `tabindex` attribute is necessary to make the `&lt;div&gt;` element focusable.\n\n## Exceptions\n\nFor the following elements, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/SCR35.html\">pressing a key will trigger the `onClick`\nattribute</a>: `&lt;input type=\"button\"&gt;`, `&lt;input type=\"submit\"&gt;`, `&lt;button&gt;`,\n`&lt;a&gt;`. Thus no issue will be raised when an `onClick` attribute is found in these elements without a\n`onKeyDown/onKeyUp/onKeyPress`.\n\nAn issue will still be raised for <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role\">elements with the\n`role=\"button\"` attribute</a> as they don't behave the same way.\n\n## See\n\n  -  [SCR2: Using redundant keyboard and mouse event handlers](https://www.w3.org/TR/WCAG20-TECHS/SCR2.html) \n",
        "disable": false
      },
      {
        "real_name": "Web:HeaderCheck",
        "display_name": "WebHeadercheck",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:LinkToNothingCheck",
        "display_name": "WebLinktonothingcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Links should not target \"#\" or \"javascript:void(0)\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are two ways to build a link that has the sole purpose of running JavaScript code. The goal of this rule is to ban such patterns in order to\nsupport browsing with JavaScript disabled.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S1436",
        "display_name": "WebS1436",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track lack of required an element with the required \"id\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows you to make sure that each HTML page contains an element with your configured ID, regardless of element type. This rule is useful,\nfor instance, if your design requires a placeholder to be present in each page, for example to dynamically insert a footer.\n\n## Compliant Solution\n\nWith a required id of \"#footer\":\n",
        "disable": false
      },
      {
        "real_name": "Web:NonConsecutiveHeadingCheck",
        "display_name": "WebNonconsecutiveheadingcheck",
        "severity": "info",
        "category": "convention",
        "rule_title": "Heading tags should be used consecutively from \"H1\" to \"H6\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHeading tags are used by search engines and screen reader softwares to construct an outline of the page.\n\nStarting at `&lt;h1&gt;` and not skipping any level eases this automatic construction.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:TableHeaderHasIdOrScopeCheck",
        "display_name": "WebTableheaderhasidorscopecheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"<th>\" tags should have \"id\" or \"scope\" attributes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssociating `&lt;table&gt;` headers, i.e. `&lt;th&gt;` elements, with their `&lt;td&gt;` cells enables screen\nreaders to announce the header prior to the data. This considerably increases the accessibility of tables to visually impaired users.\n\nThere are two ways of doing it:\n\n  -  Adding a `scope` attribute to `&lt;th&gt;` headers. \n  <li> Adding an `id` attribute to `&lt;th&gt;` headers and a `headers` attribute to every `&lt;td&gt;`\n  element. </li>\n\nIt is recommended to add `scope` attributes to `&lt;th&gt;` headers whenever possible. Use `&lt;th id=\"...\"&gt;`\nand `&lt;td headers=\"...\"&gt;` only when `&lt;th scope=\"...\"&gt;` is not capable of associating cells to their headers. This\nhappens for very complex tables which have headers splitting the data in multiple subtables. See&nbsp;<a\nhref=\"https://www.w3.org/WAI/tutorials/tables/tips/\">W3C WAI&nbsp;Web Accessibility Tutorials</a>&nbsp;for more information.\n\nNote that complex tables can often be split into multiple smaller tables, which improves the user experience.\n\nThis rule raises an issue when a `&lt;th&gt;` element has neither `id` nor `scope` attributes set.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor:\n\n## See\n\n  <li> [WCAG2, 1.3.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic)&nbsp;-&nbsp;Info\n  and Relationships </li>\n  <li> [WCAG2, H43](https://www.w3.org/TR/WCAG20-TECHS/html.html#H43) - Using id and headers attributes to associate data cells with header\n  cells in data tables </li>\n",
        "disable": false
      },
      {
        "real_name": "Web:ImgWithoutAltCheck",
        "display_name": "WebImgwithoutaltcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Image, area and button with image tags should have an \"alt\" attribute",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `alt` attribute provides a textual alternative to an image.\n\nIt is used whenever the actual image cannot be rendered.\n\nCommon reasons for that include:\n\n  -  The image can no longer be found \n  -  Visually impaired users using a screen reader software \n  -  Images loading is disabled, to reduce data consumption on mobile phones \n\nIt is also very important to not set an `alt` attribute to a non-informative value. For example `&lt;img ... alt=\"logo\"&gt;`\nis useless as it doesn't give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image\ninstead of an `&lt;img&gt;` tag. If using CSS background-image is not possible, an empty `alt=\"\"` is tolerated. See Exceptions\nbellow.\n\nThis rule raises an issue when\n\n  <li> an `&lt;input type=\"image\"&gt;` tag or an `&lt;area&gt;` tag have no `alt` attribute or their\n  `alt`&nbsp;attribute has an empty string value. </li>\n  -  an `&lt;img&gt;` tag has no `alt` attribute. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`&lt;img&gt;` tags with empty string&nbsp;`alt=\"\"` attributes won't raise any issue. However this technic should be used in\ntwo cases only:\n\nWhen the image is decorative and it is not possible to use a CSS background image. For example, when the decorative `&lt;img&gt;` is\ngenerated via javascript with a source image coming from a database, it is better to use an `&lt;img alt=\"\"&gt;` tag rather than generate\nCSS code.\n\nWhen the image is not decorative but it's `alt` text would repeat a nearby text. For example, images contained in links should not\nduplicate the link's text in their `alt` attribute, as it would make the screen reader repeat the text twice.\n\nIn all other cases you should use CSS background images.\n\nSee&nbsp;[W3C WAI&nbsp;Web Accessibility Tutorials](https://www.w3.org/WAI/tutorials/images/decision-tree/)&nbsp;for more\ninformation.\n\n## See\n\n  -  [WCAG2, H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html) - Providing text alternatives for the area elements of image maps \n  -  [WCAG2, H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html) - Using alt attributes on images used as submit buttons \n  -  [WCAG2, H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html) - Using alt attributes on img elements \n  <li> [WCAG2, H67](https://www.w3.org/TR/WCAG20-TECHS/H67.html) - Using null alt text and no title attribute on img elements for images\n  that AT should ignore </li>\n  -  [WCAG2, H2](https://www.w3.org/TR/WCAG20-TECHS/H2.html) - Combining adjacent image and text links for the same resource \n  -  [WCAG2, 1.1.1](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all) - Non-text Content \n  -  [WCAG2, 2.4.4](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-refs) - Link Purpose (In Context) \n  -  [WCAG2, 2.4.9](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-link) - Link Purpose (Link Only) \n",
        "disable": false
      },
      {
        "real_name": "Web:InlineStyleCheck",
        "display_name": "WebInlinestylecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The \"style\" attribute should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe goal of this rule is to ban the usage of HTML \"style\" property to make sure that all CSS styles are defined in CSS classes. Consolidating all\nstyling into classes makes it easier to read, understand and maintain.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S1829",
        "display_name": "WebS1829",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Web pages should not contain absolute URIs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is considered best-practice to use relative URLs in web pages to prevent having to update the addresses if the web address in use changes.\nMoreover, if some absolute URLs are missed in such a process, it will obviously impact the user experience. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:MultiplePageDirectivesCheck",
        "display_name": "WebMultiplepagedirectivescheck",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiple \"page\" directives should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile you can use as many `page` directives as you like, it is more readable to set multiple page attributes in a single directive.\n\nThe exception to this rule is when multiple packages are being imported. In that case, imports may be done in separate directives and all other\nattributes should be set in a single, additional directive.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:LinksIdenticalTextsDifferentTargetsCheck",
        "display_name": "WebLinksidenticaltextsdifferenttargetscheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Links with identical texts should have identical targets",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen links with different targets are given identical link text, this can produce confusion for users of assistive technologies, some of which\nprovide users the ability to view a list of all links on the page.\n\nWhen this list of links is presented to the user they may be left not knowing the links go to different destinations.\n\nEven if they do realize the links go to different destinations, they may be left not knowing which link to follow to go to the destination they\ndesire.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:LongJavaScriptCheck",
        "display_name": "WebLongjavascriptcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Javascript scriptlets should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLong pieces of JavaScript should be located in dedicated *.js source files. This makes maintenance of both the script and the pages that use it\neasier. Additionally, it offers some efficiencies in serving the files, since it takes better advantage of browser caching to only re-serve the parts\nof a web page that have actually changed.\n\n## Noncompliant Code Example\n\nWith the default parameter value of 5:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:FlashUsesBothObjectAndEmbedCheck",
        "display_name": "WebFlashusesbothobjectandembedcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Flash animations should be embedded using both \"<object>\" and \"<embed>\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `&lt;object&gt;` tag is used by Internet Explorer 3.0 or later on Windows platforms or any browser that supports the use of the\nFlash ActiveX control. The `&lt;embed&gt;` tag is used by Netscape Navigator 2.0 or later, or browsers that support the use of the\nNetscape-compatible plug-in version of Flash Player.\n\nWhen an ActiveX-enabled browser loads the HTML page, it reads the values set on the `&lt;object&gt;` and ignores the\n`&lt;embed&gt;` tag. When browsers using the Flash plug-in load the HTML page, they read the values set on the `&lt;embed&gt;`\ntag and ignore the `&lt;object&gt;` tag.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:InputWithoutLabelCheck",
        "display_name": "WebInputwithoutlabelcheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"input\", \"select\" and \"textarea\" tags should be labeled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `&lt;label&gt;` tag defines a label for `&lt;input&gt;`, `&lt;select&gt;` and `&lt;textarea&gt;`\nelements.\n\nThe `&lt;label&gt;` tag improves usability for visually impaired users: Screen readers will announce the label text whenever the focus\nis set on the input field.\n\nIt also improves usability for users with impaired motor control: when the text within the `&lt;label&gt;` element is clicked, the\nassociated input field is toggled.\n\nIn most cases, `for` attribute of the `&lt;label&gt;` tag should be equal to the `id` attribute of the related\nelement to bind them together.\n\nSometimes the field is explained by an icon. In this case the label can be either hidden or the `&lt;input&gt;`,\n`&lt;select&gt;` or `&lt;textarea&gt;` tags should contain one of the following attributes: `aria-label`,\n`aria-labelledby`. Screen-readers will use those attributes to describe the field.\n\nThe purpose of this rule is to make sure that every `input` (except `submit`, `button`, `image`, and\n`hidden` inputs), `select`, and `textarea` field has a label.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised on \"implicit labels\", i.e. `&lt;label&gt;` tags enclosing an `&lt;input&gt;`,\n`&lt;select&gt;` or `&lt;textarea&gt;` instead of being referencing via an&nbsp;`id`. However, note that the support\nof this technic is not supported by all assistive technologies. Thus it is better to reference them by id.\n\n## See\n\n  -  [WCAG2, H97](https://www.w3.org/TR/WCAG20-TECHS/H44.html) - Using label elements to associate text labels with form controls \n  -  [W3C Web Accessibility Tutorials](https://www.w3.org/WAI/tutorials/forms/labels/) - Labeling Controls \n",
        "disable": false
      },
      {
        "real_name": "Web:IllegalTabCheck",
        "display_name": "WebIllegaltabcheck",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "Web:ImgWithoutWidthOrHeightCheck",
        "display_name": "WebImgwithoutwidthorheightcheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Image tags should have \"width\" and \"height\" attributes",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf the `width` and `height` attributes are set, the space required for the image is reserved immediately by the browser, even\nbefore it actually starts to load the image.\n\nWithout those attributes, the page layout constantly changes as images are loaded until they are all loaded, which can disorient users.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:JspScriptletCheck",
        "display_name": "WebJspscriptletcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "JSP expressions should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJSP expressions (using `&lt;%= ... %&gt;`) have been deprecated because they:\n\n  -  Are not unit testable. \n  -  Are not reusable. \n  -  Cannot make use of object oriented concepts such as inheritence. \n  -  Have poor error handling capabilities: if an exception is thrown, an empty page is rended. \n  -  Mix the business and presentation logic. \n\nJSP Standard Tag Library (JSTL) and Expression Language should be used instead, enabiling the adoption of the model-view-controller (MVC) design\npattern which reduces the coupling between the presentation tier and the business logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:S5725",
        "display_name": "WebS5725",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling resource integrity features is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFetching external resources, for example from a CDN, without verifying their integrity could impact the security of an application if the CDN gets\ncompromised and resources are replaced by malicious ones. Resources integrity feature will block resources inclusion into an application if the\npre-computed digest of the expected resource doesn't match with the digest of the retrieved resource.\n\n## Ask Yourself Whether\n\n  -  The resources are fetched from external CDNs. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\n  <li> implement resources integrity checks for all static resources (where \"static\" means that the resource's content doesn't change dynamically\n  based on the browser) </li>\n  -  use versioned resources instead of using \"latest\" version of the resources \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CWE-353](https://cwe.mitre.org/data/definitions/353.html) - Missing Support for Integrity Check \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\">OWASP Top 10 2017 Category\n  A6</a> - Security Misconfiguration </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) - Subresource Integrity \n",
        "disable": false
      },
      {
        "real_name": "Web:WmodeIsWindowCheck",
        "display_name": "WebWmodeiswindowcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Flash animations should be embedded using the window mode",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBrowsers best support the `window` mode for the `wmode` parameter, also in terms of accessibility.\n\nAs it is the default mode, it is acceptable to either not specify a `wmode` parameter altogether, or to set it explicitly to\n`window`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "Web:LinkToImageCheck",
        "display_name": "WebLinktoimagecheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Links should not directly target images",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhenever a user clicks on a link that targets an image, the website's navigation menu will be lost.\n\nFrom a user point of view, it is as if she left the website.\n\nThe only way to return to it is using the browser's 'Back' button.\n\nInstead, it is better to create a page which will display the image using the `&lt;img&gt;` tag and preserve the navigation menu.\n\nFurther, in terms of accessibility, when the image is embedded into a page, content providers are able to provide an alternate text equivalent\nthrough the `alt` attribute.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:ItemTagNotWithinContainerTagCheck",
        "display_name": "WebItemtagnotwithincontainertagcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"<li>\" and \"<dt>\" item tags should be in \"<ul>\", \"<ol>\" or \"<dl>\" container tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing a `&lt;li&gt;` or `&lt;dt&gt;` item tag outside of a `&lt;ul&gt;`, `&lt;ol&gt;` or\n`&lt;dl&gt;` one does not make sense and indicates a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:PageWithoutFaviconCheck",
        "display_name": "WebPagewithoutfaviconcheck",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Favicons should be used in all pages",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFavicons are shown for example in the browser's address bar, bookmark list, or tabs.\n\nThey enable users to quickly identify and recognize websites.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:FieldsetWithoutLegendCheck",
        "display_name": "WebFieldsetwithoutlegendcheck",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"<fieldset>\" tags should contain a \"<legend>\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor users of assistive technology such as screen readers, it may be challenging to know what is expected in each form's input. The input's label\nalone might not be sufficient: 'street' could be part of a billing or a shipping address for instance.\n\nFieldset legends are read out loud by screen readers before the label each time the focus is set on an input. For example, a legend 'Billing\naddress' with a label 'Street' will read 'Billing address street'. Legends should be short, and 'Your' should not be repeated in both the legend and\nthe label, as it would result in 'Your address Your City' being read.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:InternationalizationCheck",
        "display_name": "WebInternationalizationcheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Labels should be defined in the resource bundle",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWeb applications can be made available in multiple languages through the use of internationalization. This allows the server to plug in the correct\nversion of a piece of text based on the language chosen, but it requires that internationalization messages be used instead of hard-coded text.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "Web:UnifiedExpressionCheck",
        "display_name": "WebUnifiedexpressioncheck",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "JSF expressions should be syntactically valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule allows to make sure that all JSF Expressions are syntactically correct.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3798",
        "display_name": "JavascriptS3798",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables and functions should not be declared in the global scope",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny variable or function declared in the global scope implicitly becomes attached to the global object (the `window` object in a browser\nenvironment). To make it explicit this variable or function should be a property of `window`. When it is meant to be used just locally, it\nshould be declared with the `const` or `let` keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).\n\nThis rule should not be activated when modules are used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\nor \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2589",
        "display_name": "JavascriptS2589",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Boolean expressions should not be gratuitous",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-571](http://cwe.mitre.org/data/definitions/571) - Expression is Always True \n  -  [MITRE, CWE-570](http://cwe.mitre.org/data/definitions/570) - Expression is Always False \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5732",
        "display_name": "JavascriptS5732",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling content security policy frame-ancestors directive is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Clickjacking](https://en.wikipedia.org/wiki/Clickjacking) attacks occur when an attacker try to trick an user to click on certain\nbuttons/links of a legit website. This attack can take place with malicious HTML frames well hidden in an attacker website. \n\nFor instance, suppose a safe and authentic page of a social network (https://socialnetworkexample.com/makemyprofilpublic) which allows an user to\nchange the visibility of his profile by clicking on a button. This is a critical feature with high privacy concerns. Users are generally well informed\non the social network of the consequences of this action. An attacker can trick users, without their consent, to do this action with the below\nembedded code added on a malicious website:\n\nPlaying with the size of the iframe it's sometimes possible to display only the critical parts of a page, in this case the button of the\n**makemyprofilpublic** page.\n\n## Ask Yourself Whether\n\n  <li> [Critical actions](https://en.wikipedia.org/wiki/Clickjacking#Clickjacking_categories) of the application are prone to clickjacking\n  attacks because a simple click on a link or a button can trigger them. </li>\n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy **frame-ancestors** directive which is supported by all modern browsers and will specify the origins of\nframe allowed to be loaded by the browser (this directive deprecates <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\">X-Frame-Options</a>).\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet-csp](https://www.npmjs.com/package/helmet-csp) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is used without the `frameAncestors` directive (or if\n`frameAncestors` is set to `'none'`):\n\n## Compliant Solution\n\nIn Express.js application a standard way to implement CSP frame-ancestors directive is the <a\nhref=\"https://www.npmjs.com/package/helmet-csp\">helmet-csp</a> or [helmet](https://www.npmjs.com/package/helmet) middleware:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [OWASP Cheat Sheets](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html) - Clickjacking Defense\n  Cheat Sheet </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) -\n  Frame-ancestors </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n  <li> [MITRE, CWE-451](http://cwe.mitre.org/data/definitions/451.html) - User Interface (UI) Misrepresentation of Critical Information\n  </li>\n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1135",
        "display_name": "JavascriptS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3796",
        "display_name": "JavascriptS3796",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Callbacks of array methods should have return statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.\n\nThis rule applies for the following methods of an array:\n\n  -  `Array.from` \n  -  `Array.prototype.every` \n  -  `Array.prototype.filter` \n  -  `Array.prototype.find` \n  -  `Array.prototype.findIndex` \n  -  `Array.prototype.map` \n  -  `Array.prototype.reduce` \n  -  `Array.prototype.reduceRight` \n  -  `Array.prototype.some` \n  -  `Array.prototype.sort` \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3799",
        "display_name": "JavascriptS3799",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Destructuring patterns should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDestructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.\n\nThis rule raises an issue when empty destructuring pattern is used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4524",
        "display_name": "JavascriptS4524",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"default\" clauses should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` can contain a `default` clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\n\nFor readability purpose, to help a developer to quickly find the default behavior of a `switch` statement, it is recommended to put the\n`default` clause at the end of the `switch` statement. This rule raises an issue if the `default` clause is not the\nfirst or the last one of the `switch`'s cases.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5734",
        "display_name": "JavascriptS5734",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing browsers to sniff MIME types is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[MIME confusion](https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/) attacks occur when an\nattacker successfully tricks a web-browser to interpret a resource as a different type than the one expected. To correctly interpret a resource\n(script, image, stylesheet ...) web browsers look for the <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type header</a> defined in the HTTP response received from the\nserver, but often this header is not set or is set with an incorrect value. To avoid content-type mismatch and to provide the best user experience,\nweb browsers try to deduce the right content-type, generally by inspecting the content of the resources (the first bytes). This \"guess mechanism\" is\ncalled [MIME type sniffing](https://en.wikipedia.org/wiki/Content_sniffing).\n\nAttackers can take advantage of this feature when a website (\"example.com\" here) allows to upload arbitrary files. In that case, an attacker can\nupload a malicious image **fakeimage.png** (containing malicious JavaScript code or <a\nhref=\"https://docs.microsoft.com/fr-fr/archive/blogs/ieinternals/script-polyglots\">a polyglot content</a> file) such as:\n\nWhen the victim will visit the website showing the uploaded image, the malicious script embedded into the image will be executed by web browsers\nperforming MIME type sniffing.\n\n## Ask Yourself Whether\n\n  <li> [Content-Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) header is not systematically set for all\n  resources. </li>\n  -  Content of resources can be controlled by users. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nImplement [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) header with\n**nosniff** value (the only existing value for this header) which is supported by all modern browsers and will prevent browsers from performing\nMIME type sniffing, so that in case of Content-Type header mismatch, the resource is not interpreted. For example within a &lt;script&gt; object\ncontext, JavaScript MIME types are expected (like **application/javascript**) in the Content-Type header.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if, when using [helmet](https://www.npmjs.com/package/helmet), the `noSniff`\nmiddleware is disabled:\n\n## Compliant Solution\n\nWhen using `helmet` in an Express.js application, the `noSniff` middleware should be enabled (it is also done by\ndefault):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) - X-Content-Type-Options\n  </li>\n  <li> [blog.mozilla.org](https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/) - Mitigating MIME\n  Confusion Attacks in Firefox </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1131",
        "display_name": "JavascriptS1131",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lines should not end with trailing whitespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTrailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.\n\nIf you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. \n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1134",
        "display_name": "JavascriptS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5730",
        "display_name": "JavascriptS5730",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing mixed-content is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA mixed-content is when a resource is loaded with the HTTP protocol, from a website accessed with the HTTPs protocol, thus mixed-content are not\nencrypted and exposed to [MITM attacks](https://en.wikipedia.org/wiki/Man-in-the-middle_attack) and could break the entire level of\nprotection that was desired by implementing encryption with the HTTPs protocol.\n\nThe main threat with mixed-content is not only the confidentiality of resources but the whole website integrity:\n\n  <li> A passive mixed-content (eg: **&lt;img src=\"http://example.com/picture.png\"&gt;**) allows an attacker to access and replace only these\n  resources, like images, with malicious ones that could lead to successful phishing attacks. </li>\n  <li> With active mixed-content (eg: **&lt;script src=\"http://example.com/library.js\"&gt;**) an attacker can compromise the entire website by\n  injecting malicious javascript code for example (accessing and modifying the DOM, steal cookies, etc). </li>\n\n## Ask Yourself Whether\n\n  -  The HTTPS protocol is in place and external resources are fetched from the website pages. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy **block-all-mixed-content** directive which is supported by all modern browsers and will block loading of\nmixed-contents.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet-csp](https://www.npmjs.com/package/helmet-csp) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is used without the `blockAllMixedContent` directive:\n\n## Compliant Solution\n\nIn Express.js application a standard way to block mixed-content is to put in place the <a\nhref=\"https://www.npmjs.com/package/helmet-csp\">helmet-csp</a> or [helmet](https://www.npmjs.com/package/helmet) middleware with the\n`blockAllMixedContent` directive:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) - Mixed-content \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5736",
        "display_name": "JavascriptS5736",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling strict HTTP no-referrer policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[HTTP header referer](https://en.wikipedia.org/wiki/HTTP_referer) contains a URL set by web browsers and used by applications to track\nfrom where the user came from, it's for instance a relevant value for web analytic services, but it can cause <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns\">serious privacy and security problems</a>\nif the URL contains confidential information. Note that Firefox for instance, to prevent data leaks, <a\nhref=\"https://blog.mozilla.org/security/2018/01/31/preventing-data-leaks-by-stripping-path-information-in-http-referrers/\">removes path\ninformation</a> in the Referer header while browsing privately.\n\nSuppose an e-commerce website asks the user his credit card number to purchase a product:\n\nWhen submitting the above HTML form, a HTTP GET request will be performed, the URL requested will be\nhttps://example.com/valid_order?cc=1111-2222-3333-4444 with credit card number inside and it's obviously not secure for these reasons:\n\n  -  URLs are stored in the history of browsers. \n  -  URLs could be accidentally shared when doing copy/paste actions. \n  -  URLs can be stolen if a malicious person looks at the computer screen of an user. \n\nIn addition to these threats, when further requests will be performed from the \"valid_order\" page with a simple legitimate embedded script like\nthat:\n\nThe referer header which contains confidential information will be send to a third party web analytic service and cause privacy issue:\n\n## Ask Yourself Whether\n\n  -  Confidential information exists in URLs. \n  -  Semantic of HTTP methods is not respected (eg: use of a GET method instead of POST when the state of the application is changed). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nConfidential information should not be set inside URLs (GET requests) of the application and a safe (ie: different from `unsafe-url` or\n`no-referrer-when-downgrade`) [referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)\nheader, to control how much information is included in the referer header, should be used.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) `referrerPolicy`\nmiddleware is disabled or used with `no-referrer-when-downgrade` or `unsafe-url`:\n\n## Compliant Solution\n\nIn Express.js application a secure solution is to user the [helmet](https://www.npmjs.com/package/helmet) referrer policy middleware set\nto `no-referrer`:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) - Referrer-Policy \n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns) -\n  Referer header: privacy and security concerns </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3317",
        "display_name": "JavascriptS3317",
        "severity": "info",
        "category": "convention",
        "rule_title": "Default export names and file names should match",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nCase, underscores ( `_` ) and dashes (`-`) are ignored from the name comparison.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5739",
        "display_name": "JavascriptS5739",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling Strict-Transport-Security policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen implementing the HTTPS protocol, the website mostly continue to support the HTTP protocol to redirect users to HTTPS when they request a HTTP\nversion of the website. These redirects are not encrypted and are therefore vulnerable to man in the middle attacks. The <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">Strict-Transport-Security policy header</a> (HSTS) set by\nan application instructs the web browser to convert any HTTP request to HTTPS.\n\nWeb browsers that see the Strict-Transport-Security policy header for the first time record information specified in the header:\n\n  -  the `max-age` directive which specify how long the policy should be kept on the web browser. \n  -  the `includeSubDomains` optional directive which specify if the policy should apply on all sub-domains or not. \n  -  the `preload` optional directive which is not part of the HSTS specification but supported on all modern web browsers. \n\nWith the `preload` directive the web browser never connects in HTTP to the website and to use this directive, it is required <a\nhref=\"https://hstspreload.org/\">to submit</a> the concerned application to a preload service maintained by Google.\n\n## Ask Yourself Whether\n\n  -  The website is accessible with the unencrypted HTTP protocol. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement Strict-Transport-Security policy header, it is recommended to apply this policy to all subdomains (`includeSubDomains`) and\nfor at least 6 months (`max-age=15552000`) or even better for 1 year (`max-age=31536000`).\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) or <a\nhref=\"https://www.npmjs.com/package/hsts\">hsts</a> middleware are disabled or used without recommended values:\n\n## Compliant Solution\n\nIn Express.js application a standard way to implement HSTS is with the [helmet](https://www.npmjs.com/package/helmet) or <a\nhref=\"https://www.npmjs.com/package/hsts\">hsts</a> middleware:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) - Strict Transport\n  Security </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1940",
        "display_name": "JavascriptS1940",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean checks should not be inverted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2234",
        "display_name": "JavascriptS2234",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Parameters should be passed in the correct order",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,\nwhen the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will\nlikely lead to unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nSwapped arguments that are compared beforehand in an enclosing `if`-statement are ignored:\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5743",
        "display_name": "JavascriptS5743",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing browsers to perform DNS prefetching  is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy default, web browsers perform [DNS prefetching](https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch/) to reduce\nlatency due to DNS resolutions required when an user clicks links from a website page.\n\nFor instance on example.com the hyperlink below contains a cross-origin domain name that must be resolved to an IP address by the web browser:\n\nIt can add significant latency during requests, especially if the page contains many links to cross-origin domains. DNS prefetch allows web\nbrowsers to perform DNS resolving in the background before the user clicks a link. This feature can cause privacy issues because DNS resolving from\nthe user's computer is performed without his consent if he doesn't intent to go to the linked website.\n\nOn a complex private webpage, a combination \"of unique links/DNS resolutions\" can indicate, to a eavesdropper for instance, that the user is\nvisiting the private page.\n\n## Ask Yourself Whether\n\n  -  Links to cross-origin domains could result in leakage of confidential information about the user's navigation/behavior of the website. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement [X-DNS-Prefetch-Control](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) header with an\n**off** value but this could significantly degrade website performances.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [dns-prefetch-control](https://www.npmjs.com/package/dns-prefetch-control)\nmiddleware is disabled or used without the recommended value:\n\n## Compliant Solution\n\nIn Express.js application the [dns-prefetch-control](https://www.npmjs.com/package/dns-prefetch-control) or <a\nhref=\"https://www.npmjs.com/package/helmet\">helmet</a> middleware is the standard way to implement `X-DNS-Prefetch-Control` header:\n\n## See\n\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) - X-DNS-Prefetch-Control\n  </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch) - Using dns-prefetch \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2598",
        "display_name": "JavascriptS2598",
        "severity": "error",
        "category": "security",
        "rule_title": "File uploads should be restricted",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThese minimum restrictions should be applied when handling file uploads:\n\n  -  the file upload folder to restrict untrusted files to a specific folder. \n  -  the file extension of the uploaded file to prevent remote code execution. \n\nAlso the size of the uploaded file should be limited to prevent denial of service attacks. This requirement is covered by the rule S5693.\n\n## Noncompliant Code Example\n\n[formidable](https://www.npmjs.com/package/formidable) module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) module:\n\n## Compliant Solution\n\n[formidable](https://www.npmjs.com/package/formidable) module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) module:\n\n## See\n\n  -  [CWE-434](https://cwe.mitre.org/data/definitions/434) - Unrestricted Upload of File with Dangerous Type \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References) - Insecure Direct\n  Object References </li>\n  -  [OWASP Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload) - Unrestricted File Upload \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3686",
        "display_name": "JavascriptS3686",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not be called both with and without \"new\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConstructor functions, which create new object instances, must only be called with `new`. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1143",
        "display_name": "JavascriptS1143",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Jump statements should not occur in \"finally\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `return`, `break`, `throw`, and `continue` from a `finally` block overwrites similar\nstatements from the suspended `try` and `catch` blocks.\n\nThis rule raises an issue when a jump statement (`break`, `continue`, `return` and `throw`) would force\ncontrol flow to leave a `finally` block. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-584](http://cwe.mitre.org/data/definitions/584.html) - Return Inside Finally Block \n  -  [CERT, ERR04-J.](https://wiki.sei.cmu.edu/confluence/x/BTdGBQ) - Do not complete abruptly from a finally block \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1264",
        "display_name": "JavascriptS1264",
        "severity": "info",
        "category": "convention",
        "rule_title": "A \"while\" loop should be used instead of a \"for\" loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen only the condition expression is defined in a `for` loop, and the initialization and increment expressions are missing, a\n`while` loop should be used instead to increase readability. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1821",
        "display_name": "JavascriptS1821",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `switch` structures are difficult to understand because you can easily confuse the cases of an inner `switch` as\nbelonging to an outer statement. Therefore nested `switch` statements should be avoided.\n\nSpecifically, you should structure your code to avoid the need for nested `switch` statements, but if you cannot, then consider moving\nthe inner `switch` to another function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5742",
        "display_name": "JavascriptS5742",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling Certificate Transparency monitoring is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Certificate Transparency](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) (CT) is an open-framework to\nprotect against identity theft when certificates are issued. [Certificate Authorities](https://en.wikipedia.org/wiki/Certificate_authority)\n(CA) electronically sign certificate after verifying the identify of the certificate owner. Attackers use, among other things, social engineering\nattacks to trick a CA to correctly verifying a spoofed identity/forged certificate. \n\nCAs implement Certificate Transparency framework to publicly log the records of newly issued certificates, allowing the public and in particular\nthe identity owner to monitor these logs to verify that his identify was not usurped.\n\n## Ask Yourself Whether\n\n  -  The website identity is valuable and well-known, therefore prone to theft. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement [Expect-CT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT) HTTP header which instructs the web browser\nto check [public CT logs](https://www.certificate-transparency.org/known-logs) in order to verify if the website appears inside and if it\nis not, the browser will block the request and display a warning to the user.\n\n## Sensitive Code Example\n\nIn Express.js application the code is sensitive if the [expect-ct](https://www.npmjs.com/package/expect-ct) middleware is disabled:\n\n## Compliant Solution\n\nIn Express.js application the [expect-ct](https://www.npmjs.com/package/expect-ct) middleware is the standard way to implement\nexpect-ct. Usually, the deployment of this policy starts with the report only mode (`enforce: false`) and with a low `maxAge`\n(the number of seconds the policy will apply) value and next if everything works well it is recommended to block future connections that violate\nExpect-CT policy (`enforce: true`) and greater value for maxAge directive:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure) -\n  Sensitive Data Exposure </li>\n  <li> [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) - Certificate Transparency\n  </li>\n  -  [wikipedia.org](https://en.wikipedia.org/wiki/Certificate_authority) - Certificate Authority \n",
        "disable": false
      },
      {
        "real_name": "javascript:S881",
        "display_name": "JavascriptS881",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\n\n  -  It can significantly impair the readability of the code. \n  -  It introduces additional side effects into a statement, with the potential for undefined behavior. \n  -  It is safer to use these operators in isolation from any other arithmetic operators. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nThe following sequence is clearer and therefore safer:\n\n## See\n\n  -  [CERT, EXP30-C.](https://wiki.sei.cmu.edu/confluence/x/StYxBQ) - Do not depend on the order of evaluation for side effects \n  -  [CERT, EXP50-CPP.](https://wiki.sei.cmu.edu/confluence/x/IXw-BQ) - Do not depend on the order of evaluation for side effects \n  <li> [CERT, EXP05-J.](https://wiki.sei.cmu.edu/confluence/x/NDdGBQ) - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3776",
        "display_name": "JavascriptS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S878",
        "display_name": "JavascriptS878",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Comma operator should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nUse of comma operator is tolerated:\n\n  -  in initialization and increment expressions of `for` loops. \n\n  -  If the expression sequence is explicitly wrapped in parentheses. \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2688",
        "display_name": "JavascriptS2688",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"NaN\" should not be used in comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`NaN` is not equal to anything, even itself. Testing for equality or inequality against `NaN` will yield predictable results,\nbut probably not the ones you want. \n\nInstead, the best way to see whether a variable is equal to `NaN` is to use `Number.isNaN()`, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since `NaN !== NaN`, when `a !== a`, you know it must equal `NaN`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, NUM07-J.](https://wiki.sei.cmu.edu/confluence/x/wzdGBQ) - Do not attempt comparisons with NaN \n",
        "disable": false
      },
      {
        "real_name": "javascript:S4624",
        "display_name": "JavascriptS4624",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Template literals should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTemplate literals (previously named \"template strings\") are an elegant way to build a string without using the `+` operator to make\nstrings concatenation more readable. \n\nHowever, it's possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.\n\nIn such situations, it's preferable to move the nested template into a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2201",
        "display_name": "JavascriptS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. \n\nTo prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP12-C.](https://wiki.sei.cmu.edu/confluence/x/mtYxBQ) - Do not ignore values returned by functions \n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2685",
        "display_name": "JavascriptS2685",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"arguments.caller\" and \"arguments.callee\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoth `arguments.caller` and `arguments.callee` make quite a few optimizations impossible so they were deprecated in latest\nversions of JavaScript. In fact, EcmaScript 5 forbids the use of both in `strict` mode, according to the docs:\n\n> \n  Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \"callee\" which throw a TypeError\n  exception on access.\n\n\nThe same restriction applies to the function's `caller` and `arguments` properties in `strict` mode.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3533",
        "display_name": "JavascriptS3533",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"import\" should be used to include external code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBefore ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, `import` and `export`, and older usages should be\nconverted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4502",
        "display_name": "JavascriptS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Sensitive Code Example\n\n[Express.js CSURF middleware](https://www.npmjs.com/package/csurf) protection is not found on an unsafe HTTP method like POST\nmethod:\n\nProtection provided by [Express.js CSURF middleware](https://www.npmjs.com/package/csurf) is globally disabled on unsafe methods:\n\n## Compliant Solution\n\n[Express.js CSURF middleware](https://www.npmjs.com/package/csurf) protection is used on unsafe methods:\n\nProtection provided by [Express.js CSURF middleware](https://www.npmjs.com/package/csurf) is enabled on unsafe methods:\n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1110",
        "display_name": "JavascriptS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2681",
        "display_name": "JavascriptS2681",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Multiline blocks should be enclosed in curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCurly braces can be omitted from a one-line block, such as with an `if` statement or `for` loop, but doing so can be\nmisleading and induce bugs.\n\nThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\n\nNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlooks fine in your editor but is confusing when you change the size of tabs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-483](http://cwe.mitre.org/data/definitions/483.html) - Incorrect Block Delimitation \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3531",
        "display_name": "JavascriptS3531",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Generators should \"yield\" something",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA generator without a `yield` statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1119",
        "display_name": "JavascriptS1119",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Labels should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLabels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n&nbsp;\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1472",
        "display_name": "JavascriptS1472",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function call arguments should not start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely **will** lead to questions for maintainers.\n\nWhat was the initial intent of the developer?\n\n  1.  Define a function and then execute some unrelated code inside a closure ? \n  1.  Pass the second function as a parameter to the first one ? \n\nThe first option will be the one chosen by the JavaScript interpreter.\n\nBy extension, and to improve readability, any kind of function call argument should not start on new line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nEither\n\nOr \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2208",
        "display_name": "JavascriptS2208",
        "severity": "error",
        "category": "convention",
        "rule_title": "Wildcard imports should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOn the principle that clearer code is better code, you should explicitly `import` the things you want to use in a module. Using\n`import *` imports everything in the module, and runs the risk of confusing maintainers. Similarly, `export * from \"module\";`\nimports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1117",
        "display_name": "JavascriptS1117",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables should not be shadowed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n\n## See\n\n  <li> [CERT, DCL01-C.](https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes) - Do not reuse\n  variable names in subscopes </li>\n  <li> [CERT, DCL51-J.](https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes) - Do\n  not shadow or obscure identifiers in subscopes </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4507",
        "display_name": "JavascriptS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\n[errorhandler Express.js middleware](https://www.npmjs.com/package/errorhandler) should not be used in production:\n\n## Compliant Solution\n\n[errorhandler Express.js middleware](https://www.npmjs.com/package/errorhandler) used only in development mode:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1116",
        "display_name": "JavascriptS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extra semicolons should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExtra semicolons (`;`) are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by an actual statement, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n  -  There was a misunderstanding about where semicolons are required or useful. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1479",
        "display_name": "JavascriptS1479",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"switch\" statements should not have too many \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen `switch` statements have large sets of `case` clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1125",
        "display_name": "JavascriptS1125",
        "severity": "info",
        "category": "convention",
        "rule_title": "Boolean literals should not be used in comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBoolean literals should be avoided in comparison expressions `==` and `!=` to improve code readability.\n\nThis rule also reports on redundant boolean operations.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1126",
        "display_name": "JavascriptS1126",
        "severity": "info",
        "category": "convention",
        "rule_title": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nReturn of boolean literal statements wrapped into `if-then-else` ones should be simplified. \n\nNote that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper\nconversion.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1488",
        "display_name": "JavascriptS1488",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variables should not be declared and then immediately returned or thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDeclaring a variable only to immediately return or throw it is a bad practice.\n\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3785",
        "display_name": "JavascriptS3785",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"in\" should not be used with primitive types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `in` operator tests whether the specified property is in the specified object.\n\nIf the right operand is a of primitive type (i.e., not an object) the `in` operator raises a `TypeError`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3786",
        "display_name": "JavascriptS3786",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Template literal placeholder syntax should not be used in regular strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTemplate strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like `${variable} ` in a string between two back-ticks (```). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4634",
        "display_name": "JavascriptS4634",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Shorthand promises should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a `Promise` needs to only \"resolve\" or \"reject\", it's more efficient and readable to use the methods specially created for such use\ncases: `Promise.resolve(value)` and `Promise.reject(error)`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1121",
        "display_name": "JavascriptS1121",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be made from within sub-expressions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule does not raise issues for the following patterns:\n\n  -  assignments at declaration-level: `let a = b = 0;` \n  -  chained assignments: `a = b = c = 0;` \n  -  relational assignments: `(a = 0) != b` \n  -  sequential assignments: `a = 0, b = 1, c = 2` \n  -  assignments in lambda body: `() =&gt; a = 0` \n  -  conditional assignment idiom: `a || (a = 0)` \n  -  assignments in (do-)while conditions: `while (a = 0);` \n\n## See\n\n  -  [MITRE, CWE-481](http://cwe.mitre.org/data/definitions/481.html) - Assigning instead of Comparing \n  -  [CERT, EXP45-C.](https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ) - Do not perform assignments in selection statements \n  -  [CERT, EXP51-J.](https://wiki.sei.cmu.edu/confluence/x/ITZGBQ) - Do not perform assignments in conditional expressions \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2692",
        "display_name": "JavascriptS2692",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"indexOf\" checks should not be for positive numbers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost checks against an `indexOf` call against an array compare it with -1 because 0 is a valid index. Any checks which look for values\n&gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the element, consider using `includes`\ninstead. Before using&nbsp;`includes` method make sure that your browser version is supporting it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n[Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\ndocumentation at MDN\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3782",
        "display_name": "JavascriptS3782",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Arguments to built-in functions should match documented types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return `false`).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5604",
        "display_name": "JavascriptS5604",
        "severity": "warning",
        "category": "security",
        "rule_title": "Using intrusive permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Powerful features](https://www.w3.org/TR/permissions/#powerful-feature) are browser features (geolocation, camera, microphone ...) that\ncan be accessed with JavaScript API and may require a permission granted by the user. These features can have a high impact on privacy and user\nsecurity thus they should only be used if they are really necessary to implement the critical parts of an application.\n\nThis rule highlights intrusive permissions when requested with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\">the\nfuture standard (but currently experimental) web browser query API</a> and specific APIs related to the permission. It is highly recommended to\ncustomize this rule with the permissions considered as intrusive in the context of the web application.\n\n## Ask Yourself Whether\n\n  -  Some powerful features used by the application are not really necessary. \n  -  Users are not clearly informed why and when powerful features are used by the application. \n\nYou are at risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  In order to respect user privacy it is recommended to avoid using intrusive powerful features. \n\n## Sensitive Code Example\n\nWhen using [geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API), Firefox for example retrieves personal\ninformation like nearby wireless access points and IP address and sends it to the default geolocation service provider, <a\nhref=\"https://www.google.com/privacy/lsf.html\">Google Location Services</a>:\n\n## Compliant Solution\n\nIf geolocation is required, always explain to the user why the application needs it and prefer requesting an approximate location when\npossible:\n\n## See\n\n  <li> [OWASP Web Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [CWE-250](https://cwe.mitre.org/data/definitions/250.html) - Execution with Unnecessary Privileges \n  -  [CWE-359](https://cwe.mitre.org/data/definitions/359.html) - Exposure of Private Information \n  -  [W3C](https://www.w3.org/TR/permissions/) - Permissions \n  <li> [Mozilla](https://support.mozilla.org/en-US/kb/does-firefox-share-my-location-websites) - Does Firefox share my location with\n  websites? </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5725",
        "display_name": "JavascriptS5725",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling resource integrity features is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFetching external resources, for example from a CDN, without verifying their integrity could impact the security of an application if the CDN gets\ncompromised and resources are replaced by malicious ones. Resources integrity feature will block resources inclusion into an application if the\npre-computed digest of the expected resource doesn't match with the digest of the retrieved resource.\n\n## Ask Yourself Whether\n\n  -  The resources are fetched from external CDNs. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\n  <li> implement resources integrity checks for all static resources (where \"static\" means that the resource's content doesn't change dynamically\n  based on the browser) </li>\n  -  use versioned resources instead of using \"latest\" version of the resources \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CWE-353](https://cwe.mitre.org/data/definitions/353.html) - Missing Support for Integrity Check \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\">OWASP Top 10 2017 Category\n  A6</a> - Security Misconfiguration </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) - Subresource Integrity \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1128",
        "display_name": "JavascriptS1128",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unnecessary imports should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere's no reason to import modules you don't use; and every reason not to: doing so needlessly increases the load.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5728",
        "display_name": "JavascriptS5728",
        "severity": "info",
        "category": "security",
        "rule_title": "Disabling content security policy fetch directives is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nContent security policy (CSP) (fetch directives) is a [W3C standard ](https://www.w3.org/TR/CSP3/) which is used by a server to specify,\nvia a http header, the origins from where the browser is allowed to load resources. It can help to mitigate the risk of cross site scripting (XSS)\nattacks and reduce privileges used by an application. If the website doesn't define CSP header the browser will apply <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> by default.\n\nIn the above example, all resources are allowed from the website where this header is set and script resources fetched from example.com are also\nauthorized:\n\n## Ask Yourself Whether\n\n  -  The resources of the application are fetched from various untrusted locations. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nImplement content security policy fetch directives, in particular **default-src** directive and continue to properly sanitize and validate all\ninputs of the application, indeed CSP fetch directives is only a tool to reduce the impact of cross site scripting attacks.\n\n## Sensitive Code Example\n\nIn a Express.js application, the code is sensitive if the [helmet](https://www.npmjs.com/package/helmet) contentSecurityPolicy\nmiddleware is disabled:\n\n## Compliant Solution\n\nIn a Express.js application, a standard way to implement CSP is the <a href=\"https://www.npmjs.com/package/helmet\">helmet contentSecurityPolicy\nmiddleware</a>:\n\n## See\n\n  -  [w3.org](https://www.w3.org/TR/CSP3/) - Content Security Policy Level 3 \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\">OWASP Top 10 2017 Category\n  A6</a> - Security Misconfiguration </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) - Content Security Policy (CSP) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1481",
        "display_name": "JavascriptS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables and functions should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3358",
        "display_name": "JavascriptS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Ternary operators should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4326",
        "display_name": "JavascriptS4326",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"await\" should not be used redundantly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `async` function always wraps the return value in a `Promise`. Using `return await` is therefore redundant.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5042",
        "display_name": "JavascriptS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\nFor [tar](https://github.com/npm/node-tar) module:\n\nFor [adm-zip](https://github.com/cthackers/adm-zip) module:\n\nFor [jszip](https://stuk.github.io/jszip/) module:\n\nFor [yauzl](https://github.com/thejoshwolfe/yauzl) module\n\nFor [extract-zip](https://github.com/maxogden/extract-zip) module:\n\n## Compliant Solution\n\nFor [tar](https://github.com/npm/node-tar) module:\n\nFor [adm-zip](https://github.com/cthackers/adm-zip) module:\n\nFor [jszip](https://stuk.github.io/jszip/) module:\n\nBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\n\nFor [yauzl](https://github.com/thejoshwolfe/yauzl) module\n\nBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\n\nFor [extract-zip](https://github.com/maxogden/extract-zip) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](http://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2703",
        "display_name": "JavascriptS2703",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables should be declared explicitly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n**accidental** creation of global variables, which is what happens when you declare a variable inside a function or the `for` clause\nof a for-loop without using the `let`, `const` or `var` keywords. \n\n`let` and `const` were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3353",
        "display_name": "JavascriptS3353",
        "severity": "error",
        "category": "convention",
        "rule_title": "Unchanged variables should be marked \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMarking a variable that is unchanged after initialization `const` is an indication to future maintainers that \"no this isn't updated,\nand it's not supposed to be\". `const` should be used in these situations in the interests of code clarity.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5659",
        "display_name": "JavascriptS5659",
        "severity": "error",
        "category": "security",
        "rule_title": "JWT should be signed and verified with strong cipher algorithms",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.\n\n  -  Don't use `none` algorithm to sign or verify the validity of a token. \n  -  Don't use a token without verifying its signature before. \n\n## Noncompliant Code Example\n\n[jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) library:\n\n## Compliant Solution\n\n[jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-347](https://cwe.mitre.org/data/definitions/347.html) - Improper Verification of Cryptographic Signature \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1854",
        "display_name": "JavascriptS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores initializations to -1, 0, 1, `null`, `undefined`, [], {}, `true`, `false` and\n`\"\"`. Variables that start with an underscore (e.g. '`_unused`') are ignored.\n\nThis rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2819",
        "display_name": "JavascriptS2819",
        "severity": "error",
        "category": "security",
        "rule_title": "Origins should be verified during cross-origin communications",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBrowsers [allow message exchanges](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) between Window objects of\ndifferent origins. \n\nBecause any window can send / receive messages from other window it is important to verify the sender's / receiver's identity:\n\n  <li> When sending message with postMessage method, the identity's receiver should be defined (the wildcard keyword (`*`) should not be\n  used). </li>\n  -  When receiving message with message event, the sender's identity should be verified using the origin and possibly source properties. \n\n## Noncompliant Code Example\n\nWhen sending message:\n\nWhen receiving message:\n\n## Compliant Solution\n\nWhen sending message:\n\nWhen receiving message:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management) -\n  Broken Authentication and Session Management </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) - postMessage API \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1172",
        "display_name": "JavascriptS1172",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused function parameters should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\nFor instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:\n\nSo only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function\nsignature. Unused arguments which are followed by an argument that **is** used will be ignored.\n\nExamples :\n\nFurther, when `arguments` is used in the function body, no parameter is reported as unused. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2260",
        "display_name": "JavascriptS2260",
        "severity": "warning",
        "category": "convention",
        "rule_title": "JavaScript parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1862",
        "display_name": "JavascriptS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`.\n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n\n&nbsp;\n\n**Note that this rule requires Node.js to be available during analysis.**\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5547",
        "display_name": "JavascriptS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1067",
        "display_name": "JavascriptS1067",
        "severity": "error",
        "category": "convention",
        "rule_title": "Expressions should not be too complex",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe complexity of an expression is defined by the number of `&amp;&amp;`, `||` and `condition ? ifTrue : ifFalse`\noperators it contains.\n\nA single expression's complexity should not become too high to keep the code readable.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3003",
        "display_name": "JavascriptS3003",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Comparison operators should not be used with strings",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of comparison operators (`&lt;`, `&lt;=`, `&gt;=`, `&gt;`) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThe rule ignores string comparisons occurring in the callback of a sort invocation, e.g.:\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5542",
        "display_name": "JavascriptS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\n      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. </li>\n      <li> The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block always gets\n      encrypted to the same ciphertext block. This mode should not be used. </li>\n    \n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1066",
        "display_name": "JavascriptS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1186",
        "display_name": "JavascriptS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a function not to have a function body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3001",
        "display_name": "JavascriptS3001",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"delete\" should be used only with object properties",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe semantics of the `delete` operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3800",
        "display_name": "JavascriptS3800",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should always return the same type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFunctions returning `this` are ignored.\n\nFunctions returning expressions having type `any` are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3923",
        "display_name": "JavascriptS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving all branches in a `switch` or `if` chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a `switch`/`if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s, or to `switch`-es without `default`\nclauses.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2392",
        "display_name": "JavascriptS2392",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables should be used in the blocks where they are declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables that are declared inside a block but used outside of it (which is possible with a `var`-style declaration) should be declared\noutside the block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3801",
        "display_name": "JavascriptS3801",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should use \"return\" consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.\n\nIn particular a function, in JavaScript, will return `undefined` in any of the following cases:\n\n  -  It exits without a `return` statement. \n  -  It executes a `return` with no value. \n\nThis rule verifies that return values are either always or never specified for each path through a function.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3699",
        "display_name": "JavascriptS3699",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "The output of functions that don't return anything should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return `undefined`, which is probably not what was intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5876",
        "display_name": "JavascriptS5876",
        "severity": "error",
        "category": "security",
        "rule_title": "A new session should be created during user authentication",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSession fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).\n\n## Noncompliant Code Example\n\nFor [Passport.js](http://www.passportjs.org/):\n\n## Compliant Solution\n\nFor [Passport.js](http://www.passportjs.org/):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication) -\n  Broken Authentication </li>\n  -  [OWASP Sesssion Fixation](https://www.owasp.org/index.php/Session_fixation) \n  -  [MITRE, CWE-384](https://cwe.mitre.org/data/definitions/384.html) - Session Fixation \n",
        "disable": false
      },
      {
        "real_name": "javascript:S4423",
        "display_name": "JavascriptS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different from \"TLSv1.2\", \"TLSv1.3\", \"DTLSv1.2\" or\n\"DTLSv1.3\").\n\n## Noncompliant Code Example\n\n`secureProtocol`, `minVersion`/`maxVersion` and `secureOptions` should not be set to use weak TLS\nprotocols (TLSv1.1 and lower):\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\nSet either `secureProtocol` or `secureOptions` or `minVersion` to use secure protocols only (TLSv1.2 and\nhigher):\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2245",
        "display_name": "JavascriptS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\nAs the `Math.random()` function relies on a weak pseudorandom number generator, this function should not be used for security-critical\napplications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used\ninstead.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a cryptographically strong pseudorandom number generator (CSPRNG) like `crypto.getRandomValues()`. \n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3579",
        "display_name": "JavascriptS3579",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Array indexes should be numeric",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAssociative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as\neasy as an array, and more reliable if you need named members.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4426",
        "display_name": "JavascriptS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic keys should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of cryptographic systems require a sufficient key size to be robust against brute-force attacks.\n\n[NIST recommendations](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf) will be checked for these\nuse-cases:\n\n**Digital Signature Generation** and **Verification:** \n\n  -  p ≥ 2048 AND q ≥ 224 for DSA (`p` is key length and `q` the modulus length) \n  -  n ≥ 2048 for RSA (`n` is the key length) \n\n**Key Agreement**: \n\n  -  p ≥ 2048 AND q ≥ 224 for DH and MQV \n  <li> n ≥ 224 for ECDH and ECMQV (Examples: `secp192r1` is a non-compliant curve (`n` &lt; 224) but `secp224k1` is\n  compliant (`n` &gt;= 224)) </li>\n\n**Symmetric keys**: \n\n  -  key length ≥ 128 bits \n\nThis rule will not raise issues for ciphers that are considered weak (no matter the key size) like `DES`, `Blowfish`.\n\n## Noncompliant Code Example\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## Compliant Solution\n\n[crypto](https://nodejs.org/api/crypto.html) built-in module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [NIST 800-131A](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf) - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5757",
        "display_name": "JavascriptS5757",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing confidential information to be logged is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLog management is an important topic, especially for the security of a web application, to ensure user activity, including potential attackers, is\nrecorded and available for an analyst to understand what's happened on the web application in case of malicious activities.\n\nRetention of specific logs for a defined period of time is often necessary to comply with regulations such as GDPR, <a\nhref=\"https://www.pcisecuritystandards.org/documents/Effective-Daily-Log-Monitoring-Guidance.pdf\">PCI DSS</a> and others. However, to protect user's\nprivacy, certain informations are forbidden or strongly discouraged from being logged, such as user passwords or credit card numbers, which obviously\nshould not be stored or at least not in clear text.\n\n## Ask Yourself Whether\n\nIn a production environment:\n\n  -  The web application uses confidential information and logs a significant amount of data. \n  -  Logs are externalized to SIEM or Big Data repositories. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nLoggers should be configured with a list of confidential, personal information that will be hidden/masked or removed from logs.\n\n## Sensitive Code Example\n\nWith [Signale log management framework](https://www.npmjs.com/package/signale) the code is sensitive when an empty list of secrets is\ndefined:\n\n## Compliant Solution\n\nWith [Signale log management framework](https://www.npmjs.com/package/signale) it is possible to define a list of secrets that will be\nhidden in logs:\n\n## See\n\n  -  [CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Insertion of Sensitive Information into Log File \n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S131",
        "display_name": "JavascriptS131",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should have \"default\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe requirement for a final `default` clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-478](http://cwe.mitre.org/data/definitions/478.html) - Missing Default Case in Switch Statement \n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2123",
        "display_name": "JavascriptS2123",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Values should not be uselessly incremented",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3696",
        "display_name": "JavascriptS3696",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Literals should not be thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is a bad practice to `throw` something that's not derived at some level from `Error`. If you can't find an existing\n`Error` type that suitably conveys what you need to convey, then you should extend `Error` to create one.\n\nSpecifically, part of the point of throwing `Error`s is to communicate about the conditions of the error, but literals have far less\nability to communicate meaningfully than `Error`s because they don't include stacktraces.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S134",
        "display_name": "JavascriptS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `switch`, and `try` statements are key ingredients for making\nwhat's known as \"Spaghetti code\".\n\nSuch code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3330",
        "display_name": "JavascriptS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## Compliant Solution\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S125",
        "display_name": "JavascriptS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5759",
        "display_name": "JavascriptS5759",
        "severity": "info",
        "category": "security",
        "rule_title": "Forwarding client IP address is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsers often connect to web servers through HTTP proxies.\n\nProxy can be configured to forward the client IP address via the `X-Forwarded-For` or `Forwarded` HTTP headers.\n\nIP address is a personal information which can identify a single user and thus impact his privacy.\n\n## Ask Yourself Whether\n\n  -  The web application uses reverse proxies or similar but doesn't need to know the IP address of the user. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nUser IP address should not be forwarded unless the application needs it, as part of an authentication, authorization scheme or log management for\nexamples.\n\n## Sensitive Code Example\n\n[node-http-proxy](https://github.com/http-party/node-http-proxy)\n\n[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)\n\n## Compliant Solution\n\n[node-http-proxy](https://github.com/http-party/node-http-proxy)\n\n[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)\n\n## See\n\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\">OWASP Top 10 2017 Category\n  A3</a> - Sensitive Data Exposure </li>\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) - X-Forwarded-For \n",
        "disable": false
      },
      {
        "real_name": "javascript:S126",
        "display_name": "JavascriptS126",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule applies whenever an `if` statement is followed by one or more `else if` statements; the final `else if`\nshould be followed by an `else` statement.\n\nThe requirement for a final `else` statement is defensive programming.\n\nThe `else` statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final `default` clause in a `switch` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC01-C.](https://wiki.sei.cmu.edu/confluence/x/RtYxBQ) - Strive for logical completeness \n  -  [CERT, MSC57-J.](https://wiki.sei.cmu.edu/confluence/x/jzZGBQ) - Strive for logical completeness \n",
        "disable": false
      },
      {
        "real_name": "javascript:S128",
        "display_name": "JavascriptS128",
        "severity": "error",
        "category": "convention",
        "rule_title": "Switch cases should end with an unconditional \"break\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule is relaxed in the following cases:\n\n## See\n\n  -  [MITRE, CWE-484](http://cwe.mitre.org/data/definitions/484.html) - Omitted Break Statement in Switch \n  <li> [CERT, MSC17-C.](https://wiki.sei.cmu.edu/confluence/x/ldYxBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> [CERT, MSC52-J.](https://wiki.sei.cmu.edu/confluence/x/1DdGBQ) - Finish every set of statements associated with a case label with a\n  break statement </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2137",
        "display_name": "JavascriptS2137",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Special identifiers should not be bound or assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:\n\n  -  `eval` - evaluates a string as JavaScript code \n  -  `arguments` - used to access function arguments through indexed properties. \n  -  `undefined` - returned for values and properties that have not yet been assigned \n  -  `NaN` - Not a Number; returned when math functions fail. \n  -  `Infinity` - when a number exceeds the upper limit of the floating point numbers \n\nThese words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2138",
        "display_name": "JavascriptS2138",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"undefined\" should not be assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`undefined` is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n`null` should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2259",
        "display_name": "JavascriptS2259",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Properties of variables with \"null\" or \"undefined\" values should not be accessed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a variable is assigned an `undefined` or `null` value, it has no properties. Trying to access properties of such a\nvariable anyway results in a `TypeError`, causing abrupt termination of the script if the error is not caught in a `catch`\nblock. But instead of `catch`-ing this condition, it is best to avoid it altogether.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-476](https://cwe.mitre.org/data/definitions/476.html) - NULL Pointer Dereference \n  -  [CERT, EXP34-C.](https://wiki.sei.cmu.edu/confluence/x/QdcxBQ) - Do not dereference null pointers \n  -  [CERT, EXP01-J.](https://wiki.sei.cmu.edu/confluence/x/aDdGBQ) - Do not use a null in a case where an object is required \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2376",
        "display_name": "JavascriptS2376",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Property getters and setters should come in pairs",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.\n\nThis rule also enforces the reverse situation (getter but no setter).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1848",
        "display_name": "JavascriptS1848",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Objects should not be created to be dropped immediately without being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.\n\nIf it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nImmediately dropped new objects inside `try`-statements are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2814",
        "display_name": "JavascriptS2814",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Variables and functions should not be redeclared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.\n\nThis rule also applies to function parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5527",
        "display_name": "JavascriptS5527",
        "severity": "error",
        "category": "security",
        "rule_title": "Server hostnames should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate. \n\nThe certificate's hostname-specific data should match the server hostname.\n\nIt's not recommended to re-invent the wheel by implementing custom hostname verification.\n\nTLS/SSL libraries provide built-in hostname verification functions that should be used.\n\n## Noncompliant Code Example\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-297](https://cwe.mitre.org/data/definitions/297.html) - Improper Validation of Certificate with Host Mismatch \n",
        "disable": false
      },
      {
        "real_name": "javascript:S135",
        "display_name": "JavascriptS135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Loops should not contain more than a single \"break\" or \"continue\" statement",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRestricting the number of `break` and `continue` statements in a loop is done in the interest of good structured programming.\n\n\nOnly one `break` or one `continue` statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4790",
        "display_name": "JavascriptS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "javascript:S138",
        "display_name": "JavascriptS138",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA function that grows too large tends to aggregate too many responsibilities.\n\nSuch functions inevitably become harder to understand and therefore harder to maintain. \n\nAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n\nThose smaller functions will not only be easier to understand, but also probably easier to test.\n\n## Exceptions\n\nThis function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned\na name.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2251",
        "display_name": "JavascriptS2251",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "A \"for\" loop update clause should move the counter in the right direction",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `for` loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as `while` loops. More\ntypically, an infinite `for` loop is a bug. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC54-J.](https://wiki.sei.cmu.edu/confluence/x/aTdGBQ) - Avoid inadvertent wrapping of loop counters \n",
        "disable": false
      },
      {
        "real_name": "javascript:S139",
        "display_name": "JavascriptS139",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comments should not be located at the end of lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S930",
        "display_name": "JavascriptS930",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Function calls should not pass extra arguments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nYou can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nNo issue is reported when `arguments` is used in the body of the function being called.\n\n## See\n\n  -  MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. \n  -  [MITRE, CWE-628](http://cwe.mitre.org/data/definitions/628.html) - Function Call with Incorrectly Specified Arguments \n  <li> [CERT, DCL07-C.](https://wiki.sei.cmu.edu/confluence/x/7NYxBQ) - Include the appropriate type information in function declarators\n  </li>\n  -  [CERT, EXP37-C.](https://wiki.sei.cmu.edu/confluence/x/49UxBQ) - Call functions with the correct number and type of arguments \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1533",
        "display_name": "JavascriptS1533",
        "severity": "info",
        "category": "convention",
        "rule_title": "Wrapper objects should not be used for primitive types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the `new` keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1774",
        "display_name": "JavascriptS1774",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The ternary operator should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose `if`/`else` structure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1530",
        "display_name": "JavascriptS1530",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function declarations should not be made within blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each\nother.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4123",
        "display_name": "JavascriptS4123",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"await\" should only be used with promises",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is possible to use `await` on values which are not `Promise`s, but it's useless and misleading. The point of\n`await` is to pause execution until the `Promise`'s asynchronous code has run to completion. With anything other than a\n`Promise`, there's nothing to wait for.\n\nThis rule raises an issue when an `await`ed value is guaranteed not to be a `Promise`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2189",
        "display_name": "JavascriptS2189",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Loops should not be infinite",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a `break`, every loop should have an end condition.\n\n### Known Limitations\n\n  -  False positives: when `yield` is used - [Issue #674](https://github.com/SonarSource/SonarJS/issues/674). \n  -  False positives: when an exception is raised by a function invoked within the loop. \n  -  False negatives: when a loop condition is based on an element of an array or object. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, MSC01-J.](https://wiki.sei.cmu.edu/confluence/x/lzZGBQ) - Do not use an empty infinite loop \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5332",
        "display_name": "JavascriptS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\nFor [nodemailer](https://nodemailer.com):\n\nFor [ftp](https://github.com/mscdex/node-ftp):\n\nFor [telnet-client](https://github.com/mkozjak/node-telnet-client):\n\n## Compliant Solution\n\nFor [nodemailer](https://nodemailer.com) one of the following options must be set:\n\nFor [ftp](https://github.com/mscdex/node-ftp):\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1539",
        "display_name": "JavascriptS1539",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"strict\" mode should be used with caution",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2068",
        "display_name": "JavascriptS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1536",
        "display_name": "JavascriptS1536",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Function argument names should be unique",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFunction arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).\n\nThis hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1537",
        "display_name": "JavascriptS1537",
        "severity": "info",
        "category": "convention",
        "rule_title": "Trailing commas should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1535",
        "display_name": "JavascriptS1535",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"for...in\" loops should filter properties before acting on them",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `for...in` statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that don't take this into account can fail.\n\nTherefore, the body of every `for...in` statement should be wrapped in an `if` statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nLoops used to clone objects are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1656",
        "display_name": "JavascriptS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3834",
        "display_name": "JavascriptS3834",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"Symbol\" should not be used as a constructor",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`Symbol` is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.\n\nAn instance can only be created by using `Symbol` as a function. Using `Symbol` with the `new` operator will raise\na `TypeError`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1534",
        "display_name": "JavascriptS1534",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Property names should not be duplicated within a class or object literal",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.\n\nDefining a `class` with a duplicated `constructor` will generate an error.\n\nBefore ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S905",
        "display_name": "JavascriptS905",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-empty statements should change control flow or have at least one side-effect",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement (other than a null statement, which means a statement containing only a semicolon `;`) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-482](http://cwe.mitre.org/data/definitions/482) - Comparing instead of Assigning \n",
        "disable": false
      },
      {
        "real_name": "javascript:S103",
        "display_name": "JavascriptS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S909",
        "display_name": "JavascriptS909",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"continue\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`continue` is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as `if` should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S105",
        "display_name": "JavascriptS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5691",
        "display_name": "JavascriptS5691",
        "severity": "warning",
        "category": "security",
        "rule_title": "Statically serving hidden files is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHidden files are created automatically by many tools to save user-preferences, well-known examples are `.profile`, `.bashrc`,\n`.bash_history` or .`git`. To simplify the view these files are not displayed by default using operating system commands like\n`ls`.\n\nOutside of the user environment, hidden files are sensitive because they are used to store privacy-related information or even hard-coded\nsecrets.\n\n## Ask Yourself Whether\n\n  -  Hidden files may have been inadvertently uploaded to the static server's public directory and it accepts requests to hidden files. \n  <li> There is no business use cases linked to serve files in `.name` format but the server is not configured to reject requests to this\n  type of files. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Disable the serving of hidden files. \n\n## Sensitive Code Example\n\n[Express.js serve-static](https://www.npmjs.com/package/serve-static) middleware:\n\n## Compliant Solution\n\n[Express.js serve-static](https://www.npmjs.com/package/serve-static) middleware:\n\n## See\n\n  <li> [github.com/mtojek/go-url-fuzzer](https://github.com/mtojek/go-url-fuzzer) - Discover hidden files and directories on a web server.\n  </li>\n  <li> [OWASP Web Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration. </li>\n  -  [CWE-538](https://cwe.mitre.org/data/definitions/538.html) - File and Directory Information Exposure \n",
        "disable": false
      },
      {
        "real_name": "javascript:S104",
        "display_name": "JavascriptS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5693",
        "display_name": "JavascriptS5693",
        "severity": "warning",
        "category": "security",
        "rule_title": "Allowing requests with excessive content length is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevents DoS attacks.\n\n## Ask Yourself Whether\n\n  -  size limits are not defined for the different resources of the web application. \n  -  the web application is not protected by [rate limiting](https://en.wikipedia.org/wiki/Rate_limiting) features. \n  -  the web application infrastructure has limited resources. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      -  lower or equal to 8mb for file uploads. \n      -  lower or equal to 2mb for other requests. \n    \nIt is recommended to customize the rule with the limit values that correspond to the web application.\n\n## Sensitive Code Example\n\n[formidable](https://www.npmjs.com/package/formidable) file upload module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) file upload module:\n\n[body-parser](https://www.npmjs.com/package/body-parser) module:\n\n## Compliant Solution\n\n[formidable](https://www.npmjs.com/package/formidable) file upload module:\n\n[multer](https://www.npmjs.com/package/multer) (Express.js middleware) file upload module:\n\n[body-parser](https://www.npmjs.com/package/body-parser) module:\n\n## See\n\n  <li> [Owasp Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html) - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [CWE-770](https://cwe.mitre.org/data/definitions/770.html) - Allocation of Resources Without Limits or Throttling \n  -  [CWE-400](https://cwe.mitre.org/data/definitions/400.html) - Uncontrolled Resource Consumption \n",
        "disable": false
      },
      {
        "real_name": "javascript:S106",
        "display_name": "JavascriptS106",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Standard outputs should not be used directly to log anything",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDebug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [CERT, ERR02-J.](https://wiki.sei.cmu.edu/confluence/x/nzdGBQ) - Prevent exceptions while logging data \n",
        "disable": false
      },
      {
        "real_name": "javascript:S107",
        "display_name": "JavascriptS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S108",
        "display_name": "JavascriptS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty. Moreover `catch` blocks are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S109",
        "display_name": "JavascriptS109",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Magic numbers should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\n\nUsing magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\n\nThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\n\n-1, 0 and 1 are not considered magic numbers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4138",
        "display_name": "JavascriptS4138",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"for of\" should be used with Iterables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the `for of` syntax. Use a\ncounter, and ... well you'll get the right behavior, but your code just isn't as clean or clear.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1301",
        "display_name": "JavascriptS1301",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`switch` statements are useful when there are many different cases depending on the value of the same expression.\n\nFor just one or two cases however, the code will be more readable with `if` statements.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4139",
        "display_name": "JavascriptS4139",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"for in\" should not be used with iterables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the `for of` syntax. Use\n`for in` and you'll iterate the properties, rather than the values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1541",
        "display_name": "JavascriptS1541",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cyclomatic Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2870",
        "display_name": "JavascriptS2870",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"delete\" should not be used on arrays",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `delete` operator can be used to remove a property from any object. Arrays are objects, so the `delete` operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. \n\nThe proper method for removing an element at a certain index would be:\n\n  -  `Array.prototype.splice` - add/remove elements from the array \n  -  `Array.prototype.pop` - add/remove elements from the end of the array \n  -  `Array.prototype.shift` - add/remove elements from the beginning of the array \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S121",
        "display_name": "JavascriptS121",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control structures should use curly braces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CERT, EXP19-C.](https://wiki.sei.cmu.edu/confluence/x/g9YxBQ) - Use braces for the body of an if, for, or while statement \n  -  [CERT, EXP52-J.](https://wiki.sei.cmu.edu/confluence/x/MzZGBQ) - Use braces for the body of an if, for, or while statement \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2871",
        "display_name": "JavascriptS2871",
        "severity": "error",
        "category": "correctness",
        "rule_title": "A compare function should be provided when using \"Array.prototype.sort()\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe default sort order is alphabetic, rather than numeric, regardless of the types in the array. Specifically, even if an array contains only\nnumbers, all values in it will be converted to strings and sorted lexicographically, for an order like this: 1, 15, 2, 20, 5.\n\nFortunately the `sort` method allows you to pass an optional compare function to specify the sort order. When a compare function is\nsupplied, the returned order depends on the return value of the compare function. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S122",
        "display_name": "JavascriptS122",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2077",
        "display_name": "JavascriptS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule's current implementation does not follow variables. It will only detect SQL queries which are formatted directly in the function\ncall.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2990",
        "display_name": "JavascriptS2990",
        "severity": "info",
        "category": "convention",
        "rule_title": "The global \"this\" object should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the keyword `this` is used outside of an object, it refers to the global `this` object, which is the same thing as the\n`window` object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the `this`, or replace\nit with `window`; it will have the same effect and be more readable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2757",
        "display_name": "JavascriptS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-existent operators '=+', '=-' and '=!' should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs (`=+`, `=-` or `=!`) where the reversed, single operator was meant (`+=`,\n`-=` or `!=`) will compile and run, but not produce the expected results.\n\nThis rule raises an issue when `=+`, `=-` and `=!` are used without any space between the two operators and when\nthere is at least one whitespace after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2999",
        "display_name": "JavascriptS2999",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"new\" operators should be used with functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `new` keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n`TypeError` because there won't be a constructor function for the `new` keyword to invoke.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1788",
        "display_name": "JavascriptS1788",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Function parameters with default values should be last",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify\nas many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.\n\nBut all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass `undefined` in order to \"get to\"\nthe non-default parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2755",
        "display_name": "JavascriptS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\n## Noncompliant Code Example\n\n[libxmljs](https://github.com/libxmljs/libxmljs) module:\n\n## Compliant Solution\n\n[libxmljs](https://github.com/libxmljs/libxmljs) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> [OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n  </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3723",
        "display_name": "JavascriptS3723",
        "severity": "info",
        "category": "convention",
        "rule_title": "Trailing commas should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nModern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration\ndoes not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S113",
        "display_name": "JavascriptS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools work better when files end with an empty line.\n\nThis rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "javascript:S117",
        "display_name": "JavascriptS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Variable, property and parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule checks that all variable,\nproperty and parameter names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1874",
        "display_name": "JavascriptS1874",
        "severity": "info",
        "category": "convention",
        "rule_title": "Deprecated APIs should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOnce deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-477](http://cwe.mitre.org/data/definitions/477.html) - Use of Obsolete Functions \n  -  [CERT, MET02-J.](https://wiki.sei.cmu.edu/confluence/x/6TdGBQ) - Do not use deprecated or obsolete classes or methods \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1994",
        "display_name": "JavascriptS1994",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"for\" loop increment clauses should modify the loops' counters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt can be extremely confusing when a `for` loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3499",
        "display_name": "JavascriptS3499",
        "severity": "info",
        "category": "convention",
        "rule_title": "Shorthand object properties should be grouped at the beginning or end of an object declaration",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGrouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1751",
        "display_name": "JavascriptS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n`if` statement should be used instead.\n\nAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested `return`,\n`break` or `throw` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1871",
        "display_name": "JavascriptS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two `cases` in a `switch` statement or two branches in an `if` chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an `if` chain they should\nbe combined, or for a `switch`, one should fall through to the other. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored, as are blocks in a `switch` statement that contain a\nsingle line of code with or without a following `break`.\n\nBut this exception does not apply to `if` chains without `else`-s, or to `switch`-es without default clauses when\nall branches have the same single line of code. In case of `if` chains with `else`-s, or of `switch`-es with default\nclauses, rule {rule:javascript:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1516",
        "display_name": "JavascriptS1516",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multiline string literals should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nContinuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3498",
        "display_name": "JavascriptS3498",
        "severity": "info",
        "category": "convention",
        "rule_title": "Object literal shorthand syntax should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1515",
        "display_name": "JavascriptS1515",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not be defined inside loops",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDefining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3812",
        "display_name": "JavascriptS3812",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Results of \"in\" and \"instanceof\" should be negated rather than operands",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMixing up the order of operations will almost always yield unexpected results.\n\nSimilarly, mis-applied negation will also yield bad results. For instance consider the difference between `!key in dict` and <code>!(key\nin dict)</code>. The first looks for a boolean value (`!key`) in `dict`, and the other looks for a string and inverts the\nresult. `!obj instanceof SomeClass` has the same problem.\n\nThis rule raises an issue when the left operand of an `in` or `instanceof` operator is negated.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1192",
        "display_name": "JavascriptS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Exceptions\n\nTo prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching `/^\\w*$/`.\nString literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. <code>'use\nstrict';</code>.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1764",
        "display_name": "JavascriptS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThe specific case of testing one variable against itself is a valid test for `NaN` and is therefore ignored.\n\nSimilarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. \n\nMoreover comma operator `,` and `instanceof` operator are ignored as there are use-cases when there usage is valid.\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:javascript:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5689",
        "display_name": "JavascriptS5689",
        "severity": "info",
        "category": "security",
        "rule_title": "Disclosing fingerprints from web application technologies is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDisclosing technology fingerprints allows an attacker to gather information about the technologies used to develop the web application and to\nperform relevant security assessments more quickly (like the identification of known vulnerable components).\n\n## Ask Yourself Whether\n\n  -  The `x-powered-by` HTTP header or similar is used by the application. \n  -  Technologies used by the application are confidential and should not be easily guessed. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nIt's recommended to not disclose technologies used on a website, with `x-powered-by` HTTP header for example. \n\nIn addition, it's better to completely disable this HTTP header rather than setting it a random value.\n\n## Sensitive Code Example\n\n[Express.js](https://www.npmjs.com/package/express) name is disclosed by default into the `x-powered-by` HTTP header:\n\n## Compliant Solution\n\n`x-powered-by` HTTP header should be disabled in [Express.js](https://www.npmjs.com/package/express) with\n`app.disable` or with helmet [hidePoweredBy](https://www.npmjs.com/package/helmet) middleware:\n\n## See\n\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html\">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Information Exposure \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1763",
        "display_name": "JavascriptS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`, `break` and `continue`) and `throw` expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores unreachable `break` statements in `switch` clauses.\n\nHoisted variables declarations without initialization are always considered reachable.\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S101",
        "display_name": "JavascriptS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names (and interfaces for TypeScript)\nmatch a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^[A-Z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5443",
        "display_name": "JavascriptS5443",
        "severity": "error",
        "category": "security",
        "rule_title": "Using publicly writable directories is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n`/tmp` in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2012-2451](https://nvd.nist.gov/vuln/detail/CVE-2012-2451) \n  -  [CVE-2015-1838](https://nvd.nist.gov/vuln/detail/CVE-2015-1838) \n\nThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like `/tmp` (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., `TMP` and `TMPDIR`.\n\n  -  `/tmp` \n  -  `/var/tmp` \n  -  `/usr/tmp` \n  -  `/dev/shm` \n  -  `/dev/mqueue` \n  -  `/run/lock` \n  -  `/var/run/lock` \n  -  `/Library/Caches` \n  -  `/Users/Shared` \n  -  `/private/tmp` \n  -  `/private/var/tmp` \n  -  `\\Windows\\Temp` \n  -  `\\Temp` \n  -  `\\TMP` \n\n## Ask Yourself Whether\n\n  -  Files are read from or written into a publicly writable folder \n  -  The application creates files with predictable names into a publicly writable folder \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      -  The generated filename is unpredictable \n      -  The file is readable and writable only by the creating user ID \n      -  The file descriptor is not inherited by child processes \n      -  The file will be destroyed as soon as it is closed \n    \n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n",
        "disable": false
      },
      {
        "real_name": "javascript:S100",
        "display_name": "JavascriptS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Function and method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[a-z][a-zA-Z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1529",
        "display_name": "JavascriptS1529",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Bitwise operators should not be used in boolean contexts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe bitwise operators `&amp;`, `|` can be mistaken for the boolean operators `&amp;&amp;` and `||`.\n\n\nThis rule raises an issue when `&amp;` or `|` is used in a boolean context.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nWhen a file contains other bitwise operations, (`^`, `&lt;&lt;`, `&gt;&gt;&gt;`, `&gt;&gt;`,\n`~`, `&amp;=`, `^=`, `|=`, `&lt;&lt;=`, `&gt;&gt;=`, `&gt;&gt;&gt;=` and\n`&amp;` or `|` used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2737",
        "display_name": "JavascriptS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"catch\" clauses should do more than rethrow",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA `catch` clause that only rethrows the caught exception has the same effect as omitting the `catch` altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1527",
        "display_name": "JavascriptS1527",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"future reserved words\" should not be used as identifiers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier\nadoption of those potential future versions:\n\n  -  `await` \n  -  `class` \n  -  `const` \n  -  `enum` \n  -  `export` \n  -  `extends` \n  -  `implements` \n  -  `import` \n  -  `interface` \n  -  `let` \n  -  `package` \n  -  `private` \n  -  `protected` \n  -  `public` \n  -  `static` \n  -  `super` \n  -  `yield` \n\nUse of these words as identifiers would produce an error in JavaScript `strict` mode code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1528",
        "display_name": "JavascriptS1528",
        "severity": "info",
        "category": "convention",
        "rule_title": "Array constructors should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArray literals should always be preferred to Array constructors.\n\nArray constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:\n\n  -  If the argument is a number and it is a natural number the length will be equal to the value of the argument. \n\n  -  If the argument is a number, but not a natural number an exception will be thrown. \n\n  -  Otherwise the array will have one element with the argument as its value. \n\nNote that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't\ncontain anything, so no callbacks will be applied to the array elements.\n\nFor these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3827",
        "display_name": "JavascriptS3827",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Variables should be defined before being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a non-existent variable is referenced a `ReferenceError` is raised.\n\nDue to the dynamic nature of JavaScript this can happen in a number of scenarios:\n\n  -  When typo was made in a symbol's name. \n  <li> When using variable declared with `let` or `const` before declaration (unlike `var`-declarations, they are not\n  hoisted to the top of the scope). </li>\n  <li> Due to confusion with scopes of `let`- and `const`-declarations (they have block scope, unlike\n  `var`-declarations, having function scope). </li>\n  -  When accessing a property in the wrong scope (e.g. forgetting to specify `this.`). \n\nThis rule does not raise issues on global variables which are defined with `sonar.javascript.globals` and\n`sonar.javascript.environments` properties.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1526",
        "display_name": "JavascriptS1526",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables declared with \"var\" should be declared before they are used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables declared with `var` have the special property that regardless of where they're declared in a function they \"float\" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. \n\nTo keep confusion to a minimum, `var` declarations should happen before they are used for the first time.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2612",
        "display_name": "JavascriptS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose POSIX file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"`others`\" class refers to all users except the owner of the file and the members of the group assigned to this file.\n\nGranting permissions to this group can lead to unintended access to files. \n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\nNode.js [`fs`](https://nodejs.org/api/fs.html)\n\nNode.js [`process.umask`](https://nodejs.org/api/process.html#process_process_umask_mask)\n\n## Compliant Solution\n\nNode.js [`fs`](https://nodejs.org/api/fs.html)\n\nNode.js [`process.umask`](https://nodejs.org/api/process.html#process_process_umask_mask)\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1523",
        "display_name": "JavascriptS1523",
        "severity": "error",
        "category": "security",
        "rule_title": "Dynamically executing code is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExecuting code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2017-9807](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807) \n  -  [CVE-2017-9802](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802) \n\nSome APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon as they also increase the risk of <a\nhref=\"https://www.owasp.org/index.php/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (exemple: XSS\nattack) and have a huge impact on an application's security.\n\nThis rule raises issues on calls to `eval` and `Function` constructor. This rule does not detect code injections. It only\nhighlights the use of APIs which should be used sparingly and very carefully. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  -  the executed code may come from an untrusted source and hasn't been sanitized. \n  -  you really need to run code dynamically. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a [sandboxed](https://en.wikipedia.org/wiki/Sandbox_(computer_security)) environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).\n\nDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\n\nAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\n\n## Sensitive Code Example\n\n## Exceptions\n\nThis rule will not raise an issue when the argument of the `eval` or `Function` is a literal string as it is reasonably\nsafe.\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE CWE-95](http://cwe.mitre.org/data/definitions/95.html) - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3512",
        "display_name": "JavascriptS3512",
        "severity": "info",
        "category": "convention",
        "rule_title": "Template strings should be used instead of concatenation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4721",
        "display_name": "JavascriptS4721",
        "severity": "warning",
        "category": "security",
        "rule_title": "Using shell interpreter when executing OS commands is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nArbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.\n\n## Ask Yourself Whether\n\n  -  OS command name or parameters are user-controlled. \n\nThere is a risk if you answered yes to this question.\n\n## Recommended Secure Coding Practices\n\nUse functions that don't spawn a shell.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  -  [MITRE, CWE-78](http://cwe.mitre.org/data/definitions/78) - Improper Neutralization of Special Elements used in an OS Command \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "javascript:S2424",
        "display_name": "JavascriptS2424",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Built-in objects should not be overridden",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOverriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.\n\nThis rule detects overrides of the following native objects:\n\n  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError </li>\n  -  Numbers and dates - Number, Math, Date \n  -  Text processing - String, RegExp \n  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array </li>\n  -  Keyed collections - Map, Set, WeakMap, WeakSet \n  -  Structured data - ArrayBuffer, DataView, JSON \n  -  Control abstraction objects - Promise \n  -  Reflection - Reflect, Proxy \n  -  Internationalization - Intl \n  -  Non-standard objects - Generator, Iterator, ParallelArray, StopIteration \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1451",
        "display_name": "JavascriptS1451",
        "severity": "error",
        "category": "convention",
        "rule_title": "Track lack of copyright and license headers",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application. \n\nThis rule must be fed with the header text that is expected at the beginning of every file.\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3513",
        "display_name": "JavascriptS3513",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"arguments\" should not be accessed directly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args `function`. \n\nBut just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. \n\nIf you don't want to name arguments explicitly, use the `...` syntax to specify that an a variable number of arguments is expected. Then\ninside the function, you'll be dealing with a first-class array, rather than an array-like structure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1219",
        "display_name": "JavascriptS1219",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"switch\" statements should not contain non-case labels",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\n\n## Noncompliant Code Example\n\nCase 1, the code is syntactically correct but the behavior is not the expected one\n\nCase 2, the code is correct and behaves as expected but is hardly readable \n\n## Compliant Solution\n\nCase 1\n\nCase 2\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3758",
        "display_name": "JavascriptS3758",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Values not convertible to numbers should not be used in numeric comparisons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn a Zen-like manner, `NaN` isn't equal to anything, even itself. So comparisons (`&gt;, &lt;, &gt;=, &lt;=`) where one\noperand is `NaN` or evaluates to `NaN` always return `false`. Specifically, `undefined` and objects that\ncannot be converted to numbers evaluate to `NaN` when used in numerical comparisons.\n\nThis rule raises an issue when there is at least one path through the code where one of the operands to a comparison is `NaN`,\n`undefined` or an `Object` which cannot be converted to a number.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2427",
        "display_name": "JavascriptS2427",
        "severity": "info",
        "category": "correctness",
        "rule_title": "The base should be provided to \"parseInt\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `parseInt` function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3516",
        "display_name": "JavascriptS3516",
        "severity": "error",
        "category": "convention",
        "rule_title": "Function returns should not be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.\n\nThis rule raises an issue when a function contains several `return` statements that all return the same value.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2428",
        "display_name": "JavascriptS2428",
        "severity": "info",
        "category": "convention",
        "rule_title": "Object literal syntax should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nObject literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating\nan empty object, and then giving it properties one by one.\n\nAn issue is raised when the following pattern is met:\n\n  -  An empty object is created. \n  -  A consecutive single-line statement adds a property to the created object. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3514",
        "display_name": "JavascriptS3514",
        "severity": "info",
        "category": "convention",
        "rule_title": "Destructuring syntax should be used for assignments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic. \n\nThis rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3757",
        "display_name": "JavascriptS3757",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Arithmetic operations should not result in \"NaN\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe result of an expression with an arithmetic operator `/, *, %, ++, --, -, +=, -=, *=, /=, %=, +` or unary operator `+, -`\nwhen at least one operand is `Object` or `Undefined` will be always a `NaN` (Not a Number).\n\n## Noncompliant Code Example\n\n## Exceptions\n\n  -  `Date` operands: they are implicitly converted to numbers. \n  -  The binary `+` operator with `Object` operand (concatenation). \n",
        "disable": false
      },
      {
        "real_name": "javascript:S4043",
        "display_name": "JavascriptS4043",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Array-mutating methods should not be used misleadingly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMany of JavaScript's `Array` methods return an altered version of the array while leaving the source array intact. `reverse`\nand `sort` do not fall into this category. Instead, they alter the source array **in addition to** returning the altered version,\nwhich is likely not what was intended.\n\nThis rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original\nvalue is altered.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3402",
        "display_name": "JavascriptS3402",
        "severity": "info",
        "category": "convention",
        "rule_title": "Strings and non-strings should not be added",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse a `+` with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.\n\nThis rule raises an issue when `+` is used with a string and a non-string.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4165",
        "display_name": "JavascriptS4165",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Assignments should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe transitive property says that if `a == b` and `b == c`, then `a == c`. In such cases, there's no point in\nassigning `a` to `c` or vice versa because they're already equivalent. \n\nThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3403",
        "display_name": "JavascriptS3403",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Strict equality operators should not be used with dissimilar types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nComparing dissimilar types using the strict equality operators `===` and `!==` will always return the same value,\nrespectively `false` and `true`, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2432",
        "display_name": "JavascriptS2432",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Setters should not return values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFunctions declared with the `set` keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3524",
        "display_name": "JavascriptS3524",
        "severity": "info",
        "category": "convention",
        "rule_title": "Braces and parentheses should be used consistently with arrow functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.\n\n## Noncompliant Code Example\n\nWith the configured defaults forbidding parentheses\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2310",
        "display_name": "JavascriptS2310",
        "severity": "error",
        "category": "convention",
        "rule_title": "Loop counters should not be assigned to from within the loop body",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLoop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in\nthe loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3760",
        "display_name": "JavascriptS3760",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Arithmetic operators should only have numbers as operands",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExpressions with arithmetic (`/, *, %, ++, --, -, -=, *=, /=, %=, +=, +`), unary (`-`), or comparison operators (<code>&gt;,\n&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  <li> Expressions using the binary `+` operator with at least one `String` operand are ignored because the `+`\n  operator will perform a concatenation in that case. </li>\n  -  Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3525",
        "display_name": "JavascriptS3525",
        "severity": "error",
        "category": "convention",
        "rule_title": "Class methods should be used instead of \"prototype\" assignments",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOriginally JavaScript didn't support `class`es, and class-like behavior had to be kludged using things like `prototype`\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering `prototype` uses should be converted to\ntrue `class`es. The new syntax is more expressive and clearer, especially to those with experience in other languages.\n\nSpecifically, with ES2015, you should simply declare a `class` and define its methods inside the class declaration.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4619",
        "display_name": "JavascriptS4619",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"in\" should not be used on arrays",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `in` operator used on an array is valid but the code will likely not have the expected behavior. The `in` operator deals\nwith the indexes of the array, not with the values.\n\nIf checking for an array slot is indeed desired, using `hasOwnProperty` makes the code intention clearer.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1226",
        "display_name": "JavascriptS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able\nto tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some\ndevelopers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could\nconfuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1105",
        "display_name": "JavascriptS1105",
        "severity": "info",
        "category": "convention",
        "rule_title": "An open curly brace should be located at the end of a line",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention\nsetup in parameter:\n\n  -  [1tbs](https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style) (default) \n  -  [allman](https://en.wikipedia.org/wiki/Indentation_style#Allman_style) \n  -  [stroustrup](https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup) \n\n## Noncompliant Code Example\n\nUsing the parameter default (1tbs):\n\n## Compliant Solution\n\n## Exceptions\n\n  -  Object literals appearing as arguments can start on their own line. \n\n  -  When blocks are inlined (left and right curly braces on the same line), no issue is triggered. \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1313",
        "display_name": "JavascriptS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3854",
        "display_name": "JavascriptS3854",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"super()\" should be invoked appropriately",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are situations where `super()` must be invoked and situations where `super()` cannot be invoked.\n\nThe basic rule is: a constructor in a non-derived class cannot invoke `super()`; a constructor in a derived class must invoke\n`super()`.\n\nFurthermore:\n\n  -  `super()` must be invoked before the `this` and `super` keywords can be used. \n  -  `super()` must be invoked with the same number of arguments as the base class' constructor. \n  -  `super()` can only be invoked in a constructor - not in any other method. \n  -  `super()` cannot be invoked multiple times in the same constructor. \n\n### Known Limitations\n\n  -  False negatives: some issues are not raised if the base class is not defined in the same file as the current class. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3972",
        "display_name": "JavascriptS3972",
        "severity": "error",
        "category": "convention",
        "rule_title": "Conditionals should start on new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an `if` and its\nresulting **then** statement. However, when an `if` is placed on the same line as the closing `}` from a preceding\n**then**, **else** or **else if** part, it is either an error - `else` is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4822",
        "display_name": "JavascriptS4822",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Promise rejections should not be caught by 'try' block",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn exception (including `reject`) thrown by a promise will not be caught by a nesting `try` block, due to the asynchronous\nnature of execution. Instead, use `catch` method of `Promise` or wrap it inside `await` expression.\n\nThis rule reports `try-catch` statements containing nothing else but call(s) to a function returning a `Promise` (thus it's\nless likely that `catch` is intended to catch something else than `Promise` rejection).\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3973",
        "display_name": "JavascriptS3973",
        "severity": "error",
        "category": "convention",
        "rule_title": "A conditionally executed single line should be denoted by indentation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4144",
        "display_name": "JavascriptS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nFunctions with fewer than 3 lines are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1439",
        "display_name": "JavascriptS1439",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Only \"while\", \"do\", \"for\" and \"switch\" statements should be labelled",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement or block of statements can be identified by a label, but those labels should be used only on `while`,\n`do-while`, `for` and `switch` statements. Using labels in any other context leads to unstructured, confusing code.\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1438",
        "display_name": "JavascriptS1438",
        "severity": "info",
        "category": "convention",
        "rule_title": "Statements should end with semicolons",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn JavaScript, the semicolon (`;`) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3616",
        "display_name": "JavascriptS3616",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Comma and logical OR operators should not be used in switch cases",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe comma operator (`,`) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a `switch` `case`. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.\n\nSimilarly the logical OR operator (`||`) will not work in a `switch` `case`, only the first argument will be\nconsidered at execution time.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3735",
        "display_name": "JavascriptS3735",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"void\" should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `void` operator evaluates its argument and unconditionally returns `undefined`. It can be useful in pre-ECMAScript 5\nenvironments, where `undefined` could be reassigned, but generally, its use makes code harder to understand.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is raised when `void 0` is used in place of `undefined`. \n\nNo issue is also raised when `void` is used before immediately invoked function expressions.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1314",
        "display_name": "JavascriptS1314",
        "severity": "error",
        "category": "convention",
        "rule_title": "Octal values should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, DCL18-C.](https://wiki.sei.cmu.edu/confluence/x/atYxBQ) - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  -  [CERT, DCL50-J.](https://wiki.sei.cmu.edu/confluence/x/7DZGBQ) - Use visually distinct identifiers \n",
        "disable": false
      },
      {
        "real_name": "javascript:S4140",
        "display_name": "JavascriptS4140",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sparse arrays should not be declared",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn array declared with missing (\"sparse\") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert\nthe missing value and forgot.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4143",
        "display_name": "JavascriptS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection elements should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4830",
        "display_name": "JavascriptS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nIt's not recommended to reinvent the wheel by implementing custom certificate chain validation.\n\nTLS libraries provide built-in certificate validation functions that should be used.\n\n## Noncompliant Code Example\n\nThere is no way to disable certificate verification in tls, https and request modules but it is possible to not reject request when verification\nfails.\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## Compliant Solution\n\n[https](https://nodejs.org/api/https.html) built-in module:\n\n[tls](https://nodejs.org/api/tls.html) built-in module:\n\n[request](https://www.npmjs.com/package/request) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n",
        "disable": false
      },
      {
        "real_name": "javascript:S888",
        "display_name": "JavascriptS888",
        "severity": "error",
        "category": "convention",
        "rule_title": "Equality operators should not be used in \"for\" loop termination conditions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTesting `for` loop termination using an equality operator (`==` and `!=`) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\n\n  -  starts below the ending value and is incremented by 1 on each iteration. \n  -  starts above the ending value and is decremented by 1 on each iteration. \n\nEquality operators are also ignored when the test is against `null`.\n\n## See\n\n  -  [MITRE, CWE-835](http://cwe.mitre.org/data/definitions/835) - Loop with Unreachable Exit Condition ('Infinite Loop') \n  -  [CERT, MSC21-C.](https://wiki.sei.cmu.edu/confluence/x/x9YxBQ) - Use robust loop termination conditions \n",
        "disable": false
      },
      {
        "real_name": "javascript:S1321",
        "display_name": "JavascriptS1321",
        "severity": "info",
        "category": "correctness",
        "rule_title": "\"with\" statements should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of the `with` keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n`with`.\n\nUsing `with` allows a short-hand access to an object's properties - assuming they're already set. But use `with` to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of `with` are entirely dependent on the object passed to it, `with` can be dangerously\nunpredictable, and should never be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3500",
        "display_name": "JavascriptS3500",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Attempts should not be made to update \"const\" variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables declared with `const` cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3863",
        "display_name": "JavascriptS3863",
        "severity": "info",
        "category": "convention",
        "rule_title": "Imports from the same modules should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMultiple imports from the same module should be merged together to improve readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3984",
        "display_name": "JavascriptS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Errors should not be created without being thrown",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Error` without actually throwing it is useless and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1441",
        "display_name": "JavascriptS1441",
        "severity": "info",
        "category": "convention",
        "rule_title": "Quotes for string literals should be used consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule checks that all string literals use the same kind of quotes.\n\n## Noncompliant Code Example\n\nUsing the parameter default (forcing single quotes):\n\n## Compliant Solution\n\n## Exceptions\n\nStrings that contain quotes are ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3981",
        "display_name": "JavascriptS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection sizes and array length comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always `true`. Similarly testing that it is less than zero will always return\n`false`. Perhaps the intent was to check the non-emptiness of the collection or array instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S1440",
        "display_name": "JavascriptS1440",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `==` and `!=` operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates `' \\t\\r\\n' == 0` as `true`.\n\nIt is best to always use the side-effect-less `===` and `!==` operators instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nEven if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of `==` or\n`!=` is tolerated in such context. In the following case, if `foo` hasn't been initialized, its default value is not\n`null` but `undefined`. Nevertheless `undefined == null`, so JavaScript developers get the expected behavior.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4158",
        "display_name": "JavascriptS4158",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Empty collections should not be accessed or iterated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally\nomitted or the developer doesn't understand the situation.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "javascript:S3626",
        "display_name": "JavascriptS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements, such as `return`, `break` and `continue` let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`break` and `return` inside `switch` statement are ignored, because they are often used for consistency.\n`continue` with label is also ignored, because label is usually used for clarity. Also a jump statement being a single statement in a block\nis ignored.\n",
        "disable": false
      },
      {
        "real_name": "javascript:S5247",
        "display_name": "JavascriptS5247",
        "severity": "warning",
        "category": "security",
        "rule_title": "Disabling auto-escaping in template engines is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo reduce the risk of cross-site scripting attacks, templating systems, such as `Twig`, `Django`, `Smarty`,\n`Groovy's template engine`, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).\n\nAuto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into [html entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity)) will not be relevant\nwhen variables are used in a [html attribute](https://en.wikipedia.org/wiki/HTML_attribute) because '`:`' character is not\nescaped and thus an attack as below is possible:\n\n## Ask Yourself Whether\n\n  <li> Templates are used to render web content and\n    <ul>\n      -  dynamic variables in templates come from untrusted locations or are user-controlled inputs \n      -  there is no local mechanism in place to sanitize or validate the inputs. \n    \nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nEnable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.\n\n## Sensitive Code Example\n\n[mustache.js](https://www.npmjs.com/package/mustache) template engine:\n\n[handlebars.js](https://www.npmjs.com/package/handlebars) template engine:\n\n[markdown-it](https://www.npmjs.com/package/markdown-it) markup language parser:\n\n[marked](https://www.npmjs.com/package/marked) markup language parser:\n\n[kramed](https://www.npmjs.com/package/kramed) markup language parser:\n\n## Compliant Solution\n\n[mustache.js](https://www.npmjs.com/package/mustache) template engine:\n\n[handlebars.js](https://www.npmjs.com/package/handlebars) template engine:\n\n[markdown-it](https://www.npmjs.com/package/markdown-it) markup language parser:\n\n[marked](https://www.npmjs.com/package/marked) markup language parser:\n\n[kramed](https://www.npmjs.com/package/kramed) markup language parser:\n\n## See\n\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [MITRE, CWE-79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> [MITRE, CWE-80](https://cwe.mitre.org/data/definitions/80.html) - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> [MITRE, CWE-83](https://cwe.mitre.org/data/definitions/83.html) - Improper Neutralization of Script in Attributes in a Web Page\n  </li>\n  -  [MITRE, CWE-84](https://cwe.mitre.org/data/definitions/84.html) - Improper Neutralization of Encoded URI Schemes in a Web Page \n",
        "disable": false
      },
      {
        "real_name": "javascript:S3504",
        "display_name": "JavascriptS3504",
        "severity": "error",
        "category": "convention",
        "rule_title": "Variables should be declared with \"let\" or \"const\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nECMAScript 2015 introduced the `let` and `const` keywords for block-scope variable declaration. Using `const`\ncreates a read-only (constant) variable.\n\nThe distinction between the variable types created by `var` and by `let` is significant, and a switch to `let`\nwill help alleviate many of the variable scope issues which have caused confusion in the past. \n\nBecause these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from `var` to `let`, and you should be aware that they raise `SyntaxError`s\nin pre-ECMAScript 2015 environments.\n\nThis rule raises an issue when `var` is used instead of `const` or `let`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4030",
        "display_name": "JavascriptS4030",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collection and array contents should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the\ncollection moot, or an access is missing.\n\nThis rule raises an issue when no methods are called on a collection other than those that add or remove values.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S4275",
        "display_name": "JavascriptS4275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Getters and setters should access the expected fields",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGetters and setters provide a way to enforce encapsulation by providing `public` methods that give controlled access to\n`private` fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed\ngetters and setters, which can result in the wrong field being accessed by a getter or setter.\n\nThis rule raises an issue in any of these cases:\n\n  -  A setter does not update the field with the corresponding name. \n  -  A getter does not access the field with the corresponding name. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "javascript:S2092",
        "display_name": "JavascriptS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content) or not (ie\n  HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## Compliant Solution\n\n[cookie-session](https://www.npmjs.com/package/cookie-session) module:\n\n[express-session](https://www.npmjs.com/package/express-session) module:\n\n[cookies](https://www.npmjs.com/package/cookies) module:\n\n[csurf](https://www.npmjs.com/package/csurf) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "javascript:S5122",
        "display_name": "JavascriptS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\n[nodejs http](https://nodejs.org/api/http.html) built-in module:\n\n[Express.js](https://www.npmjs.com/package/express) framework with [cors middleware](https://www.npmjs.com/package/cors):\n\n## Compliant Solution\n\n[nodejs http](https://nodejs.org/api/http.html) built-in module:\n\n[Express.js](https://www.npmjs.com/package/express) framework with [cors middleware](https://www.npmjs.com/package/cors):\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "common-css:DuplicatedBlocks",
        "display_name": "CommonCssDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-css:FailedUnitTests",
        "display_name": "CommonCssFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-css:SkippedUnitTests",
        "display_name": "CommonCssSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-css:InsufficientCommentDensity",
        "display_name": "CommonCssInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-css:InsufficientLineCoverage",
        "display_name": "CommonCssInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-css:InsufficientBranchCoverage",
        "display_name": "CommonCssInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "python:S1134",
        "display_name": "PythonS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "python:S5332",
        "display_name": "PythonS5332",
        "severity": "error",
        "category": "security",
        "rule_title": "Using clear-text protocols is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClear-text protocols as `ftp`, `telnet` or non secure `http` are lacking encryption of transported data. They are\nalso missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify\nor corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:\n\n  -  Sensitive data exposure \n  -  Traffic redirected to a malicious endpoint \n  -  Malware infected software update or installer \n  -  Execution of client side code \n  -  Corruption of critical information \n\nNote also that using the `http` protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browser</a>. \n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-6169](https://nvd.nist.gov/vuln/detail/CVE-2019-6169) \n  -  [CVE-2019-12327](https://nvd.nist.gov/vuln/detail/CVE-2019-12327) \n  -  [CVE-2019-11065](https://nvd.nist.gov/vuln/detail/CVE-2019-11065) \n\n## Ask Yourself Whether\n\n  -  The confidentiality and integrity of data is necessary in the context of the web application. \n  -  The data is exchanged on an exposed network (Internet, public network etc). \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use `ssh` as an alternative to `telnet` \n  -  Use `sftp`, `scp` or `ftps` instead of `ftp` \n  -  Use `https` instead of `http` \n  -  Use `SMTP` over `SSL/TLS` or `SMTP` with `STARTTLS` instead of clear-text SMTP \n\nIt is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire\napplication or system. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or `localhost` \n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-200](https://cwe.mitre.org/data/definitions/200.html) - Exposure of Sensitive Information to an Unauthorized Actor \n  -  [MITRE, CWE-319](https://cwe.mitre.org/data/definitions/319) - Cleartext Transmission of Sensitive Information \n  -  [Google, Moving towards more secure web](https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html) \n  -  [Mozilla, Deprecating non secure http](https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/) \n",
        "disable": false
      },
      {
        "real_name": "python:S112",
        "display_name": "PythonS112",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"Exception\" and \"BaseException\" should not be raised",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRaising instances of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception) and <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\">`BaseException`</a> will have a negative impact on any code trying\nto catch these exceptions.\n\nFirst, the only way to handle differently multiple Exceptions is to check their message, which is error-prone and difficult to maintain.\n\nWhat's more, it becomes difficult to catch only your exception. The best practice is to catch only exceptions which require a specific handling.\nWhen you raise `Exception` or `BaseException` in a function the caller will have to add an `except Exception` or\n`except BaseException` and re-raise all exceptions which were unintentionally caught. This can create tricky bugs when the caller forgets\nto re-raise exceptions such as `SystemExit` and the software cannot be stopped.\n\nIt is recommended to either:\n\n  <li> raise a more specific [Built-in exception](https://docs.python.org/3/library/exceptions.html) when one matches. For example\n  `TypeError` should be raised when the type of a parameter is not the one expected. </li>\n  <li> create a custom exception class deriving from `Exception` or one of its subclasses. A common practice for libraries is to have one\n  custom root exception class from which every other custom exception class inherits. It enables other projects using this library to catch all errors\n  coming from the library with a single \"except\" statement </li>\n\nThis rule raises an issue when `Exception` or `BaseException` are raised.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PEP 352 - [Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) \n  -  Python Documentation - [Built-in exceptions](https://docs.python.org/3/library/exceptions.html#BaseException) \n  -  [MITRE, CWE-397](http://cwe.mitre.org/data/definitions/397.html) - Declaration of Throws for Generic Exception \n  -  [CERT, ERR07-J.](https://wiki.sei.cmu.edu/confluence/x/_DdGBQ) - Do not throw RuntimeException, Exception, or Throwable \n\n## See\n\n  -  [MITRE, CWE-397](http://cwe.mitre.org/data/definitions/397.html) - Declaration of Throws for Generic Exception \n  -  [CERT, ERR07-J.](https://wiki.sei.cmu.edu/confluence/x/_DdGBQ) - Do not throw RuntimeException, Exception, or Throwable \n",
        "disable": false
      },
      {
        "real_name": "python:S2068",
        "display_name": "PythonS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "python:S1131",
        "display_name": "PythonS1131",
        "severity": "info",
        "category": "convention",
        "rule_title": "Lines should not end with trailing whitespaces",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTrailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.\n\nIf you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. \n",
        "disable": false
      },
      {
        "real_name": "python:BackticksUsage",
        "display_name": "PythonBackticksusage",
        "severity": "error",
        "category": "convention",
        "rule_title": "Backticks should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBackticks are a deprecated alias for `repr()`. Don't use them any more, the syntax was removed in Python 3.0.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S4487",
        "display_name": "PythonS4487",
        "severity": "error",
        "category": "convention",
        "rule_title": "Unread \"private\" attributes should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPrivate attributes which are written but never read are a clear case of dead store. Changing their value is useless and most probably indicates a\nserious error in the code.\n\nPython has no real private attribute. Every attribute is accessible. There are however two conventions indicating that an attribute is not meant to\nbe \"public\":\n\n  <li> attributes with a name starting with a single underscore (ex: `_myattribute`) should be seen as non-public and might change without\n  prior notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it\n  should be done with caution. </li>\n  <li> \"class-private\" attributes have a name which starts with at least two underscores and ends with at most one underscore. These attribute's names\n  will be automatically mangled to avoid collision with subclasses' attributes. For example `__myattribute` will be renamed as\n  `_classname__myattribute`, where `classname` is the attribute's class name without its leading underscore(s). They shouldn't\n  be used outside of the class defining the attribute. </li>\n\nThis rule raises an issue when a class-private attribute (two leading underscores, max one underscore at the end) is never read inside the class.\nIt optionally raises an issue on unread attributes prefixed with a single underscore. Both class attribute and instance attributes will raise an\nissue.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation – Private Variables](https://docs.python.org/3.8/tutorial/classes.html#private-variables) \n  -  [PEP 8 – Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance) \n",
        "disable": false
      },
      {
        "real_name": "python:ParsingError",
        "display_name": "PythonParsingerror",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Python parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "python:LineLength",
        "display_name": "PythonLinelength",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "python:S1656",
        "display_name": "PythonS1656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Variables should not be self-assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S905",
        "display_name": "PythonS905",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Non-empty statements should change control flow or have at least one side-effect",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAny statement, other than a `pass`, `...` (ellipsis) or an empty statement (i.e. a single semicolon \"`;`\"), which\nhas no side effect and does not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.\n\n## Noncompliant Code Example\n\n## Exceptions\n\n**Strings**\n\nSome projects use string literals as comments. By default, this rule will not raise an issue on these strings. Reporting on string literals can be\nenabled by setting the rule parameter \"reportOnStrings\" to \"true\".\n\n**Operators**\n\nBy default, this rule considers that no arithmetic operator has a side effect. Some rare projects redefine operators and add a side effect. You can\nlist such operators in the rule parameter \"ignoredOperators\".\n\n## See\n\n  -  [MITRE, CWE-482](http://cwe.mitre.org/data/definitions/482) - Comparing instead of Assigning \n",
        "disable": false
      },
      {
        "real_name": "python:S104",
        "display_name": "PythonS104",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Files should not have too many lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\n",
        "disable": false
      },
      {
        "real_name": "python:S107",
        "display_name": "PythonS107",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions, methods and lambdas should not have too many parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\n\n## Noncompliant Code Example\n\nWith a maximum number of 4 parameters:\n\n## Compliant Solution\n\n## Exceptions\n\nThe first argument of non-static methods, i.e. `self` or `cls`, is not counted as it is mandatory and it is passed\nautomatically.\n",
        "disable": false
      },
      {
        "real_name": "python:S108",
        "display_name": "PythonS108",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Nested blocks of code should not be left empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nWhen a block contains a comment, this block is not considered to be empty.\n",
        "disable": false
      },
      {
        "real_name": "python:S2115",
        "display_name": "PythonS2115",
        "severity": "error",
        "category": "security",
        "rule_title": "A secure password should be used when connecting to a database",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen relying on the password authentication mode for the database connection, a secure password should be chosen.\n\nThis rule raises an issue when an empty password is used.\n\n## Noncompliant Code Example\n\nFlask-SQLAlchemy\n\nDjango\n\nmysql/mysql-connector-python\n\n## Compliant Solution\n\nFlask-SQLAlchemy\n\nDjango\n\nmysql/mysql-connector-python\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A2](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html) - Broken\n  Authentication </li>\n  <li> [OWASP Top 10 2017 Category A3](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data\n  Exposure </li>\n  -  [MITRE, CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n",
        "disable": false
      },
      {
        "real_name": "python:S1542",
        "display_name": "PythonS1542",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Function names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default provided regular expression: `^[a-z_][a-z0-9_]*$`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5864",
        "display_name": "PythonS5864",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Type checks shouldn't be confusing",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nChecking that variable X has type T with [type annotations](https://docs.python.org/3/library/typing.html) implies that X's value is of\ntype T or a subtype of T. After such a check, it is a good practice to limit actions on X to those allowed by type T, even if a subclass of T allows\ndifferent actions. Doing otherwise will confuse your fellow developers.\n\nJust to be clear, it is common in python to perform an action without checking first if it is possible (see <a\nhref=\"https://docs.python.org/3/glossary.html#term-eafp\">\"Easier to ask for forgiveness than permission.\"</a>). However when type checks are\nperformed, they should not contradict the following actions.\n\nThis rule raises an issue when an action performed on a variable might be possible, but it contradicts a previous type check. The list of checked\nactions corresponds to rules {rule:python:S2159}, {rule:python:S3403}, {rule:python:S5607}, {rule:python:S5756}, {rule:python:S5644},\n{rule:python:S3862}, {rule:python:S5797}, {rule:python:S5795} and {rule:python:S5632}. These other rules only detect cases where the type of a\nvariable is certain, i.e. it cannot be a subclass.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - `isinstance` function](https://docs.python.org/3/library/functions.html#isinstance) \n  -  [Python glossary - \"Easier to ask for forgiveness than permission.\"](https://docs.python.org/3/glossary.html#term-eafp) \n",
        "disable": false
      },
      {
        "real_name": "python:S1144",
        "display_name": "PythonS1144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused class-private methods should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n\"Class-Private\" methods that are never executed inside their enclosing class are dead code: unnecessary, inoperative code that should be removed.\nCleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being\nintroduced.\n\nPython has no real private methods. Every method is accessible. There are however two conventions indicating that a method is not meant to be\n\"public\":\n\n  <li> methods with a name starting with a single underscore (ex: `_mymethod`) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" methods have a name which starts with at least two underscores and ends with at most one underscore. These methods' names will\n  be automatically mangled to avoid collision with subclasses' methods. For example `__mymethod` will be renamed as\n  `_classname__mymethod`, where `classname` is the method's class name without its leading underscore(s). These methods\n  shouldn't be used outside of their enclosing class. </li>\n\nThis rule raises an issue when a class-private method (two leading underscores, max one underscore at the end) is never called inside the class.\nClass methods, static methods and instance methods will all raise an issue.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation – Private Variables](https://docs.python.org/3.8/tutorial/classes.html#private-variables) \n  -  [PEP8 – Designing for Inheritance](https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance) \n",
        "disable": false
      },
      {
        "real_name": "python:S1143",
        "display_name": "PythonS1143",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Break, continue and return statements should not occur in \"finally\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing `return`, `break` or `continue` in a `finally` block suppresses the propagation of any unhandled\nexception which was raised in the `try`, `else` or `except` blocks. It will also ignore their return statements.\n\n`[SystemExit](https://docs.python.org/3/library/exceptions.html#SystemExit)` is raised when `sys.exit()` is\ncalled. `[KeyboardInterrupt](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt)` is raised when the user asks\nthe program to stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops. It is ok to catch them when\na clean-up is necessary but they should be raised again immediately. They should never be ignored.\n\nIf you need to ignore every other exception you can simply catch the `Exception` class. However you should be very careful when you do\nthis as it will ignore other important exceptions such as <code><a\nhref=\"https://docs.python.org/3/library/exceptions.html#MemoryError\">MemoryError</a></code>\n\nIn python 2 it is possible to raise old style classes. You can use a bare `except:` statement to catch every exception. Remember to\nstill reraise `SystemExit` and `KeyboardInterrupt`.\n\nThis rule raises an issue when a jump statement (`break`, `continue`, `return`) would force the control flow to\nleave a finally block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python documentation - [the `try` statement](https://docs.python.org/3/reference/compound_stmts.html#except) \n",
        "disable": false
      },
      {
        "real_name": "python:S1142",
        "display_name": "PythonS1142",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions should not contain too many return statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n",
        "disable": false
      },
      {
        "real_name": "python:PreIncrementDecrement",
        "display_name": "PythonPreincrementdecrement",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Increment and decrement operators should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPython has no pre/post increment/decrement operator. For instance, `x++` and `x--` will fail to parse. More importantly,\n`++x` and `--x` will do nothing. To increment a number, simply write `x += 1`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2077",
        "display_name": "PythonS2077",
        "severity": "warning",
        "category": "security",
        "rule_title": "Formatting SQL queries is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn't detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.\n\n## Ask Yourself Whether\n\n  -  Some parts of the query come from untrusted values (like user inputs). \n  -  The query is repeated/duplicated in other parts of the code. \n  -  The application must support different types of relational databases. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Use <a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">parameterized queries, prepared statements, or stored\n  procedures</a> and bind variables to SQL query parameters. </li>\n  -  Consider using ORM frameworks if there is a need to have an abstract layer to access data. \n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A1](https://www.owasp.org/index.php/Top_10-2017_A1-Injection) - Injection \n  <li> [MITRE, CWE-89](https://cwe.mitre.org/data/definitions/89) - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  -  [MITRE, CWE-564](https://cwe.mitre.org/data/definitions/564.html) - SQL Injection: Hibernate \n  -  [MITRE, CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation \n  <li> [MITRE, CWE-943](https://cwe.mitre.org/data/definitions/943.html) - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  -  [CERT, IDS00-J.](https://wiki.sei.cmu.edu/confluence/x/ITdGBQ) - Prevent SQL injection \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, [Potential SQL/JDOQL Injection (JDO)](https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO), <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S2638",
        "display_name": "PythonS2638",
        "severity": "error",
        "category": "convention",
        "rule_title": "Method overrides should not change contracts",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause a subclass instance may be used as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract\nthat relate to the Liskov Substitution Principle. Specifically, an overriding method should be callable with the same parameters as the overriden\none.\n\nThe following modifications are ok:\n\n  -  Adding an optional parameter, i.e. with a default value, as long as they don't change the order of positional parameters. \n  -  Renaming a positional-only parameter. \n  -  Reordering keyword-only parameters. \n  -  Adding a default value to an existing parameter. \n  -  Changing the default value of an existing parameter. \n  <li> Extend the ways a parameter can be provided, i.e. change a keyword-only or positional-only parameter to a keyword-or-positional parameter. This\n  is only true if the order of positional parameters doesn't change. New positional parameters should be placed at the end. </li>\n  -  Adding a vararg parameter (`*args`). \n  -  Adding a keywords parameter (`**kwargs`). \n\nThe following modifications are not ok:\n\n  -  Removing parameters, even when they have default values. \n  -  Adding mandatory parameters, i.e. without a default value. \n  -  Removing the default value of a parameter. \n  -  Reordering parameters, except when they are keyword-only parameters. \n  <li> Removing some ways of providing a parameter. If a parameter could be passed as keyword it should still be possible to pass it as keyword, and\n  the same is true for positional parameters. </li>\n  -  Removing a vararg parameter (`*args`). \n  -  Removing a keywords parameter (`**kwargs`). \n\nThis rule raises an issue when the signature of an overriding method does not accept the same parameters as the overriden one. Only instance\nmethods are considered, class methods and static methods are ignored.\n\n## Noncompliant Code Example:\n\n## Compliant Solution:\n\n## Exceptions\n\nIn theory renaming parameters also breaks Liskov Substitution Principle. Arguments can't be passed via keyword arguments anymore. However, <a\nhref=\"https://www.python.org/dev/peps/pep-0570/#consistency-in-subclasses\">as PEP-570 says</a>, it is common to rename parameters when it improves\ncode readability and when arguments are always passed by position.\n\n\"Positional-Only Parameters\" were introduced in python 3.8 to solve this problem. As most programs will need to support older versions of python,\nthis rule won't raise an issue on renamed parameters.\n\n## See\n\n  -  [Wikipedia - Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle) \n  -  Python Enhancement Proposal (PEP) 3102 - [Keyword-Only Arguments](https://www.python.org/dev/peps/pep-3102/) \n  -  Python Enhancement Proposal (PEP) 570 - [Python Positional-Only Parameters](https://www.python.org/dev/peps/pep-0570/) \n",
        "disable": false
      },
      {
        "real_name": "python:S3329",
        "display_name": "PythonS3329",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher Block Chaining IV's should be unpredictable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is used to randomize the encryption, ie under a given\nkey the same plaintext doesn't always produce the same ciphertext. The IV doesn't need to be secret but should be unpredictable to avoid\n\"Chosen-Plaintext Attack\".\n\nTo generate Initialization Vectors, NIST recommends to use a secure random number generator.\n\n## Noncompliant Code Example\n\nFor [PyCryptodome](https://github.com/Legrandin/pycryptodome) module:\n\nFor [cryptography](https://github.com/pyca/cryptography) module:\n\n## Compliant Solution\n\nFor [PyCryptodome](https://github.com/Legrandin/pycryptodome) module:\n\nFor [cryptography](https://github.com/pyca/cryptography) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-329](http://cwe.mitre.org/data/definitions/329) - CWE-329: Not Using an Unpredictable IV with CBC Mode \n  -  [MITRE, CWE-330](http://cwe.mitre.org/data/definitions/330) - Use of Insufficiently Random Values \n  <li> [NIST, SP-800-38A](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf) - Recommendation for Block Cipher\n  Modes of Operation </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S2757",
        "display_name": "PythonS2757",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"=+\" should not be used instead of \"+=\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of operators pairs ( `=+` or `=-`) where the reversed, single operator was meant (`+=` or `-=`)\nwill run fine, but not produce the expected results.\n\nThis rule raises an issue when `=+` or `=-` is used without any spacing between the two operators and when there is at least\none whitespace character after.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5747",
        "display_name": "PythonS5747",
        "severity": "error",
        "category": "convention",
        "rule_title": "Bare \"raise\" statements should only be used in \"except\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA bare `raise` statement, i.e. a `raise` with no exception provided, will re-raise the last active exception in the current\nscope. If the \"raise\" statement is not in an `except` or `finally` block, no exception is active and a `RuntimeError`\nis raised instead.\n\nIf the bare `raise` statement is in a function called in an `except` statement, the exception caught by the\n`except` will be raised. This works but is hard to understand and maintain. Nothing indicates in the parent `except` that the\nexception will be reraised, and nothing prevents a developer from calling the function in another context.\n\nNote also that using a bare `raise` in a `finally` block only works when an exception is active, i.e. when an exception from\nthe `try` block is not caught or when an exception is raised by an `except` block. It will fail in any other case and should not\nbe relied upon. This code smell is handled by rule S5704.\n\nThis rule raises an exception when a bare `raise` statement is not in an `except` or `finally` block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python Documentation - [The `raise` statement](https://docs.python.org/3/reference/simple_stmts.html#raise) \n",
        "disable": false
      },
      {
        "real_name": "python:S1700",
        "display_name": "PythonS1700",
        "severity": "warning",
        "category": "convention",
        "rule_title": "A field should not duplicate the name of its containing class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.\n\nBest practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2755",
        "display_name": "PythonS2755",
        "severity": "error",
        "category": "security",
        "rule_title": "XML parsers should not be vulnerable to XXE attacks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[XML specification](https://www.w3.org/TR/xml/) allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or [external](https://www.w3.org/TR/xml/#sec-external-ent) (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.\n\nExample in this XML document, an external entity read the /etc/passwd file:\n\nIn this XSL document, network access is allowed which can lead to SSRF vulnerabilities:\n\nIt is recommended to disable access to external entities and network access in general.\n\n## Noncompliant Code Example\n\n[lxml](https://lxml.de/) module:\n\n  -  When parsing XML: \n\n  -  When validating XML: \n\n  -  When transforming XML: \n\n[xml.sax](https://docs.python.org/3/library/xml.sax.html) module:\n\n## Compliant Solution\n\n[lxml](https://lxml.de/) module:\n\n  -  When parsing XML, disable `resolve_entities` and **network access**: \n\n  <li> When validating XML (note that network access [cannot be completely disabled](https://bugs.launchpad.net/lxml/+bug/1234114) when\n  calling XMLSchema): </li>\n\n  -  When transforming XML, disable access to network and file system: \n\nTo prevent xxe attacks with [xml.sax](https://docs.python.org/3/library/xml.sax.html) module (for <a\nhref=\"https://docs.python.org/3/library/xml.html#xml-vulnerabilities\">other security reasons</a> than XXE, xml.sax is not recommended):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A4](https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)) - XML External Entities\n  (XXE) </li>\n  <li> [OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n  </li>\n  -  [MITRE, CWE-611](http://cwe.mitre.org/data/definitions/611.html) - Information Exposure Through XML External Entity Reference \n  -  [MITRE, CWE-827](http://cwe.mitre.org/data/definitions/827.html) - Improper Control of Document Type Definition \n",
        "disable": false
      },
      {
        "real_name": "python:S113",
        "display_name": "PythonS113",
        "severity": "info",
        "category": "convention",
        "rule_title": "Files should contain an empty newline at the end",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSome tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.\n\nFor example, a Git diff looks like this if the empty line is missing at the end of the file:\n",
        "disable": false
      },
      {
        "real_name": "python:S116",
        "display_name": "PythonS116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Field names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith the default regular expression `^[_a-z][_a-z0-9]*$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:ExecStatementUsage",
        "display_name": "PythonExecstatementusage",
        "severity": "error",
        "category": "convention",
        "rule_title": "The \"exec\" statement should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUse of the `exec` statement could be dangerous, and should be avoided. Moreover, the `exec` statement was removed in Python\n3.0. Instead, the built-in `exec()` function can be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S117",
        "display_name": "PythonS117",
        "severity": "info",
        "category": "convention",
        "rule_title": "Local variable and function parameter names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\n\n## Exceptions\n\nLoop counters are ignored by this rule.\n",
        "disable": false
      },
      {
        "real_name": "python:S2190",
        "display_name": "PythonS2190",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Recursion should not be infinite",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRecursion happens when control enters a loop that has no exit. This can happen when a method invokes itself or when a pair of methods invoke each\nother. It can be a useful tool, but unless the method includes a provision to break out of the recursion and `return`, the recursion will\ncontinue until the stack overflows and the program crashes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5953",
        "display_name": "PythonS5953",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Variables, classes and functions should be either defined or imported",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables, Classes and functions should not be undefined, otherwise the code will fail with a NameError.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3776",
        "display_name": "PythonS3776",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cognitive Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.\n\n## See\n\n  -  [Cognitive Complexity](https://redirect.sonarsource.com/doc/cognitive-complexity.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S5799",
        "display_name": "PythonS5799",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Implicit string and byte concatenations should not be confusing",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPython concatenates adjacent string or byte literals at compile time. It means that `\"a\" \"b\"` is equivalent to `\"ab\"`. This\nis sometimes used to split a long string on multiple lines. However an implicit string concatenation can also be very confusing. In the following\ncontexts it might indicate that a comma was forgotten:\n\n  <li> when the two strings are on the same line it looks like a badly formatted tuple. Parenthesises are not mandatory to create a tuple, only the\n  comma is. </li>\n  -  when the strings are in a list, set or tuple. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised when there is a visible reason for the string concatenation:\n\n  -  when the quotes used for both strings are different. This can be used to avoid escaping quotes \n  -  when the strings or bytes have different prefixes, i.e. \"f\" for f-strings, \"r\" for raw, \"u\" for unicode and no prefix for normal strings. \n  <li> when strings are visibly split to avoid long lines of code. (Example: the first string ends with a space, punctuation or `\\n`).\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S1751",
        "display_name": "PythonS1751",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Loops with at most one iteration should be refactored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA loop with at most one iteration is equivalent to the use of an `if` statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n`if` statement should be used instead.\n\nAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested `return`,\n`break` or `raise` statements in a more appropriate way.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2325",
        "display_name": "PythonS2325",
        "severity": "info",
        "category": "convention",
        "rule_title": "Methods and properties that don't access instance data should be static",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nClass methods that don't access instance data can and should be static because they yield more performant code.\n\nTo implement a static method in Python one should use either `@classmethod` or `@staticmethod`. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## Exceptions\n\nMethods which raise or may raise a `NotImplementedError` are ignored.\n",
        "disable": false
      },
      {
        "real_name": "python:S5713",
        "display_name": "PythonS5713",
        "severity": "info",
        "category": "convention",
        "rule_title": "A subclass should not be in the same \"except\" statement as a parent class",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nRepeating an exception class in a single `except` statement will not fail but it is not what the developer intended. Either the class is\nnot the one which should be caught, or this is dead code.\n\nHaving a subclass and a parent class in the same `except` statement is also useless. It is enough to keep only the parent class.\n\nThis rule raises an issue when an exception class is duplicated in an `except` statement, or when an exception class has a parent class\nin the same `except` statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python Documentation - [Handling Exceptions](https://docs.python.org/3/tutorial/errors.html#handling-exceptions) \n",
        "disable": false
      },
      {
        "real_name": "python:S2201",
        "display_name": "PythonS2201",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Return values from functions without side effects should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.\n\nThis rule raises an issue when a builtin function or methods which has no side effects is called and its result is not used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised when the function or method call is in a `try...except` body. This usually indicates that an exception is\nexpected, and this exception is the side-effect.\n\n## See\n\n  -  [Python documentation - Built-in Functions](https://docs.python.org/3/library/functions.html) \n  -  [CERT, EXP12-C.](https://wiki.sei.cmu.edu/confluence/x/mtYxBQ) - Do not ignore values returned by functions \n  -  [CERT, EXP00-J.](https://wiki.sei.cmu.edu/confluence/x/xzdGBQ) - Do not ignore values returned by methods \n",
        "disable": false
      },
      {
        "real_name": "python:S5712",
        "display_name": "PythonS5712",
        "severity": "error",
        "category": "convention",
        "rule_title": "Some special methods should return \"NotImplemented\" instead of raising \"NotImplementedError\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Python, special methods corresponding to numeric operators, rich comparison operators and the `__length_hint__` method should return\n`NotImplemented` when the operation is not supported. These methods should not raise `NotImplementedError` as callers don't\nexpect it and won't catch this exception.\n\nFor example `A + B` is equivalent to calling `A.__add__(B)`. If this binary operation is not supported by class A,\n`A.__add__(B)` should return `NotImplemented`. The interpreter will then try the reverse operation, i.e.\n`B.__radd__(A)`. This enables adding new operations by changing only one class instead of two.\n\nThis rule raises an issue when one of the following methods raises `NotImplementedError` instead of returning\n`NotImplemented`:\n\n  -  __lt__(self, other) \n  -  __le__(self, other) \n  -  __eq__(self, other) \n  -  __ne__(self, other) \n  -  __gt__(self, other) \n  -  __ge__(self, other) \n  -  __add__(self, other) \n  -  __sub__(self, other) \n  -  __mul__(self, other) \n  -  __matmul__(self, other) \n  -  __truediv__(self, other) \n  -  __floordiv__(self, other) \n  -  __mod__(self, other) \n  -  __divmod__(self, other) \n  -  __pow__(self, other[, modulo]) \n  -  __lshift__(self, other) \n  -  __rshift__(self, other) \n  -  __and__(self, other) \n  -  __xor__(self, other) \n  -  __or__(self, other) \n  -  __radd__(self, other) \n  -  __rsub__(self, other) \n  -  __rmul__(self, other) \n  -  __rmatmul__(self, other) \n  -  __rtruediv__(self, other) \n  -  __rfloordiv__(self, other) \n  -  __rmod__(self, other) \n  -  __rdivmod__(self, other) \n  -  __rpow__(self, other[, modulo]) \n  -  __rlshift__(self, other) \n  -  __rrshift__(self, other) \n  -  __rand__(self, other) \n  -  __rxor__(self, other) \n  -  __ror__(self, other) \n  -  __iadd__(self, other) \n  -  __isub__(self, other) \n  -  __imul__(self, other) \n  -  __imatmul__(self, other) \n  -  __itruediv__(self, other) \n  -  __ifloordiv__(self, other) \n  -  __imod__(self, other) \n  -  __ipow__(self, other[, modulo]) \n  -  __ilshift__(self, other) \n  -  __irshift__(self, other) \n  -  __iand__(self, other) \n  -  __ixor__(self, other) \n  -  __ior__(self, other) \n  -  __length_hint__(self) \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python documentation - [Built-in Constants - NotImplemented](https://docs.python.org/3/library/constants.html#NotImplemented) \n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations\">Implementing the\n  arithmetic operations</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S4502",
        "display_name": "PythonS4502",
        "severity": "error",
        "category": "security",
        "rule_title": "Disabling CSRF protections is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn't intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\n\nThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\n\n## Ask Yourself Whether\n\n  -  The web application uses cookies to authenticate users. \n  -  There exist sensitive operations in the web application that can be performed when the user is authenticated. \n  -  The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      -  implemented, for example, with an unguessable CSRF token \n    \n## Sensitive Code Example\n\nFor a [Django](https://docs.djangoproject.com/fr/3.0/ref/csrf/) application, the code is sensitive when,\n\n  <li> `django.middleware.csrf.CsrfViewMiddleware` is not used in the <a\n  href=\"https://docs.djangoproject.com/en/3.0/topics/settings/\">Django settings</a>: </li>\n\n  -  the CSRF protection is disabled on a view: \n\nFor a [Flask](https://flask-wtf.readthedocs.io/en/latest/csrf.html) application, the code is sensitive when,\n\n  -  the `WTF_CSRF_ENABLED` setting is set to `false`: \n\n  -  the application doesn't use the `CSRFProtect` module: \n\n  -  the CSRF protection is disabled on a view: \n\n  -  the CSRF protection is disabled on a form: \n\n## Compliant Solution\n\nFor a [Django](https://docs.djangoproject.com/fr/3.0/ref/csrf/) application,\n\n  -  it is recommended to protect all the views with `django.middleware.csrf.CsrfViewMiddleware`: \n\n  -  and to not disable the CSRF protection on specific views: \n\nFor a [Flask](https://flask-wtf.readthedocs.io/en/latest/csrf.html) application, \n\n  <li> the `CSRFProtect` module should be used (and not disabled further with `WTF_CSRF_ENABLED` set to `false`):\n  </li>\n\n  -  and it is recommended to not disable the CSRF protection on specific views or forms: \n\n## See\n\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n",
        "disable": false
      },
      {
        "real_name": "python:S1871",
        "display_name": "PythonS1871",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Two branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving two branches in the same `if` structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nBlocks in an `if` chain that contain a single line of code are ignored.\n\nBut this exception does not apply to `if` chains without `else`-s when all branches have the same single line of code. In\ncase of `if` chains with `else`-s rule {rule:python:S3923} raises a bug. \n",
        "disable": false
      },
      {
        "real_name": "python:S5795",
        "display_name": "PythonS5795",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Identity comparisons should not be used with cached typed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIdentity operators `is` and `is not` check if the same object is on both sides, i.e. `a is b` returns\n`True` if `id(a) == id(b)`.\n\nIntegers, bytes, floats, strings, frozensets and tuples should not be compared with identity operators because the result may not be as expected.\nIf you need to compare these types you should use instead equality operators `==` or `!=`.\n\nThe CPython interpreter caches certain builtin values for integers, bytes, floats, strings, frozensets and tuples. For example, the literal\n`1` will create the same object as `int(\"1\")`, which means that `1 is int(\"1\")` is True. However this works only by\nchance as other integer values are not cached, for example `int(\"1000\") is 1000` will always be `False`. This behavior is not\npart of Python language specification and could vary between interpreters. CPython 3.8 even <a\nhref=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">warns about comparing literals using identity operators</a>.\n\nThe only case where using the \"is\" operator with a cached type is ok is with \"interned\" strings. Note however that interned strings don't\nnecessarily have the same identity as string literals.\n\nThis rule raises an issue when at least one operand of an identity operator:\n\n  -  is of type `int`, `bytes`, `float`, `frozenset` or `tuple`. \n  -  or it is a string literal. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> [Equality vs identity](https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity) - Trey Hunner\n  </li>\n  -  [Python documentation - sys.intern](https://docs.python.org/3.7/library/sys.html?highlight=sys.intern#sys.intern) \n",
        "disable": false
      },
      {
        "real_name": "python:S1110",
        "display_name": "PythonS1110",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Redundant pairs of parentheses should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5797",
        "display_name": "PythonS5797",
        "severity": "error",
        "category": "convention",
        "rule_title": "Constants should not be used as conditions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a constant is used as a condition, either it has no effect on the execution flow and it can be removed, or some code will never be executed\nand it is a bug.\n\nThis rule raises an issue when a constant expression is used as a condition in an `if`, `elif`, a conditional expression or\nother boolean expressions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [PEP 285 - Adding a bool type](https://www.python.org/dev/peps/pep-0285/) \n  -  [Python documentation - Truth Value Testing](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) \n",
        "disable": false
      },
      {
        "real_name": "python:PrintStatementUsage",
        "display_name": "PythonPrintstatementusage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "The \"print\" statement should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `print` statement was removed in Python 3.0. The built-in function should be used instead.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5719",
        "display_name": "PythonS5719",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Instance and class methods should have at least one positional parameter",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEvery instance method is expected to have at least one positional parameter. This parameter will reference the object instance on which the method\nis called. Calling an instance method which doesn't have at least one parameter will raise a \"TypeError\". By convention, this first parameter is\nusually named \"self\".\n\nClass methods, i.e. methods annotated with `@classmethod`, also require at least one parameter. The only differences is that it will\nreceive the class itself instead of a class instance. By convention, this first parameter is usually named \"cls\". Note that `__new__` and\n`__init_subclass__` take a class as first argument even thought they are not decorated with `@classmethod`.\n\nThis rule raises an issue when an instance of class method does not have at least one positional parameter.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python documentation - [Method Objects](https://docs.python.org/3.8/tutorial/classes.html#method-objects) \n",
        "disable": false
      },
      {
        "real_name": "python:S5796",
        "display_name": "PythonS5796",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "New objects should not be created only to check their identity",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIdentity operators `is` and `is not` check if the same object is on both sides, i.e. `a is b` returns\n`True` if `id(a) == id(b)`.\n\nWhen a new object is created it will have its own identity. Thus if an object is created and used only in an identity check it is not possible for\nthe other operand to be the same object. The comparison is always `False` or always `True` depending on the operator used,\n`is` or `is not`. To avoid this problem the identity operator could be replaced with an equality operator (== or !=), which will\nuse `__eq__` or `__ne__` methods under the hood.\n\nThis rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check, i.e.:\n\n  -  When it is a dict, list or set literal. \n  -  When it is a call to `dict`, `set`, `list` or `complex` built-in functions. \n  -  When such a new object is assigned to only one variable and this variable is used in an identity check. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> [Equality vs identity](https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity) - Trey Hunner\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S1515",
        "display_name": "PythonS1515",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions and lambdas should not reference variables defined in enclosing loops",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested functions and lambdas can reference variables defined in enclosing scopes. This can create tricky bugs when the variable and the function\nare defined in a loop. If the function is called in another iteration or after the loop finishes, it will see the variables' last value instead of\nseeing the values corresponding to the iteration where the function was defined.\n\nCapturing loop variables might work for some time but:\n\n  -  it makes the code difficult to understand. \n  <li> it increases the risk of introducing a bug when the code is refactored or when dependencies are updated. See an example with the builtin \"map\"\n  below. </li>\n\nOne solution is to add a parameter to the function/lambda and use the previously captured variable as its default value. Default values are only\nexecuted once, when the function is defined, which means that the parameter's value will remain the same even when the variable is reassigned in\nfollowing iterations.\n\nAnother solution is to pass the variable as an argument to the function/lambda when it is called.\n\nThis rule raises an issue when a function or lambda references a variable defined in an enclosing loop.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised if the function or lambda is directly called in the same loop. This still makes the design difficult to understand but it\nis less error prone.\n\n## See\n\n  -  [The Hitchhiker's Guide to Python - Common Gotchas](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments) \n  -  Python documentation - [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) \n",
        "disable": false
      },
      {
        "real_name": "python:S2208",
        "display_name": "PythonS2208",
        "severity": "error",
        "category": "convention",
        "rule_title": "Wildcard imports should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nImporting every public name from a module using a wildcard (`from mymodule import *`) is a bad idea because:\n\n  -  It could lead to conflicts between names defined locally and the ones imported. \n  -  It reduces code readability as developers will have a hard time knowing where names come from. \n  -  It clutters the local namespace, which makes debugging more difficult. \n\nRemember that imported names can change when you update your dependencies. A wildcard import which works today might be broken tomorrow.\n\nThere are two ways to avoid a wildcard import:\n\n  <li> Replace it with `import mymodule` and access module members as `mymodule.myfunction`. If the module name is too long,\n  alias it to a shorter name. Example: `import pandas as pd` </li>\n  <li> List every imported name. If necessary import statements can be split on multiple lines using parentheses (preferred solution) or backslashes.\n  </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nOr\n\n## Exceptions\n\nNo issue will be raised in `__init__.py` files. Wildcard imports are a common way of populating these modules.\n\nNo issue will be raised in modules doing only imports. Local modules are sometimes created as a proxy for third-party modules.\n\nJust keep in mind that wildcard imports might still create issues in these cases. It's always better to import only what you need.\n\n## See\n\n  -  [Python documentation - The import statement](https://docs.python.org/3.8/reference/simple_stmts.html#import) \n",
        "disable": false
      },
      {
        "real_name": "python:S5714",
        "display_name": "PythonS5714",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Boolean expressions of exceptions should not be used in \"except\" statements",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe only two possible types for an `except`'s expression are a class deriving from `BaseException`, or a tuple composed of\nsuch classes (or an old style class if you are using python 2, but this has been removed in python 3).\n\nThis rule raises an issue when the expression used in an `except` block is a boolean expression of exceptions. The result of such\nexpression is a single exception class, which is valid but not what the developer intended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python documentation - [the `try` statement](https://docs.python.org/3/reference/compound_stmts.html#except) \n",
        "disable": false
      },
      {
        "real_name": "python:S4507",
        "display_name": "PythonS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDelivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-1999007](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007) \n  -  [CVE-2015-5306](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306) \n  -  [CVE-2013-2006](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006) \n\nAn application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. \n\n## Ask Yourself Whether\n\n  -  the code or configuration enabling the application debug features is deployed on production servers. \n  -  the application runs by default with debug features activated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nDo not enable debug features on production servers.\n\n## Sensitive Code Example\n\nDjango\n\nDjango's \"settings.py\" or \"global_settings.py\" configuration file\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-489](http://cwe.mitre.org/data/definitions/489.html) - Leftover Debug Code \n  -  [MITRE, CWE-215](http://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n",
        "disable": false
      },
      {
        "real_name": "python:S5717",
        "display_name": "PythonS5717",
        "severity": "error",
        "category": "convention",
        "rule_title": "Function parameters' default values should not be modified or assigned",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Python function parameters can have default values. These default values are expressions which are executed when the function is defined, i.e.\nonly once. The same default value will be used every time the function is called, thus modifying it will have an effect on every subsequent call. This\ncan create some very confusing bugs.\n\nIt is also a bad idea to store mutable default value in another object (ex: as an attribute). Multiple instances will then share the same value and\nmodifying one objet will modify all of them.\n\nThis rule raises an issue when:\n\n  <li> a default value is either modified in the function or assigned to anything else than a variable and it has one of the following types:\n    <ul>\n      -  builtins: set, dict, list. \n      <li> [collections](https://docs.python.org/3/library/collections.html) module: deque, UserList, ChainMap, Counter, OrderedDict,\n      defaultdict, UserDict. </li>\n    \n## Noncompliant Code Example\n\nIn the following example, the parameter \"param\" has `list()` as a default value. This list is created only once and then reused in every\ncall. Thus when it appends `'a'` to this list, the next call will have `['a']` as a default value.\n\nIn the following example the same list is used for multiple instances of MyClass.param.\n\n## Compliant Solution\n\n## Exceptions\n\nIn some very rare cases modifying a default value is ok. For example, default values can be used as a cache.\n\nNo issue will be raised when the parameter's name contains \"cache\" or \"memo\" (as in memoization).\n\n## See\n\n  -  [The Hitchhiker's Guide to Python - Common Gotchas](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments) \n  -  [Python documentation - Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) \n",
        "disable": false
      },
      {
        "real_name": "python:S1192",
        "display_name": "PythonS1192",
        "severity": "error",
        "category": "convention",
        "rule_title": "String literals should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n\n## Noncompliant Code Example\n\nWith the default threshold of 3:\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised on:\n\n  -  duplicated string in decorators \n  -  strings with less than 5 characters \n  -  strings with only letters, numbers and underscores \n",
        "disable": false
      },
      {
        "real_name": "python:S1764",
        "display_name": "PythonS1764",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Identical expressions should not be used on both sides of a binary operator",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n\nNote that this rule will raise issues on `a == a` and `a != a` expressions which are sometime used to detect `NaN`\nvalues. It is recommended to use instead [`math.isnan`](https://docs.python.org/3/library/math.html#math.isnan) or an equivalent\nfunction. This will improve code readability.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThe following are ignored:\n\n  -  The expression `1 &lt;&lt; 1` \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  -  {rule:python:S1656} - Implements a check on `=`. \n",
        "disable": false
      },
      {
        "real_name": "python:S5722",
        "display_name": "PythonS5722",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Special methods should have an expected number of parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPython developers can customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible to\noverride how the multiplication operator (`a * b`) will apply to instances of a class by defining in this class the `__mul__`\nand `__rmul__` methods. Whenever a multiplication operation is performed with this class, the python interpreter will call one of these\nmethods instead of performing the default multiplication.\n\nThe python interpreter will always call these methods with the same number of parameters. Every call to a special method will fail if it is defined\nwith an unexpected number of parameters.\n\nThis rule raises an issue when a special method is defined with an unexpected number of parameters.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python Documentation - [Special method names](https://docs.python.org/3/reference/datamodel.html#special-method-names) \n  -  Python Documentation - [copy module](https://docs.python.org/3/library/copy.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S1763",
        "display_name": "PythonS1763",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All code should be reachable",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements (`return`, `break`, `continue`, and `raise`) move control flow out of the current code\nblock. So any statements that come after a jump are dead code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [MITRE, CWE-561](http://cwe.mitre.org/data/definitions/561.html) - Dead Code \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S5603",
        "display_name": "PythonS5603",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused scope-limited definitions should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a class or function is defined in a parent function or method, it is only visible in this parent function or method's scope. If the defined\nclass or function is not used within this scope it is dead code, i.e. unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5724",
        "display_name": "PythonS5724",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Property getter, setter and deleter methods should have the expected number of parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProperty getter, setter and deleter methods are called by the python interpreter with a specific number or arguments:\n\n  -  only \"self\" for property getter and deleter methods. \n  -  \"self\" and a value for setter methods. \n\nAdding any other parameter, or removing these mandatory parameters will make method calls fail.\n\nThis rule raises an issue when:\n\n  -  too many parameters are defined in a property getter, setter or deleter method. \n  -  the value parameter is missing in a property setter method. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python Documentation - Built-in Functions - property](https://docs.python.org/3/library/functions.html#property) \n",
        "disable": false
      },
      {
        "real_name": "python:InequalityUsage",
        "display_name": "PythonInequalityusage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "\"<>\" should not be used to test inequality",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe forms `&lt;&gt;` and `!=` are equivalent. But in Python 2.7.3 the `&lt;&gt;` form is considered obsolete.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5443",
        "display_name": "PythonS5443",
        "severity": "error",
        "category": "security",
        "rule_title": "Using publicly writable directories is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n`/tmp` in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2012-2451](https://nvd.nist.gov/vuln/detail/CVE-2012-2451) \n  -  [CVE-2015-1838](https://nvd.nist.gov/vuln/detail/CVE-2015-1838) \n\nThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like `/tmp` (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., `TMP` and `TMPDIR`.\n\n  -  `/tmp` \n  -  `/var/tmp` \n  -  `/usr/tmp` \n  -  `/dev/shm` \n  -  `/dev/mqueue` \n  -  `/run/lock` \n  -  `/var/run/lock` \n  -  `/Library/Caches` \n  -  `/Users/Shared` \n  -  `/private/tmp` \n  -  `/private/var/tmp` \n  -  `\\Windows\\Temp` \n  -  `\\Temp` \n  -  `\\TMP` \n\n## Ask Yourself Whether\n\n  -  Files are read from or written into a publicly writable folder \n  -  The application creates files with predictable names into a publicly writable folder \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Use a dedicated sub-folder with tightly controlled permissions \n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      -  The generated filename is unpredictable \n      -  The file is readable and writable only by the creating user ID \n      -  The file descriptor is not inherited by child processes \n      -  The file will be destroyed as soon as it is closed \n    \n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-377](http://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](http://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n  -  [Python tempfile module](https://docs.python.org/3/library/tempfile.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S5685",
        "display_name": "PythonS5685",
        "severity": "info",
        "category": "convention",
        "rule_title": "Walrus operator should not make code confusing",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe [walrus operator](https://www.python.org/dev/peps/pep-0572) `:=` (also known as \"assignment expression\") should be used\nwith caution as it can easily make code more difficult to understand and thus maintain. In such case it is advised to refactor the code and use an\nassignment statement (i.e. `=`) instead.\n\nThis rule raises an issue when the walrus operator is used in a way which makes the code confusing, as described in <a\nhref=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572</a>.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [PEP 572 - Assignment Expressions](https://www.python.org/dev/peps/pep-0572/#exceptional-cases) \n",
        "disable": false
      },
      {
        "real_name": "python:S5445",
        "display_name": "PythonS5445",
        "severity": "error",
        "category": "security",
        "rule_title": "Insecure temporary file creation methods should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating temporary files using insecure methods exposes the application to race conditions on filenames: a malicious user can try to create a file\nwith a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted.\nThis risk is even higher if the application run with elevated permissions.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2014-1858](https://nvd.nist.gov/vuln/detail/CVE-2014-1858) \n  -  [CVE-2014-1932](https://nvd.nist.gov/vuln/detail/CVE-2014-1932) \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A9](https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities) - Using\n  Components with Known Vulnerabilities </li>\n  -  [MITRE, CWE-377](https://cwe.mitre.org/data/definitions/377) - Insecure Temporary File \n  <li> [MITRE, CWE-379](https://cwe.mitre.org/data/definitions/379) - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  -  [OWASP, Insecure Temporary File](https://www.owasp.org/index.php/Insecure_Temporary_File) \n  -  [Python tempfile module](https://docs.python.org/3/library/tempfile.html#deprecated-functions-and-variables) \n  -  [Python 2.7 os module](https://docs.python.org/2.7/library/os.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S101",
        "display_name": "PythonS101",
        "severity": "info",
        "category": "convention",
        "rule_title": "Class names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\n\nThe default regular expression is based on PEP-8 standard. It allows \"CapWords\" convention and \"snake_case\" in lowercase. The \"snake_case\"\nconvention is accepted by PEP-8 when the class is primarily used as a callable (ex: decorator, context manager, etc...). However the \"CapWords\"\nconvention is recommended in every case.\n\n## Noncompliant Code Example\n\nWith default provided regular expression `^_?([A-Z_][a-zA-Z0-9]*|[a-z_][a-z0-9_]*)$`:\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5720",
        "display_name": "PythonS5720",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"self\" should be the first argument to instance methods",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nInstance methods, i.e. methods not annotated with `@classmethod` or `@staticmethod`, are expected to have at least one\nparameter. This parameter will reference the object instance on which the method is called. By convention, this first parameter is named \"self\".\n\nNaming the \"self\" parameter differently is confusing. It might also indicate that the \"self\" parameter was forgotten, in which case calling the\nmethod will most probably fail.\n\nNote also that creating methods which are used as static methods without the `@staticmethod` decorator is a bad practice because calling\nthese methods on an instance will raise a `TypeError`. Either move the method out of the class or decorate it with\n`@staticmethod`.\n\nThis rule raises an issue when the first parameter of an instance method is not called \"self\".\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule will also accept \"cls\" or \"mcs\" as first parameter's name for metaclasses' methods.\n\nNo issue will be raised for methods called `__init_subclass__`, `__class_getitem__` or `__new__` as these methods'\nfirst parameter is a class.\n\nYou can also disable issues on methods decorated with a specific decorator. Add these decorators to this rule's \"ignoreDecorators\" parameter.\n\nWith \"ignoredDecorators\" set to \"abstractmethod\"\n\n## See\n\n  -  Python documentation - [Method Objects](https://docs.python.org/3.8/tutorial/classes.html#method-objects) \n  -  PEP8 - [Function and Method Arguments](https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments) \n",
        "disable": false
      },
      {
        "real_name": "python:S100",
        "display_name": "PythonS100",
        "severity": "info",
        "category": "convention",
        "rule_title": "Method names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.\n\n## Noncompliant Code Example\n\nWith default provided regular expression: `^[a-z_][a-z0-9_]*$`\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2737",
        "display_name": "PythonS2737",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"except\" clauses should do more than raise the same issue",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn `except` clause that only rethrows the caught exception has the same effect as omitting the `except` altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. \n\nSuch clauses should either be eliminated or populated with the appropriate logic.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3827",
        "display_name": "PythonS3827",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Variables, classes and functions should be defined before being used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nVariables, Classes and functions should be defined before they are used, otherwise the code will fail.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2612",
        "display_name": "PythonS2612",
        "severity": "warning",
        "category": "security",
        "rule_title": "Setting loose POSIX file permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Unix, \"`others`\" class refers to all users except the owner of the file and the members of the group assigned to this file.\n\nGranting permissions to this group can lead to unintended access to files. \n\n## Ask Yourself Whether\n\n  -  The application is designed to be run on a multi-user environment. \n  -  Corresponding files and directories may contain confidential information. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nThe most restrictive possible permissions should be assigned to files and directories.\n\n## Sensitive Code Example\n\nFor [os.umask](https://docs.python.org/3/library/os.html#os.umask):\n\nFor [os.chmod](https://docs.python.org/3/library/os.html#os.chmod), <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:\n\n## Compliant Solution\n\nFor [os.umask](https://docs.python.org/3/library/os.html#os.umask):\n\nFor [os.chmod](https://docs.python.org/3/library/os.html#os.chmod), <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:\n\n## See\n\n  -  [OWASP Top 10 2017 Category A5](https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control) - Broken Access Control \n  -  [OWASP File Permission](https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)) \n  -  [MITRE, CWE-732](https://cwe.mitre.org/data/definitions/732) - Incorrect Permission Assignment for Critical Resource \n  -  [MITRE, CWE-266](https://cwe.mitre.org/data/definitions/266.html) - Incorrect Privilege Assignment \n  <li> [CERT, FIO01-J.](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions) -\n  Create files with appropriate access permissions </li>\n  <li> [CERT, FIO06-C.](https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions) - Create\n  files with appropriate access permissions </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S2734",
        "display_name": "PythonS2734",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"__init__\" should not return a value",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy contract, every Python function returns something, even if it's the `None` value, which can be returned implicitly by omitting the\n`return` statement, or explicitly. \n\nThe `__init__` method is required to return `None`. A `TypeError` will be raised if the `__init__`\nmethod either `yield`s or `return`s any expression other than `None`. Returning some expression that evaluates to\n`None` will not raise an error, but is considered bad practice.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5607",
        "display_name": "PythonS5607",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Operators should be used on compatible types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling an operator in python is equivalent to calling a special method (except for the identity operator `is`). Python provides a set\nof built-in operations. It is for example possible to add two integers: `1 + 2`. It is however not possible to add a string and an integer:\n`1 + \"2\"` and such an operation will raise a `TypeError`.\n\nIt is possible to define how an operator will behave with a custom class by defining the corresponding special method. See python documentation for\na complete list of operators and their methods: <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#emulating-numeric-types\">arithmetic and bitwise\noperators</a>, <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#object.__lt__\">comparison\noperators</a>.\n\nFor symmetrical binary operators you need to define two methods so that the order of operands doesn't matter, ex: `__add__` and\n`__radd__`.\n\nThis rule raises an issue when an operator is used on incompatible types. Types are considered incompatible if no built-in operations between those\ntypes exist and none of the operands has implemented the corresponding special methods.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#object.__lt__\">Rich\n  comparison methods</a> </li>\n  <li> Python documentation - <a\n  href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#emulating-numeric-types\">Emulating numeric types</a>\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S5727",
        "display_name": "PythonS5727",
        "severity": "error",
        "category": "convention",
        "rule_title": "Comparison to None should not be constant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nChecking if a variable or parameter is `None` should only be done when you expect that it can be `None`. Doing so when the\nvariable is always None or never None is confusing at best. At worse, there is a bug and the variable is not updated properly.\n\nThis rule raises an issue when expressions `X is None`, `X is not None`, `X == None` or `X != None` are\nconstant, i.e. `X` is always None or never None.\n\n## Noncompliant Code Example\n\n## See\n\n  -  Python documentation - [Identity comparisons](https://docs.python.org/3/reference/expressions.html#is-not) \n  -  Python documentation - [`__eq__` operator](https://docs.python.org/3/reference/datamodel.html#object.__eq__) \n",
        "disable": false
      },
      {
        "real_name": "python:S1481",
        "display_name": "PythonS1481",
        "severity": "info",
        "category": "convention",
        "rule_title": "Unused local variables should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n`_` as well as tuples will not raise an issue for this rule. The following examples are compliant:\n",
        "disable": false
      },
      {
        "real_name": "python:S5042",
        "display_name": "PythonS5042",
        "severity": "error",
        "category": "security",
        "rule_title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme [compression ratio](https://en.wikipedia.org/wiki/Data_compression_ratio), attackers will\ncompress irrelevant data (eg: a long string of repeated bytes). \n\n## Ask Yourself Whether\n\nArchives to expand are untrusted and:\n\n  -  There is no validation of the number of entries in the archive. \n  -  There is no validation of the total size of the uncompressed data. \n  -  There is no validation of the ratio between the compressed and uncompressed archive entry. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  -  Define and control the threshold for maximum total size of the uncompressed data. \n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it's not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n\n## Sensitive Code Example\n\nFor [tarfile](https://docs.python.org/3.5/library/tarfile.html) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration) -\n  Security Misconfiguration </li>\n  <li> [MITRE, CWE-409](https://cwe.mitre.org/data/definitions/409.html) - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> [CERT, IDS04-J.](https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream) - Safely\n  extract files from ZipInputStream </li>\n  -  [bamsoftware.com](https://www.bamsoftware.com/hacks/zipbomb/) - A better Zip Bomb \n",
        "disable": false
      },
      {
        "real_name": "python:S2053",
        "display_name": "PythonS2053",
        "severity": "error",
        "category": "security",
        "rule_title": "Hashes should include an unpredictable salt",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn cryptography, a \"salt\" is an extra piece of data which is included when hashing a password. This makes `rainbow-table attacks` more\ndifficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the\nhash value in databases of precomputed hashes (called `rainbow-tables`).\n\nThis rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as `PBKDF2`, is used\nwith a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as `sha1` or `md5`\nas they should not be used to hash passwords.\n\n## Recommended Secure Coding Practices\n\n  -  Use hashing functions generating their own secure salt or generate a secure random value of at least 16 bytes. \n  -  The salt should be unique by user password. \n\n## Noncompliant Code Example\n\nhashlib\n\ncrypt\n\n## Compliant Solution\n\nhashlib\n\ncrypt\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-759](http://cwe.mitre.org/data/definitions/759.html) - Use of a One-Way Hash without a Salt \n  -  [MITRE, CWE-760](http://cwe.mitre.org/data/definitions/760.html) - Use of a One-Way Hash with a Predictable Salt \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S3358",
        "display_name": "PythonS3358",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Conditional expressions should not be nested",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJust because you **can** do something, doesn't mean you should, and that's the case with nested conditional expressions. Nesting conditional\nexpressions results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future\nyou) scratching their heads and cursing.\n\nInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is raised on conditional expressions in comprehensions.\n",
        "disable": false
      },
      {
        "real_name": "python:S5655",
        "display_name": "PythonS5655",
        "severity": "error",
        "category": "convention",
        "rule_title": "Arguments given to functions should be of an expected type",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe CPython interpreter does not check arguments type when functions are called. However a function can express the type it expects for each\nargument in its documentation or by using [Type Hints](https://www.python.org/dev/peps/pep-0484/). Calling such a function with an argument\nof a different type can easily create a bug. Even if it works right now it can fail later when APIs evolve or when type checks are added (ex: with\n`isinstance`).\n\nThis rule raises an issue when a function or method is called with an argument of a different type than the one described in its type annotations.\nIt also checks argument types for builtin functions.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - builtins](https://docs.python.org/3/library/functions.html#built-in-funcs) \n  -  [PEP 484 — Type Hints](https://www.python.org/dev/peps/pep-0484/) \n  -  [Python documentation - typing — Support for type hints](https://docs.python.org/3/library/typing.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S2823",
        "display_name": "PythonS2823",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Only strings should be listed in \"__all__\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`__all__` is used to define the list of module's names that should be imported when `from package import *` is used. For that\nreason, it may only contain strings.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Importing * From a Package](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package) \n",
        "disable": false
      },
      {
        "real_name": "python:S3516",
        "display_name": "PythonS3516",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions returns should not be invariant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.\n\nThis rule raises an issue when a function contains several return statements that all return the same value.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S3752",
        "display_name": "PythonS3752",
        "severity": "info",
        "category": "security",
        "rule_title": "Allowing both safe and unsafe HTTP methods is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user's profile on a web application.\n\nCommon safe HTTP methods are GET, HEAD, or OPTIONS.\n\nCommon unsafe HTTP methods are POST, PUT and DELETE.\n\nAllowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.\n\n## Ask Yourself Whether\n\n  -  HTTP methods are not defined at all for a route/controller of the application. \n  -  Safe HTTP methods are defined and used for a route/controller that can change the state of an application. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nFor all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.\n\n## Sensitive Code Example\n\nFor [Django](https://www.djangoproject.com/):\n\nFor [Flask](https://flask.palletsprojects.com/en/1.1.x/):\n\n## Compliant Solution\n\nFor [Django](https://www.djangoproject.com/):\n\nFor [Flask](https://flask.palletsprojects.com/en/1.1.x/):\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A5](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control) -\n  Broken Access Control </li>\n  -  [MITRE, CWE-352](https://cwe.mitre.org/data/definitions/352.html) - Cross-Site Request Forgery (CSRF) \n  -  [OWASP: Cross-Site Request Forgery](https://owasp.org/www-community/attacks/csrf) \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  [Django](https://docs.djangoproject.com/en/3.1/topics/http/decorators/#allowed-http-methods) - Allowed HTTP Methods \n  -  [Flask](https://flask.palletsprojects.com/en/1.1.x/quickstart/#http-methods) - HTTP Methods \n",
        "disable": false
      },
      {
        "real_name": "python:S1854",
        "display_name": "PythonS1854",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused assignments should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores initializations to -1, 0, 1, `None`, `True`, `False` and `\"\"`.\n\nNo issue will be raised on unpacked variables.\n\n## See\n\n  -  [MITRE, CWE-563](http://cwe.mitre.org/data/definitions/563.html) - Assignment to Variable without Use ('Unused Variable') \n  -  [CERT, MSC13-C.](https://wiki.sei.cmu.edu/confluence/x/39UxBQ) - Detect and remove unused values \n  -  [CERT, MSC56-J.](https://wiki.sei.cmu.edu/confluence/x/9DZGBQ) - Detect and remove superfluous code and values \n",
        "disable": false
      },
      {
        "real_name": "python:S5659",
        "display_name": "PythonS5659",
        "severity": "error",
        "category": "security",
        "rule_title": "JWT should be signed and verified",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.\n\n  -  Don't use `none` algorithm to sign or verify the validity of a token. \n  -  Don't use a token without verifying its signature before. \n\n## Noncompliant Code Examples\n\nFor [pyjwt](https://github.com/jpadilla/pyjwt) module:\n\nFor [python_jwt](https://github.com/davedoesdev/python-jwt) module:\n\n## Compliant Solution\n\nFor [pyjwt](https://github.com/jpadilla/pyjwt) module:\n\nFor [python_jwt](https://github.com/davedoesdev/python-jwt) module:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-347](https://cwe.mitre.org/data/definitions/347.html) - Improper Verification of Cryptographic Signature \n",
        "disable": false
      },
      {
        "real_name": "python:S1578",
        "display_name": "PythonS1578",
        "severity": "info",
        "category": "convention",
        "rule_title": "Module names should comply with a naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.\n\n## See\n\n  -  [CERT, MSC09-C.](https://wiki.sei.cmu.edu/confluence/x/GtYxBQ) - Character encoding: Use subset of ASCII for safety \n",
        "disable": false
      },
      {
        "real_name": "python:S5890",
        "display_name": "PythonS5890",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Values assigned to variables should match their type annotations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nType hints can be used to communicate the intended type of a given variable. These are not enforced at runtime and not respecting them might not\nnecessarily lead to runtime errors.\n\nIt is however confusing and could lead to maintainability issues.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S1862",
        "display_name": "PythonS1862",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Related \"if/else if\" statements should not have the same condition",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA chain of `if`/`else if` statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to `true`. \n\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S2159",
        "display_name": "PythonS2159",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Silly equality checks should not be made",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn some cases a comparison with operators `==`, or `!=` will always return True or always return False. When this happens,\nthe comparison and all its dependent code can simply be removed. This includes:\n\n  -  comparing unrelated builtin types such as string and integer. \n  <li> comparing class instances which do not implement `__eq__` or `__ne__` to an object of a different type (builtin or from\n  an unrelated class which also doesn't implement `__eq__` or `__ne__`). </li>\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3403",
        "display_name": "PythonS3403",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Identity operators should not be used with dissimilar types",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOperators [`is`](https://docs.python.org/3/reference/expressions.html#is-not) and <a\nhref=\"https://docs.python.org/3/reference/expressions.html#is-not\">`is not`</a> check if their operands point to the same instance, thus\nthey will always return respectively True and False when they are used to compare objects of different type. Such comparisons can only be bugs.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S2710",
        "display_name": "PythonS2710",
        "severity": "error",
        "category": "convention",
        "rule_title": "The first argument to class methods should follow the naming convention",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBy convention, the first argument to class methods, i.e. methods decorated with `@classmethod`, is named `cls` as a\nrepresentation and a reminder that the argument is the class itself. Name the argument something else, and you stand a good chance of confusing both\nusers and maintainers of the code. It might also indicate that the `cls` parameter was forgotten, in which case calling the method will\nmost probably fail. This rule also applies to methods `__init_subclass__`, `__class_getitem__` and `__new__` as their\nfirst argument is always the class instead of \"self\".\n\nBy default this rule accepts `cls` and `mcs`, which is sometime used in metaclasses, as valid names for class parameters. You\ncan set your own list of accepted names via the parameter `classParameterNames`.\n\nThis rule raises an issue when the first parameter of a class method is not an accepted name.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PEP8 - [Function and Method Arguments](https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments) \n",
        "disable": false
      },
      {
        "real_name": "python:S5547",
        "display_name": "PythonS5547",
        "severity": "error",
        "category": "security",
        "rule_title": "Cipher algorithms should be robust",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[Strong cipher algorithms](https://en.wikipedia.org/wiki/Strong_cryptography) are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.\n\nA general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.\n\nMore specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.\n\n## Noncompliant Code Examples\n\n[pycryptodomex](https://pycryptodome.readthedocs.io) library:\n\n[pycryptodome](https://pycryptodome.readthedocs.io) library:\n\n[pyca](https://cryptography.io/en/latest/) library:\n\n[pydes](https://pypi.org/project/pyDes/) library:\n\n[pycrypto](https://pycrypto.readthedocs.io/en/latest/) library is not maintained and therefore should not be used:\n\n## Compliant Solution\n\n[pycryptodomex](https://pycryptodome.readthedocs.io) library:\n\n[pycryptodome](https://pycryptodome.readthedocs.io) library:\n\n[pyca](https://cryptography.io/en/latest/) library:\n\n[pycrypto](https://pycrypto.readthedocs.io/en/latest/) library is not maintained and therefore should not be used:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S5542",
        "display_name": "PythonS5542",
        "severity": "error",
        "category": "security",
        "rule_title": "Encryption algorithms should be used with secure mode and padding scheme",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEncryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:\n\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it's recommended to use it along with Message\n      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">prevent padding oracle attacks</a>. </li>\n      <li> The ECB (Electronic Codebook) mode doesn't provide serious message confidentiality: under a given key any given plaintext block always gets\n      encrypted to the same ciphertext block. This mode should not be used. </li>\n    \n## Noncompliant Code Examples\n\n[pycryptodomex](https://pycryptodome.readthedocs.io) library:\n\n[pyca](https://cryptography.io/en/latest/) library:\n\n[pydes](https://pypi.org/project/pyDes/) library:\n\n[pycrypto](https://pycrypto.readthedocs.io/en/latest/) library is not maintained and therefore should not be used:\n\n## Compliant Solution\n\n[pycryptodomex](https://pycryptodome.readthedocs.io) library:\n\n[pyca](https://cryptography.io/en/latest/) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S1066",
        "display_name": "PythonS1066",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Collapsible \"if\" statements should be merged",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nMerging collapsible `if` statements increases the code's readability.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S1186",
        "display_name": "PythonS1186",
        "severity": "error",
        "category": "convention",
        "rule_title": "Functions and methods should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThere are several reasons for a function or a method not to have a body:\n\n  -  It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \n  -  It is not yet, or never will be, supported. In this case an exception should be thrown. \n  -  The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised when the empty method is abstract and meant to be overriden in a subclass, i.e. it is decorated with\n`abc.abstractmethod`, `abc.abstractstaticmethod`, `abc.abstractclassmethod` or `abc.abstractproperty`.\nNote however that these methods should normally have a docstring explaining how subclasses should implement these methods.\n",
        "disable": false
      },
      {
        "real_name": "python:S2275",
        "display_name": "PythonS2275",
        "severity": "error",
        "category": "correctness",
        "rule_title": "String formatting should not lead to runtime errors",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatting strings, either with the `%` operator or `str.format` method, requires a valid string and arguments matching this\nstring's replacement fields.\n\nThis rule raises an issue when formatting a string will raise an exception because the input string or arguments are invalid. Rule\n{rule:python:S3457} covers cases where no exception is raised and the resulting string is simply not formatted properly.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax) \n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S5708",
        "display_name": "PythonS5708",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Caught Exceptions must derive from BaseException",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Python 3, attempting to catch in an `except` statement an object which does not derive from BaseException will raise a\n`TypeError`. In Python 2 it is possible to raise old-style classes but this shouldn't be done anymore in order to be compatible with Python\n3.\n\nIn order to catch multiple exceptions in an `except` statement, a tuple of exception classes should be provided.\n\nIf you are about to create a custom Exception class, note that custom exceptions should inherit from `Exception`, not\n`BaseException`. `Exception` allows people to catch all exceptions except the ones explicitly asking the interpreter to stop,\nsuch as `KeyboardInterrupt` and [`GeneratorExit`](https://docs.python.org/3/library/exceptions.html#GeneratorExit)\nwhich is not an error. See [PEP 352](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) for more information.\n\nThis rule raises an issue when the expression used in an `except` statement is not a class deriving from `BaseException` nor\na tuple of such classes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python documentation - [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html) \n  -  Python documentation - [the `try` statement](https://docs.python.org/3/reference/compound_stmts.html#except) \n  -  [PEP 352 - Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) \n",
        "disable": false
      },
      {
        "real_name": "python:S5828",
        "display_name": "PythonS5828",
        "severity": "error",
        "category": "correctness",
        "rule_title": "The \"open\" builtin function should be called with a valid mode",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `open` builtin can open files in different modes, which are provided as a combination of characters. Using an invalid sequence of\ncharacters will at best make `open` fail, or worse, it will have an undefined behavior (ex: it might ignore some characters).\n\nA valid mode:\n\n  -  should contain one and only one of the following characters: \"r\" (read), \"w\" (write), \"a\" (append), \"x\" (create). \n  -  should contain zero or one of the following characters: \"t\" (text), \"b\" (binary). \n  -  should contain zero or one \"+\" character (open for updating) \n  <li> cannot contain \"a\", \"w\", \"+\", or \"x\" if \"U\" (universal newlines) is used. Note that \"U\" has no effect in python 3, it is deprecated and\n  shouldn't be used anymore. </li>\n\nThis rule raises an issue when an invalid \"mode\" is provided to the `open` builtin.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - the `open` builtin](https://docs.python.org/3/library/functions.html#open) \n",
        "disable": false
      },
      {
        "real_name": "python:OneStatementPerLine",
        "display_name": "PythonOnestatementperline",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Statements should be on separate lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor better readability, do not put more than one statement on a single line.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2836",
        "display_name": "PythonS2836",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Loops without \"break\" should not have \"else\" clauses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe `else` clause of a loop is skipped when a `break` is executed in this loop. In other words, a loop with an\n`else` but no `break` statement will always execute the `else` part (unless of course an exception is raised or\n`return` is used). If this is what the developer intended, it would be much simpler to have the `else` statement removed and its\nbody unindented. Thus having a loop with an `else` and no `break` is most likely an error.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\nor\n\n## See\n\n  <li> <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">Python documentation -\n  break and continue Statements, and else Clauses on Loops</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S5707",
        "display_name": "PythonS5707",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Exceptions' \"__cause__\" should be either an Exception or None",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nException chaining enables users to see if an exception was triggered by another exception (see <a\nhref=\"https://www.python.org/dev/peps/pep-3134/\">PEP-3134</a>). Exceptions are chained using either of the following syntax:\n\n  -  `raise NewException() from chained_exception` \n  -  `new_exception.__cause__ = chained_exception` \n\nIt is also possible to erase a chaining by setting `new_exception.__cause__ = None` or using `except ... from None` (see <a\nhref=\"https://www.python.org/dev/peps/pep-0409/\">PEP-409</a>).\n\nChaining will fail and raise a `TypeError` if something else than `None` or a valid exception, i.e. an instance of\n`BaseException` or of a subclass, is provided.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PEP 3134 – [Exception Chaining and Embedded Tracebacks](https://www.python.org/dev/peps/pep-3134/) \n  -  PEP 409 – [Suppressing exception context](https://www.python.org/dev/peps/pep-0409/) \n  -  PEP 352 - [Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) \n  -  Python documentation - [Built-in Exceptions](https://docs.python.org/3/library/exceptions.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S5704",
        "display_name": "PythonS5704",
        "severity": "error",
        "category": "convention",
        "rule_title": "Bare \"raise\" statements should not be used in \"finally\" blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA bare `raise` statement, i.e. a `raise` with no exception provided, will re-raise the last active exception in the current\nscope. If no exception is active a `RuntimeError` is raised instead.\n\nIf the bare \"raise\" statement is in a `finally` block, it will only have an active exception to re-raise when an exception from the\n`try` block is not caught or when an exception is raised by an `except` or `else` block. Thus bare `raise`\nstatements should not be relied upon in `finally` blocks. It is simpler to let the exception raise automatically.\n\nThis rule raises an issue when a bare `raise` statements is in a `finally` block.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  Python Documentation - [The `raise` statement](https://docs.python.org/3/reference/simple_stmts.html#raise) \n",
        "disable": false
      },
      {
        "real_name": "python:S5709",
        "display_name": "PythonS5709",
        "severity": "error",
        "category": "convention",
        "rule_title": "Custom Exception classes should inherit from \"Exception\" or one of its subclasses",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit)&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\">`sys.exit()`</a> is called. <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\">`KeyboardInterrupt`</a> is raised when the user asks the program\nto stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops.\n\nIn order to avoid catching `SystemExit` and `KeyboardInterrupt` by mistake <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy\">PEP-352</a> created the root class `BaseException` from which\n`SystemExit`, `KeyboardInterrupt` and `Exception` derive. Thus developers can use `except Exception:`\nwithout preventing the software from stopping.\n\nThe `GeneratorExit` class also derives from `BaseException` as it is not really an error and is not supposed to be caught by\nuser code.\n\nAs said in [Python's documentation](https://docs.python.org/3/library/exceptions.html#BaseException), user-defined exceptions are not\nsupposed to inherit directly from `BaseException`. They should instead inherit from `Exception` or one of its subclasses.\n\nThis rule raises an issue when a class derives from one of the following exception classes: `BaseException`,\n`KeyboardInterrupt`, `SystemExit` or `GeneratorExit`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PEP 352 – [Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) \n  -  Python Documentation - [BaseException class](https://docs.python.org/3/library/exceptions.html#BaseException) \n",
        "disable": false
      },
      {
        "real_name": "python:S3923",
        "display_name": "PythonS3923",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All branches in a conditional structure should not have exactly the same implementation",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving the same implementation in every branch of an `if` chain is an error. Either a copy-paste error was made and something different\nshould be executed, or there shouldn't be an `if` chain at all.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule does not apply to `if` chains without `else`-s.\n",
        "disable": false
      },
      {
        "real_name": "python:S5549",
        "display_name": "PythonS5549",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Function arguments should be passed only once",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a function is called, it accepts only one value per parameter. Python interpreters will raise a SyntaxError when they see something like\n`myfunction(a=1, a=2)`, but there are other cases which will only fail at runtime:\n\n  -  An argument is provided by value and position at the same time. \n  -  Some arguments are provided via unpacking and the same argument is provided twice. \n\nThis rule raises an issue when a function is called with multiple values for the same parameter.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S2711",
        "display_name": "PythonS2711",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"yield\" and \"return\" should not be used outside functions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`yield` and `return` only make sense in the context of functions. Using them outside a function raises a\n`SyntaxError`. To break out of a loop, use `break` instead.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S2712",
        "display_name": "PythonS2712",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"return\" and \"yield\" should not be used in the same function",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFunctions that use `yield` are known as \"generators\". Before Python 3.3, generators cannot `return` values. Similarly,\nfunctions that use `return` cannot use `yield`. Doing so will cause a `SyntaxError`.\n\nEither upgrade your version of Python to a version &gt;= 3.3, or don't use both return and yield in a function.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S5706",
        "display_name": "PythonS5706",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Special method \"__exit__\" should not re-raise the provided exception",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe special method <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\">`__exit__`</a> should only raise an\nexception when it fails. It should never raise the provided exception, it is the caller's responsibility.\n\nRaising this exception will make the stack trace difficult to understand.\n\nThe `__exit__` method can filter passed-in exceptions by simply returning True or False.\n\nThis rule raises an issue when:\n\n  -  an `__exit__` method has a bare `raise` outside of an `except` block. \n  -  an `__exit__` method raises the exception provided as parameter. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> Python documentation – <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\">The\n  `__exit__` special method</a> </li>\n  -  PEP 343 – [The \"with\" Statement](https://www.python.org/dev/peps/pep-0343/) \n",
        "disable": false
      },
      {
        "real_name": "python:S1226",
        "display_name": "PythonS1226",
        "severity": "info",
        "category": "correctness",
        "rule_title": "Function parameters initial values should not be ignored",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhile it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S5780",
        "display_name": "PythonS5780",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Expressions creating dictionaries should not have duplicate keys",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA dictionary cannot have two values with the same key. When a key is repeated in a dictionary literal, only the last occurence will remain. Thus\nduplicate keys should be either modified or removed.\n\nThis rule raises an issue when the same value is used multiple times as a key in a dictionary literal.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Dictionary displays](https://docs.python.org/3/reference/expressions.html#dictionary-displays) \n",
        "disable": false
      },
      {
        "real_name": "python:S5781",
        "display_name": "PythonS5781",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Expressions creating sets should not have duplicate values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA set cannot have two identical values. When a value is repeated in a set literal, only the last occurence will remain. Thus duplicate values\nshould be either modified or removed.\n\nThis rule raises an issue when the same value is used multiple times as a value in a set literal.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Set displays](https://docs.python.org/3/reference/expressions.html#set-displays) \n",
        "disable": false
      },
      {
        "real_name": "python:S3457",
        "display_name": "PythonS3457",
        "severity": "warning",
        "category": "convention",
        "rule_title": "String formatting should be used correctly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFormatting strings, either with the `%` operator or `str.format` method, requires a valid string and arguments matching this\nstring's replacement fields.\n\nThis also applies to loggers from the `logging` module. Internally they use `%-formatting`. The only difference is that they\nwill log an error instead of raising an exception when provided arguments are invalid.\n\nFormatted string literals, also called \"f-strings\", are generally simpler to use, and any syntax mistake will fail at compile time. However it is\neasy to forget curly braces and it won't raise any error.\n\nThis rule raises an issue when:\n\n  -  A string formatted with `%` will not return the expected string because some arguments are not used. \n  -  A string formatted with `str.format` will not return the expected string because some arguments are not used. \n  -  An \"f-string\" doesn't contain any replacement field, which probably means that some curly braces are missing. \n  -  Loggers will log an error because their message is not formatted properly. \n\nRule {rule:python:S2275} covers cases where formatting a string will raise an exception.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax) \n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n  -  [Python documentation - Loggers](https://docs.python.org/3/howto/logging.html#loggers) \n  <li> <a href=\"https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application\">Python\n  documentation - Using particular formatting styles throughout your application</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\">Python documentation - Formatted string\n  literals</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S1313",
        "display_name": "PythonS1313",
        "severity": "info",
        "category": "security",
        "rule_title": "Using hardcoded IP addresses is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2006-5901](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901) \n  -  [CVE-2005-3725](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725) \n\nToday's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\n\n  -  The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \n  -  It misleads to use the same address in every environment (dev, sys, qa, prod). \n\nLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.\n\n## Ask Yourself Whether\n\nThe disclosed IP address is sensitive, e.g.:\n\n  -  Can give information to an attacker about the network topology. \n  -  It's a personal (assigned to an identifiable person) IP address. \n\nThere is a risk if you answered yes to any of these questions.\n\n## Recommended Secure Coding Practices\n\nDon't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue is reported for the following cases because they are not considered sensitive:\n\n  -  Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \n  -  Broadcast address 255.255.255.255 \n  -  Non routable address 0.0.0.0 \n  <li> Strings of the form `2.5.&lt;number&gt;.&lt;number&gt;` as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n",
        "disable": false
      },
      {
        "real_name": "python:S4423",
        "display_name": "PythonS4423",
        "severity": "error",
        "category": "security",
        "rule_title": "Weak SSL/TLS protocols should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOlder versions of SSL/TLS protocol like \"SSLv3\" have been proven to be insecure.\n\nThis rule raises an issue when an SSL/TLS context is created with an insecure protocol version, i.e. when one of the following constants is\ndetected in the code:\n\n  -  `OpenSSL.SSL.SSLv3_METHOD` (Use instead `OpenSSL.SSL.TLSv1_2_METHOD`) \n  -  `ssl.PROTOCOL_SSLv3` (Use instead `ssl.PROTOCOL_TLSv1_2`) \n\nProtocol versions different from TLSv1.2 and TLSv1.3 are considered insecure.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S5754",
        "display_name": "PythonS5754",
        "severity": "error",
        "category": "convention",
        "rule_title": "\"SystemExit\" should be re-raised",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n[`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit)&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\">`sys.exit()`</a> is called. This exception is expected to propagate up until the\napplication stops. It is ok to catch it when a clean-up is necessary but it should be raised again immediately.\n\nA [bare `except:` statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement), i.e. an\n`except` without any exception class, is equivalent to <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\">`except BaseException`</a>. Both statements will catch every\nexception, including `SystemExit`. It is recommended to catch instead a specific exception. If it is not possible, the exception should be\nraised again.\n\nNote that it is also a good idea to reraise the <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\">`KeyboardInterrupt`</a> exception.\n\nThis rule raises an issue when a bare `except:`, an `except BaseException` or an `except SystemExit` don't reraise\nthe exception caught.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  PEP 352 - [Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#id5) \n  -  Python Documentation - [Built-in exceptions](https://docs.python.org/3/library/exceptions.html) \n  <li> Python Documentation - [The `try` statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement)\n  </li>\n  -  [MITRE, CWE-391](http://cwe.mitre.org/data/definitions/391.html) - Unchecked Error Condition \n",
        "disable": false
      },
      {
        "real_name": "python:S2245",
        "display_name": "PythonS2245",
        "severity": "error",
        "category": "security",
        "rule_title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\n\n  -  [CVE-2013-6386](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386) \n  -  [CVE-2006-3419](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419) \n  -  [CVE-2008-4102](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102) \n\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\n\n## Ask Yourself Whether\n\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  -  the function you use generates a value which can be predicted (pseudo-random). \n  -  the generated value is used multiple times. \n  -  an attacker can access the generated value. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> Only use random number generators which are <a\n  href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">recommended by\n  OWASP</a> or any other trusted organization. </li>\n  -  Use the generated random values only once. \n  -  You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \n\n## Sensitive Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [MITRE, CWE-338](https://cwe.mitre.org/data/definitions/338.html) - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  -  [MITRE, CWE-330](https://cwe.mitre.org/data/definitions/330.html) - Use of Insufficiently Random Values \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n  -  [CERT, MSC02-J.](https://wiki.sei.cmu.edu/confluence/x/oTdGBQ) - Generate strong random numbers \n  <li> [CERT, MSC30-C.](https://wiki.sei.cmu.edu/confluence/x/UNcxBQ) - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  -  [CERT, MSC50-CPP.](https://wiki.sei.cmu.edu/confluence/x/2ns-BQ) - Do not use std::rand() for generating pseudorandom numbers \n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S4426",
        "display_name": "PythonS4426",
        "severity": "error",
        "category": "security",
        "rule_title": "Cryptographic key generation should be based on strong parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen generating cryptographic keys (or key pairs), it is important to use strong parameters. Key length, for instance, should provide enough\nentropy against brute-force attacks. \n\n  -  For `RSA` and `DSA` algorithms key size should be at least 2048 bits long \n  -  For `ECC` (elliptic curve cryptography) algorithms key size should be at least 224 bits long \n  -  For `RSA` public key exponent should be at least 65537. \n\nThis rule raises an issue when a `RSA`, `DSA` or `ECC` key-pair generator is initialized using weak parameters.\n\n\nIt supports the following libraries:\n\n  -  [cryptography](https://github.com/pyca/cryptography) \n  -  [PyCrypto](https://github.com/dlitz/pycrypto) \n  -  [Cryptodome](https://github.com/Legrandin/pycryptodome) \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [ANSSI RGSv2](https://www.ssi.gouv.fr/uploads/2014/11/RGS_v-2-0_B1.pdf) - Référentiel Général de Sécurité version 2 \n  -  [NIST FIPS 186-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf) - Digital Signature Standard (DSS) \n  -  [MITRE, CWE-326](https://cwe.mitre.org/data/definitions/326.html) - Inadequate Encryption Strength \n",
        "disable": false
      },
      {
        "real_name": "python:S5756",
        "display_name": "PythonS5756",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Calls should not be made to non-callable values",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn order to be callable, a python class should implement the <a\nhref=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\">`__call__`</a> method.\n\nThis rule raises an issue when a non-callable object is called.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - __call__ method](https://docs.python.org/3/reference/datamodel.html#object.__call__) \n",
        "disable": false
      },
      {
        "real_name": "python:S4144",
        "display_name": "PythonS4144",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Functions and methods should not have identical implementations",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen two functions or methods have the same implementation, either it was a mistake - something else was intended - or the duplication was\nintentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are\nnot taken into account. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nNo issue will be raised on empty methods/functions and methods/functions with only one line of code.\n",
        "disable": false
      },
      {
        "real_name": "python:S134",
        "display_name": "PythonS134",
        "severity": "error",
        "category": "convention",
        "rule_title": "Control flow statements \"if\", \"for\", \"while\", \"try\" and \"with\" should not be nested too deeply",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nNested `if`, `for`, `while`, `try`, and `with` statements are key ingredients for making\nwhat's known as \"Spaghetti code\". Such code is hard to read, refactor and therefore maintain.\n\n## Noncompliant Code Example\n\nThe following code snippet illustrates this rule with the default threshold of 3.\n",
        "disable": false
      },
      {
        "real_name": "python:S5632",
        "display_name": "PythonS5632",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Raised Exceptions must derive from BaseException",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn Python 3, attempting to raise an object which does not derive from BaseException will raise a `TypeError`. In Python 2 it is possible\nto raise old-style classes but this shouldn't be done anymore in order to be compatible with Python 3.\n\nIf you are about to create a custom Exception class, note that custom exceptions should inherit from `Exception`, not\n`BaseException`. `Exception` allows people to catch all exceptions except the ones explicitly asking the interpreter to stop,\nsuch as `KeyboardInterrupt` and [`GeneratorExit`](https://docs.python.org/3/library/exceptions.html#GeneratorExit)\nwhich is not an error. See [PEP 352](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) for more information.\n\nThis rule raises an issue when an object which doesn't derive from BaseException is raised.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html) \n  -  [PEP 352 - Required Superclass for Exceptions](https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes) \n",
        "disable": false
      },
      {
        "real_name": "python:S3330",
        "display_name": "PythonS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\nFlask:\n\n## Compliant Solution\n\nFlask:\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "python:S1716",
        "display_name": "PythonS1716",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"break\" and \"continue\" should not be used outside a loop",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`break` and `continue` are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing `break` or `continue` outside of a loop are imported.\n\nTherefore, these statements should not be used outside of loops. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S4828",
        "display_name": "PythonS4828",
        "severity": "error",
        "category": "security",
        "rule_title": "Signalling processes is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nSignalling processes is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2009-0390](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390) \n  -  [CVE-2002-0839](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839) \n  -  [CVE-2008-1671](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671) \n\nSending signals without checking properly which process will receive it can cause a denial of service.\n\n## Ask Yourself Whether\n\n  <li> the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable\n  file. </li>\n  -  users who are asking for the signal to be sent might not have the permission to send those signals. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the\n  user doesn't own the process. </li>\n  -  Secure the source from which the process PID is read. \n  -  Run the process sending the signals with minimal permissions. \n\n## Sensitive Code Example\n\n## See\n\n  -  [MITRE, CWE-283](https://cwe.mitre.org/data/definitions/283.html) - Unverified Ownership \n",
        "disable": false
      },
      {
        "real_name": "python:FunctionComplexity",
        "display_name": "PythonFunctioncomplexity",
        "severity": "error",
        "category": "convention",
        "rule_title": "Cyclomatic Complexity of functions should not be too high",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\n",
        "disable": false
      },
      {
        "real_name": "python:LongIntegerWithLowercaseSuffixUsage",
        "display_name": "PythonLongintegerwithlowercasesuffixusage",
        "severity": "info",
        "category": "convention",
        "rule_title": "Long suffix \"L\" should be upper case",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S1707",
        "display_name": "PythonS1707",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.\n\nThis rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S125",
        "display_name": "PythonS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "python:S4143",
        "display_name": "PythonS4143",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection content should not be replaced unconditionally",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIt is highly suspicious when a value is saved in a collection for a given key or index and then unconditionally overwritten. Such replacements are\nlikely errors.\n\nThis rule raises an issue when the [`__setitem__`](https://docs.python.org/3/reference/datamodel.html#object.__setitem__)\nmethod of the same object is called multiple times with the same index, slice or key without any other action done between the calls.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "python:S1720",
        "display_name": "PythonS1720",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Docstrings should be defined",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.\n\nBy convention, docstrings are enclosed in three sets of double-quotes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3985",
        "display_name": "PythonS3985",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Unused private nested classes should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n\"Private\" nested classes that are never used inside the enclosing class are usually dead code: unnecessary, inoperative code that should be\nremoved. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from\nbeing introduced.\n\nPython has no real private classes. Every class is accessible. There are however two conventions indicating that a class is not meant to be\n\"public\":\n\n  <li> classes with a name starting with a single underscore (ex: `_MyClass`) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those classes inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" classes are defined inside another class, and have a name starting with at least two underscores and ending with at most one\n  underscore. These classes' names will be automatically mangled to avoid collision with subclasses' nested classes. For example\n  `__MyClass` will be renamed as `_classname__MyClass`, where `classname` is the enclosing class's name without its\n  leading underscore(s). Class-Private classes shouldn't be used outside of their enclosing class. </li>\n\nThis rule raises an issue when a private nested class (either with one or two leading underscores) is never used inside its parent class.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation – Private Variables](https://docs.python.org/3.8/tutorial/classes.html#private-variables) \n  -  [PEP 8 – Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance) \n",
        "disable": false
      },
      {
        "real_name": "python:S5886",
        "display_name": "PythonS5886",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Function return types should be consistent with their type hint",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers can use type hints to specify which type a function is expected to return. These annotations are not enforced at runtime and returning a\ndifferent type might not fail. It is however likely to be unintended and will lead to maintainability issues, if not bugs.\n\nThis rule raises an issue when a function or method returns a value that contradicts its type hint.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Support for type hints](https://docs.python.org/3/library/typing.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S4830",
        "display_name": "PythonS4830",
        "severity": "error",
        "category": "security",
        "rule_title": "Server certificates should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nValidation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. \n\nThe certificate chain validation includes these steps:\n\n  -  The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. \n  -  Each CA is allowed to issue certificates. \n  -  Each certificate in the chain is not expired. \n\nIt's not recommended to reinvent the wheel by implementing custom certificate chain validation.\n\nTLS libraries provide built-in certificate validation functions that should be used.\n\n## Noncompliant Code Example\n\n[psf/requests](https://github.com/psf/requests) library:\n\nPython [ssl standard](https://docs.python.org/3/library/ssl.html) library:\n\n[pyca/pyopenssl](https://github.com/pyca/pyopenssl) library:\n\n## Compliant Solution\n\n[psf/requests](https://github.com/psf/requests) library:\n\nPython [ssl standard](https://docs.python.org/3/library/ssl.html) library:\n\n[pyca/pyopenssl](https://github.com/pyca/pyopenssl) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-295](https://cwe.mitre.org/data/definitions/295.html) - Improper Certificate Validation \n",
        "disable": false
      },
      {
        "real_name": "python:S5644",
        "display_name": "PythonS5644",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Item operations should be done on objects supporting them",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nGetting, setting and deleting items using square brackets requires the accessed object to have special methods:\n\n  <li> Getting items such as `my_variable[key]` requires `my_variable` to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\">`__getitem__`</a> method, or the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\">`__class_getitem__`</a> method if\n  `my_variable` is a class. </li>\n  <li> Setting items such as `my_variable[key] = 42` requires `my_variable` to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\">`__setitem__`</a> method. </li>\n  <li> Deleting items such as `del my_variable[key]` requires `my_variable` to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\">`__delitem__`</a> method. </li>\n\nThis rule raises an issue when an item operation is performed on an object which doesn't have the corresponding method.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - __getitem__ method](https://docs.python.org/3/reference/datamodel.html#object.__getitem__) \n  -  [Python documentation - __setitem__ method](https://docs.python.org/3/reference/datamodel.html#object.__setitem__) \n  -  [Python documentation - __delitem__ method](https://docs.python.org/3/reference/datamodel.html#object.__delitem__) \n  -  [Python documentation - __class_getitem__ method](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__) \n",
        "disable": false
      },
      {
        "real_name": "python:S2257",
        "display_name": "PythonS2257",
        "severity": "error",
        "category": "security",
        "rule_title": "Using non-standard cryptographic algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like `Argon2PasswordHasher`, `BCryptPasswordHasher`, ... should be used instead.\n\nThis rule tracks creation of `BasePasswordHasher` subclasses for Django applications.\n\n## Recommended Secure Coding Practices\n\n  -  Use a standard algorithm instead of creating a custom one. \n\n## Sensitive Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [CWE-327](http://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S3862",
        "display_name": "PythonS3862",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Iterable unpacking, \"for-in\" loops and \"yield from\" should use an Iterable object",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nFor-in loops, [`yield from`](https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator) and\niterable unpacking only work with [iterable objects](https://docs.python.org/3/glossary.html#term-iterable). In order to be iterable, an\nobject should have either an `__iter__` method or a `__getitem__` method implementing the <a\nhref=\"https://docs.python.org/3/glossary.html#term-sequence\">Sequence</a> semantic.\n\nNote also that iterating over an [asynchronous iterable](https://docs.python.org/3/glossary.html#term-asynchronous-iterable), i.e. an\nobject having the `__aiter__` method, requires the use of <a\nhref=\"https://docs.python.org/3/reference/compound_stmts.html#the-async-for-statement\">`async for ... in`</a> instead of <code>for ...\nin</code>.\n\nThis rule raises an issue when a non iterable object is used in a `for-in` loop, in a `yield from` or when it is\nunpacked.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [PEP 234 - Iterators](https://www.python.org/dev/peps/pep-0234/#python-api-specification) \n  -  [Python documentation - Iterator Types](https://docs.python.org/3/library/stdtypes.html#iterator-types) \n",
        "disable": false
      },
      {
        "real_name": "python:S3984",
        "display_name": "PythonS3984",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Exceptions should not be created without being raised",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCreating a new `Exception` without actually raising it has no effect and is probably due to a mistake.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Raising Exceptions](https://docs.python.org/3/tutorial/errors.html#raising-exceptions) \n",
        "disable": false
      },
      {
        "real_name": "python:S1045",
        "display_name": "PythonS1045",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "All \"except\" blocks should be able to catch exceptions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExceptions handlers (`except:`) are evaluated in the order they are written. Once a match is found, the evaluation stops.\n\nIn some contexts an except block is dead code as it will never catch any exception:\n\n  <li> If there is a handler for a base class followed by a handler for class derived from that base class, the second handler will never trigger: The\n  handler for the base class will match the derived class, and will be the only executed handler. </li>\n  -  When multiple `except` statements try to catch the same exception class, only the first one will be executed. \n  <li> In python 3, `BaseException` is the parent of every exception class. When `BaseException` is caught and the same\n  try-except block has a bare `except:` statement, i.e. an `except` with no expression, the bare except will never catch\n  anything. </li>\n\nThis rule raises an issue when an `except` block catches every exception before a later `except` block could catch it.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> Python Documentation - [The `try` statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement)\n  </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S2772",
        "display_name": "PythonS2772",
        "severity": "info",
        "category": "convention",
        "rule_title": "\"pass\" should not be used needlessly",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe use of a `pass` statement where it's not required by the syntax is pure cruft and should be removed.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3981",
        "display_name": "PythonS3981",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Collection sizes and array length comparisons should make sense",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe length of a collection is always greater than or equal to zero. So testing that a length is greater than or equal to zero doesn't make sense,\nsince the result is always `true`. Similarly testing that it is less than zero will always return `false`. Perhaps the intent\nwas to check the non-emptiness of the collection instead. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S4433",
        "display_name": "PythonS4433",
        "severity": "error",
        "category": "security",
        "rule_title": "LDAP connections should be authenticated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.\n\nSimple authentication in LDAP can be used with three different mechanisms:\n\n  -  **Anonymous Authentication Mechanism** by performing a bind request with a username and password value of zero length. \n  -  **Unauthenticated Authentication Mechanism** by performing a bind request with a password value of zero length. \n  -  **Name/Password Authentication Mechanism** by performing a bind request with a password value of non-zero length. \n\nAnonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [CWE-521](https://cwe.mitre.org/data/definitions/521.html) - Weak Password Requirements \n  -  [ldapwiki.com](https://ldapwiki.com/wiki/Simple%20Authentication)- Simple Authentication \n",
        "disable": false
      },
      {
        "real_name": "python:S5247",
        "display_name": "PythonS5247",
        "severity": "warning",
        "category": "security",
        "rule_title": "Disabling auto-escaping in template engines is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo reduce the risk of cross-site scripting attacks, templating systems, such as `Twig`, `Django`, `Smarty`,\n`Groovy's template engine`, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).\n\nAuto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into [html entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity)) will not be relevant\nwhen variables are used in a [html attribute](https://en.wikipedia.org/wiki/HTML_attribute) because '`:`' character is not\nescaped and thus an attack as below is possible:\n\n## Ask Yourself Whether\n\n  <li> Templates are used to render web content and\n    <ul>\n      -  dynamic variables in templates come from untrusted locations or are user-controlled inputs \n      -  there is no local mechanism in place to sanitize or validate the inputs. \n    \nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nEnable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [MITRE, CWE-79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> [MITRE, CWE-80](https://cwe.mitre.org/data/definitions/80.html) - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> [MITRE, CWE-83](https://cwe.mitre.org/data/definitions/83.html) - Improper Neutralization of Script in Attributes in a Web Page\n  </li>\n  -  [MITRE, CWE-84](https://cwe.mitre.org/data/definitions/84.html) - Improper Neutralization of Encoded URI Schemes in a Web Page \n",
        "disable": false
      },
      {
        "real_name": "python:S5806",
        "display_name": "PythonS5806",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Builtins should not be shadowed by local variables",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nShadowing a builtin makes your code more difficult to read and maintain. It may also be a source of bugs as you can reference the builtin by\nmistake.\n\nIt is sometimes ok to shadow a builtin to improve the readability of a public API or to support multiple versions of a library. In these cases the\nvalue is higher than the maintainability cost. Just be careful when you do it.\n\nIt is not ok to shadow builtins with variables which are local to a function or method. These variables are not public and can be easily renamed,\nthus reducing the confusion and making the code less error-prone.\n\nThis rule raises an issue when the name of a local variable matches the name of a builtin.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Built-in Types](https://docs.python.org/3.8/library/stdtypes.html) \n  -  [Python documentation - Built-in Functions](https://docs.python.org/3/library/functions.html) \n",
        "disable": false
      },
      {
        "real_name": "python:S5807",
        "display_name": "PythonS5807",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Only defined names should be listed in \"__all__\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers may define a list named `__all__` in a module to limit the names imported from it by wildcard imports (<code>from mymodule\nimport *</code>). This list can only reference defined names, otherwise an `AttributeError` will be raised when the module is imported.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Python documentation - Importing * From a Package](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package) \n",
        "disable": false
      },
      {
        "real_name": "python:S1845",
        "display_name": "PythonS1845",
        "severity": "error",
        "category": "convention",
        "rule_title": "Methods and field names should not differ only by capitalization",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLooking at the set of methods and fields in a `class` and finding two that differ only by capitalization is confusing to users of the\nclass.\n\nThis situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S3626",
        "display_name": "PythonS3626",
        "severity": "info",
        "category": "convention",
        "rule_title": "Jump statements should not be redundant",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nJump statements, such as `return`, `break` and `continue` let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\n  -  No issue is raised if the jump statement is the only statement of a statement suite: \n\n  <li> No issue is raised for `return None` because this was certainly done on purpose to be explicit that a function is really returning\n  `None`. </li>\n",
        "disable": false
      },
      {
        "real_name": "python:S1721",
        "display_name": "PythonS1721",
        "severity": "info",
        "category": "convention",
        "rule_title": "Parentheses should not be used after certain keywords",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nParentheses are not required after the `assert`, `del`, `elif`, `except`, `for`,\n`if`, `in`, `not`, `raise`, `return`, `while`, and `yield` keywords, and\nusing them unnecessarily impairs readability. They should therefore be omitted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S1722",
        "display_name": "PythonS1722",
        "severity": "info",
        "category": "convention",
        "rule_title": "New-style classes should be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from `object` (if there is no better candidate) is\nrecommended.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "python:S5527",
        "display_name": "PythonS5527",
        "severity": "error",
        "category": "security",
        "rule_title": "Server hostnames should be verified during SSL/TLS connections",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate. \n\nThe certificate's hostname-specific data should match the server hostname.\n\nIt's not recommended to re-invent the wheel by implementing custom hostname verification.\n\nTLS/SSL libraries provide built-in hostname verification functions that should be used.\n\n## Noncompliant Code Example\n\nPython [ssl standard](https://docs.python.org/3/library/ssl.html) library:\n\n## Compliant Solution\n\nPython [ssl standard](https://docs.python.org/3/library/ssl.html) library:\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-297](https://cwe.mitre.org/data/definitions/297.html) - Improper Validation of Certificate with Host Mismatch \n",
        "disable": false
      },
      {
        "real_name": "python:S4790",
        "display_name": "PythonS4790",
        "severity": "error",
        "category": "security",
        "rule_title": "Using weak hashing algorithms is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCryptographic hash algorithms such as `MD2`, `MD4`, `MD5`, `MD6`, `HAVAL-128`,\n`HMAC-MD5`, `DSA` (which uses `SHA-1`), `RIPEMD`, `RIPEMD-128`, `RIPEMD-160`,\n`HMACRIPEMD160` and `SHA-1` are no longer considered secure, because it is possible to have `collisions` (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\n\n## Ask Yourself Whether\n\nThe hashed value is used in a security context like:\n\n  -  User-password storage. \n  -  Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). \n  -  To compute some message integrity. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nSafer alternatives, such as `SHA-256`, `SHA-512`, `SHA-3` are recommended, and for password hashing, it's even\nbetter to use algorithms that do not compute too \"quickly\", like `bcrypt`, `scrypt`, `argon2` or `pbkdf2`\nbecause it slows down `brute force attacks`.\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  -  [MITRE, CWE-327](https://cwe.mitre.org/data/definitions/327.html) - Use of a Broken or Risky Cryptographic Algorithm \n  <li> [MITRE, CWE-916](https://cwe.mitre.org/data/definitions/916.html) - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S5122",
        "display_name": "PythonS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\nDjango\n\nFlask\n\n## Compliant Solution\n\nDjango\n\nFlask\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S4792",
        "display_name": "PythonS4792",
        "severity": "error",
        "category": "security",
        "rule_title": "Configuring loggers is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0285](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285) \n  -  [CVE-2000-1127](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127) \n  -  [CVE-2017-15113](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113) \n  -  [CVE-2015-5742](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742) \n\nLogs are useful before, during and after a security incident.\n\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  -  In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \n\nLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\n\nThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\n\n## Ask Yourself Whether\n\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  -  the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  -  the logs are only stored locally instead of being backuped or replicated. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. \n  -  Production logs should be stored in a secure location which is only accessible to system administrators. \n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n\nRemember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\n\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  -  Monitor the logs for any suspicious activity. \n\n## Sensitive Code Example\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> [OWASP Top 10 2017 Category A10](https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring) -\n  Insufficient Logging &amp; Monitoring </li>\n  -  [MITRE, CWE-532](https://cwe.mitre.org/data/definitions/532.html) - Information Exposure Through Log Files \n  -  [MITRE, CWE-117](https://cwe.mitre.org/data/definitions/117.html) - Improper Output Neutralization for Logs \n  -  [MITRE, CWE-778](https://cwe.mitre.org/data/definitions/778.html) - Insufficient Logging \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S2092",
        "display_name": "PythonS2092",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is protected with the `secure` attribute set to **true** it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \n\n## Ask Yourself Whether\n\n  -  the cookie is for instance a **session-cookie** not designed to be sent over non-HTTPS communication. \n  <li> it's not sure that the website contains [mixed content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content) or not\n  (ie HTTPS everywhere or not) </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> It is recommended to use `HTTPs` everywhere so setting the `secure` flag to **true** should be the default behaviour\n  when creating cookies. </li>\n  -  Set the `secure` flag to **true** for session-cookies. \n\n## Sensitive Code Example\n\nFlask\n\n## Compliant Solution\n\nFlask\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  -  [MITRE, CWE-311](http://cwe.mitre.org/data/definitions/311) - Missing Encryption of Sensitive Data \n  -  [MITRE, CWE-315](http://cwe.mitre.org/data/definitions/315) - Cleartext Storage of Sensitive Information in a Cookie \n  -  [MITRE, CWE-614](http://cwe.mitre.org/data/definitions/614) - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "python:S930",
        "display_name": "PythonS930",
        "severity": "error",
        "category": "correctness",
        "rule_title": "The number and name of arguments passed to a function should match its parameters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCalling a function or a method with fewer or more arguments than expected will raise a `TypeError`. This is usually a bug and should be\nfixed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. \n  -  [MITRE, CWE-628](http://cwe.mitre.org/data/definitions/628.html) - Function Call with Incorrectly Specified Arguments \n  <li> [CERT, DCL07-C.](https://wiki.sei.cmu.edu/confluence/x/7NYxBQ) - Include the appropriate type information in function declarators\n  </li>\n  -  [CERT, EXP37-C.](https://wiki.sei.cmu.edu/confluence/x/49UxBQ) - Call functions with the correct number and type of arguments \n",
        "disable": false
      },
      {
        "real_name": "python:S139",
        "display_name": "PythonS139",
        "severity": "info",
        "category": "convention",
        "rule_title": "Comments should not be located at the end of lines of code",
        "rule_params": null,
        "custom": false,
        "languages": [
          "python"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "common-php:DuplicatedBlocks",
        "display_name": "CommonPhpDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-php:FailedUnitTests",
        "display_name": "CommonPhpFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-php:SkippedUnitTests",
        "display_name": "CommonPhpSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-php:InsufficientCommentDensity",
        "display_name": "CommonPhpInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-php:InsufficientLineCoverage",
        "display_name": "CommonPhpInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-php:InsufficientBranchCoverage",
        "display_name": "CommonPhpInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "php"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "xml:S1134",
        "display_name": "XmlS1134",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Track uses of \"FIXME\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`FIXME` tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "xml:S1135",
        "display_name": "XmlS1135",
        "severity": "info",
        "category": "convention",
        "rule_title": "Track uses of \"TODO\" tags",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`TODO` tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n\nSometimes the developer will not have the time or will simply forget to get back to that tag.\n\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.\n\n## Noncompliant Code Example\n\n## See\n\n  -  [MITRE, CWE-546](http://cwe.mitre.org/data/definitions/546.html) - Suspicious Comment \n",
        "disable": false
      },
      {
        "real_name": "xml:S2321",
        "display_name": "XmlS2321",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Newlines should follow each element",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nEach element should be on a line to itself.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "xml:S2068",
        "display_name": "XmlS2068",
        "severity": "error",
        "category": "security",
        "rule_title": "Hard-coded credentials are security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\n\nIn the past, it has led to the following vulnerabilities:\n\n  -  [CVE-2019-13466](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466) \n  -  [CVE-2018-15389](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389) \n\nCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. \n\nThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\n\nIt's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...\n\n## Ask Yourself Whether\n\n  -  Credentials allows access to a sensitive component like a database, a file storage, an API or a service. \n  -  Credentials are used in production environments. \n  -  Application re-distribution is required before updating the credentials. \n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  Store the credentials in a configuration file that is not pushed to the code repository. \n  -  Store the credentials in a database. \n  -  Use your cloud provider's service for managing secrets. \n  -  If the a password has been disclosed through the source code: change it. \n\n## Sensitive Code Example\n\n[Spring-social-twitter](https://docs.spring.io/spring-social-twitter/docs/1.1.0.RELEASE/reference/htmlsingle/) secrets can be stored\ninside a xml file:\n\n## Compliant Solution\n\nIn [spring social twitter](https://docs.spring.io/spring-social-twitter/docs/1.1.0.RELEASE/reference/htmlsingle/), retrieve secrets from\nenvironment variables:\n\n## See\n\n  -  [OWASP Top 10 2017 Category A2](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication) - Broken Authentication \n  -  [MITRE, CWE-798](https://cwe.mitre.org/data/definitions/798) - Use of Hard-coded Credentials \n  -  [MITRE, CWE-259](https://cwe.mitre.org/data/definitions/259) - Use of Hard-coded Password \n  -  [CERT, MSC03-J.](https://wiki.sei.cmu.edu/confluence/x/OjdGBQ) - Never hard code sensitive information \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  -  Derived from FindSecBugs rule [Hard Coded Password](https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD) \n",
        "disable": false
      },
      {
        "real_name": "xml:S3330",
        "display_name": "XmlS3330",
        "severity": "info",
        "category": "security",
        "rule_title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen a cookie is configured with the `HttpOnly` attribute set to **true**, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of `HttpOnly` is **false** and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the `HttpOnly` attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.\n\n## Ask Yourself Whether\n\n  -  the cookie is sensitive, used to authenticate the user, for instance a **session-cookie** \n  <li> the `HttpOnly` attribute offer an additional protection (not the case for an **XSRF-TOKEN cookie** / CSRF token for example)\n  </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  <li> By default the `HttpOnly` flag should be set to **true** for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [OWASP HttpOnly](https://www.owasp.org/index.php/HttpOnly) \n  <li> [OWASP Top 10 2017 Category A7](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)) - Cross-Site Scripting\n  (XSS) </li>\n  <li> [CWE-79](http://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  -  [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html) - Sensitive Cookie Without 'HttpOnly' Flag \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat1) - Insecure Interaction Between Components \n  -  Derived from FindSecBugs rule [HTTPONLY_COOKIE](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE) \n",
        "disable": false
      },
      {
        "real_name": "xml:S1120",
        "display_name": "XmlS1120",
        "severity": "info",
        "category": "convention",
        "rule_title": "Source code should be indented consistently",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. \n\nBy default this rule checks that each block of code is indented, although it does not check the size of the indent. Parameter \"indentSize\" allows\nthe expected indent size to be defined. Only the first line of a badly indented section is reported.\n",
        "disable": false
      },
      {
        "real_name": "xml:S1778",
        "display_name": "XmlS1778",
        "severity": "error",
        "category": "correctness",
        "rule_title": "XML files containing a prolog header should start with \"<?xml\" characters",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe prolog header is the following piece of code that some XML documents start with:\n\nWhen the prolog exists in an XML document, it should be at the beginning of the file to enable programs to determine the encoding of non-UTF-8,\nnon-UTF-16 files.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "xml:S2647",
        "display_name": "XmlS2647",
        "severity": "error",
        "category": "security",
        "rule_title": "Basic authentication should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nBasic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. \n\n## Noncompliant Code Example\n\n## Exceptions\n\nThe rule will not raise any issue if HTTPS is enabled, on any URL-pattern.\n\n## See\n\n  <li> [OWASP Top 10 2017 Category A3](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure) - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  -  [MITRE, CWE-522](https://cwe.mitre.org/data/definitions/522) - Insufficiently Protected Credentials \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "xml:S4507",
        "display_name": "XmlS4507",
        "severity": "info",
        "category": "security",
        "rule_title": "Delivering code in production with debug features activated is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIn the application manifest element of an android application, setting <code><a\nhref=\"https://developer.android.com/guide/topics/manifest/application-element#debug\">debuggable</a></code> property to `true` could\nintroduce a security risk.\n\nIt's more easy to perform reverse engineering and inject arbitrary code in the context of a debuggable application.\n\n## Ask Yourself Whether\n\n  -  the development of the app is completed and the `debuggable` property is set to **true** \n  <li> the app will be published on the Play Store or distributed in any other ways and the `debuggable` property is set to **true**\n  </li>\n\nYou are at risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nIt is not recommended to release debuggable application. Avoid hardcoding the debug mode in the manifest because the build tool will add the\nproperty automatically and assign the correct value depending on the build type.\n\n## Sensitive Code Example\n\nIn `AndroidManifest.xml` the android debuggable property is set to `true`:\n\n## Compliant Solution\n\nIn `AndroidManifest.xml` the android debuggable property is set to `false`:\n\n## See\n\n  <li> [OWASP Mobile Top 10 2016 Category M10](https://www.owasp.org/index.php/Mobile_Top_10_2016-M10-Extraneous_Functionality) -\n  Extraneous Functionality </li>\n  -  [CWE-215](https://cwe.mitre.org/data/definitions/215.html) - Information Exposure Through Debug Information \n  -  [developer.android.com](https://developer.android.com/studio/publish/preparing) - Prepare for release \n",
        "disable": false
      },
      {
        "real_name": "xml:S5604",
        "display_name": "XmlS5604",
        "severity": "warning",
        "category": "security",
        "rule_title": "Requesting dangerous Android permissions is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nPermissions that can have a large impact on user privacy, marked as <a\nhref=\"https://developer.android.com/reference/android/Manifest.permission\">dangerous or \"not for use by third-party applications\" by Android</a>,\nshould be requested only if they are really necessary to implement critical features of an application.\n\n## Ask Yourself Whether\n\n  <li> It is not sure that `dangerous` permissions requested by the application are <a\n  href=\"https://developer.android.com/training/permissions/usage-notes#avoid_requesting_unnecessary_permissions\">really necessary</a>. </li>\n  <li> The users are not [clearly informed](https://developer.android.com/training/permissions/usage-notes#be_transparent) why and when\n  dangerous permissions are requested by the application. </li>\n\nYou are at risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\nIt is recommended to carefully review all the permissions and to use `dangerous` ones only if they are really necessary.\n\n## Sensitive Code Example\n\nIn AndroidManifest.xml:\n\n## Compliant Solution\n\n## See\n\n  <li> [OWASP Mobile Top 10 2016 Category M1](https://www.owasp.org/index.php/Mobile_Top_10_2016-M1-Improper_Platform_Usage) - Improper\n  Platform Usage </li>\n  -  [CWE-250](https://cwe.mitre.org/data/definitions/250.html) - Execution with Unnecessary Privileges \n  -  [developer.android.com](https://developer.android.com/training/permissions/usage-notes) - App permissions best practices \n  <li> [Google Play](https://play.google.com/about/privacy-security-deception/permissions/) - Privacy, Security, and Deception -\n  Permissions </li>\n",
        "disable": false
      },
      {
        "real_name": "xml:S125",
        "display_name": "XmlS125",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Sections of code should not be commented out",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nProgrammers should not comment out code as it bloats programs and reduces readability.\n\nUnused code should be deleted and can be retrieved from source control history if required.\n",
        "disable": false
      },
      {
        "real_name": "xml:S103",
        "display_name": "XmlS103",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should not be too long",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n",
        "disable": false
      },
      {
        "real_name": "xml:S105",
        "display_name": "XmlS105",
        "severity": "info",
        "category": "convention",
        "rule_title": "Tabulation characters should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\n\nSo the use of the tabulation character must be banned.\n",
        "disable": false
      },
      {
        "real_name": "xml:S2260",
        "display_name": "XmlS2260",
        "severity": "warning",
        "category": "convention",
        "rule_title": "XML parser failure",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nWhen the XML parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\n",
        "disable": false
      },
      {
        "real_name": "xml:S5122",
        "display_name": "XmlS5122",
        "severity": "info",
        "category": "security",
        "rule_title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\n\n  -  [CVE-2018-0269](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269) \n  -  [CVE-2017-14460](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460) \n\n[Same origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\n\n## Ask Yourself Whether\n\n  -  You don't trust the origin specified, example: `Access-Control-Allow-Origin: untrustedwebsite.com`. \n  -  Access control policy is entirely disabled: `Access-Control-Allow-Origin: *` \n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">`origin`</a> header. </li>\n\nThere is a risk if you answered yes to any of those questions.\n\n## Recommended Secure Coding Practices\n\n  -  The `Access-Control-Allow-Origin` header should be set only for a trusted origin and for specific resources. \n  <li> Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the `Origin` header content without any checks). </li>\n\n## Sensitive Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) - CORS \n  -  [developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) - Same origin policy \n  <li> [OWASP Top 10 2017 Category A6](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration) - Security\n  Misconfiguration </li>\n  <li> [OWASP HTML5 Security Cheat Sheet](https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing) - Cross\n  Origin Resource Sharing </li>\n  -  [MITRE, CWE-346](https://cwe.mitre.org/data/definitions/346.html) - Origin Validation Error \n  -  [MITRE, CWE-942](https://cwe.mitre.org/data/definitions/942.html) - Overly Permissive Cross-domain Whitelist \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n",
        "disable": false
      },
      {
        "real_name": "xml:S5594",
        "display_name": "XmlS5594",
        "severity": "warning",
        "category": "security",
        "rule_title": "Restrict access to exported components with appropriate permissions",
        "rule_params": null,
        "custom": false,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf an Android component is exported and no permissions are defined then other mobile apps can interact with it and perform potential unauthorized\nactions.\n\nFor instance, an exported content provider can expose sensitive data, if no permissions are defined, to other mobile apps.\n\nIt's highly recommended to implement restrictive permissions on exposed components.\n\n## Noncompliant Code Example\n\nIn an `AndroidManifest.xml` file, an exported component is vulnerable when read and write permissions are not defined:\n\nWith an `&lt;intent-filter&gt;` the component's attibute `android:exported` default value is \"true\":\n\n## Compliant Solution\n\nIn an `AndroidManifest.xml` file, if it is not needed to export a component to other apps then set the `exported` property to\n`false`:\n\nOtherwise, implement permissions (`protectionLevel` <a\nhref=\"https://developer.android.com/guide/topics/manifest/permission-element#plevel\">value</a> must be defined depending on the sensitivity of the\ncomponent):\n\n## See\n\n  <li> [OWASP Mobile Top 10 2016 Category M2](https://www.owasp.org/index.php/Mobile_Top_10_2016-M2-Insecure_Data_Storage) - Insecure Data\n  Storage </li>\n  -  [MITRE, CWE-926](https://cwe.mitre.org/data/definitions/926.html) - Improper Export of Android Application Components \n  -  [SANS Top 25](https://www.sans.org/top25-software-errors/#cat3) - Porous Defenses \n  <li> [developer.android.com](https://developer.android.com/guide/topics/providers/content-provider-creating#Permissions) - Implementing\n  content provider permissions </li>\n",
        "disable": false
      },
      {
        "real_name": "common-kotlin:FailedUnitTests",
        "display_name": "CommonKotlinFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-kotlin:DuplicatedBlocks",
        "display_name": "CommonKotlinDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-kotlin:SkippedUnitTests",
        "display_name": "CommonKotlinSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-kotlin:InsufficientCommentDensity",
        "display_name": "CommonKotlinInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-kotlin:InsufficientLineCoverage",
        "display_name": "CommonKotlinInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-kotlin:InsufficientBranchCoverage",
        "display_name": "CommonKotlinInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-js:FailedUnitTests",
        "display_name": "CommonJsFailedunittests",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Failed unit tests should be fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
        "disable": false
      },
      {
        "real_name": "common-js:SkippedUnitTests",
        "display_name": "CommonJsSkippedunittests",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Skipped unit tests should be either removed or fixed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
        "disable": false
      },
      {
        "real_name": "common-js:DuplicatedBlocks",
        "display_name": "CommonJsDuplicatedblocks",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should not have any duplicated blocks",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
        "disable": false
      },
      {
        "real_name": "common-js:InsufficientCommentDensity",
        "display_name": "CommonJsInsufficientcommentdensity",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Source files should have a sufficient density of comment lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
        "disable": false
      },
      {
        "real_name": "common-js:InsufficientLineCoverage",
        "display_name": "CommonJsInsufficientlinecoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Lines should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "common-js:InsufficientBranchCoverage",
        "display_name": "CommonJsInsufficientbranchcoverage",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Branches should have sufficient coverage by tests",
        "rule_params": null,
        "custom": false,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
        "disable": false
      },
      {
        "real_name": "css:S4666",
        "display_name": "CssS4666",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Selectors should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nDuplication of selectors might indicate a copy-paste mistake. The rule detects the following kinds of duplications:\n\n  -  within a list of selectors in a single rule set \n  -  for duplicated selectors in different rule sets within a single stylesheet. \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4667",
        "display_name": "CssS4667",
        "severity": "warning",
        "category": "convention",
        "rule_title": "CSS files should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThis rule raises an issue when a CSS file is empty (ie: containing only spaces).\n",
        "disable": false
      },
      {
        "real_name": "css:S4668",
        "display_name": "CssS4668",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Single line comment syntax should not be used",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications say comments should be defined using `/* ... */`. The use of `//` is not supported on all browsers and\ncan lead to unexpected results.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## Exceptions\n\nThis rule ignores single line comments in `less` and `scss` files.\n",
        "disable": false
      },
      {
        "real_name": "css:S4662",
        "display_name": "CssS4662",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"at-rules\" should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the valid `at-rules`. Only the official and browser-specific `at-rules` should be used to get\nthe expected impact in the final rendering.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4661",
        "display_name": "CssS4661",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Media features should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the valid media features. Only the official and browser-specific media features should be used to get the expected\nimpact in the final rendering.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CSS Specification](https://www.w3schools.com/cssref/css3_pr_mediaquery.asp) - `@media` rule \n",
        "disable": false
      },
      {
        "real_name": "css:S4664",
        "display_name": "CssS4664",
        "severity": "error",
        "category": "convention",
        "rule_title": "Selectors of lower specificity should come before overriding selectors of higher specificity",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nOrder of instructions in CSS is important: instructions with equal specificity that occur later in the file take the priority. But when a selector\nwith a higher specificity (e.g. `p a { color: green;}`) comes before the selector it overrides (e.g.: `a { color: green;}`), the\npriority is given to the first one. Even if it works properly, this is harder to anticipate the behaviour of the stylesheet while reading as it goes\nagainst the principle that the last instruction takes the priority.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4648",
        "display_name": "CssS4648",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Duplicated font names should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving duplicated font names doesn't help to read the font declaration and may be an indicator the author of the line was not sure how to configure\nit. This rule raises an issue when `font` or `font-family` properties contain a duplicated font name. This rule ignores\n`$sass`, `@less`, and `var(--custom-property)` variable syntaxes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4663",
        "display_name": "CssS4663",
        "severity": "info",
        "category": "convention",
        "rule_title": "Multi-line comments should not be empty",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be\nremoved.\n\n## Noncompliant Code Example\n",
        "disable": false
      },
      {
        "real_name": "css:S4647",
        "display_name": "CssS4647",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Color definitions should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAn invalid color definition will by default be interpreted as black, which is likely to have unintended impacts on the expected look and feel of\nthe website.\n\nThis rule raises an issue when a color definition (`color`, `background-color`) is not valid. The color definition is\nconsidered valid when it is made of hexadecimal characters:\n\n  -  longhand: 6 or 8 characters (when alpha is defined) \n  -  shorthand variant: 3 or 4 characters (when alpha is defined) \n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [Mozilla Web Technology for Developers](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) - CSS Color \n",
        "disable": false
      },
      {
        "real_name": "css:S1116",
        "display_name": "CssS1116",
        "severity": "info",
        "category": "convention",
        "rule_title": "Extra semicolons should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nExtra semicolons are usually introduced by mistake, for example because:\n\n  -  It was meant to be replaced by one more property declaration, but this was forgotten. \n  -  There was a typo which lead the semicolon to be doubled, i.e. `;;`. \n\n## See\n\n  <li> [CERT, MSC12-C.](https://wiki.sei.cmu.edu/confluence/x/5dUxBQ) - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> [CERT, MSC51-J.](https://wiki.sei.cmu.edu/confluence/x/IDZGBQ) - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> [CERT, EXP15-C.](https://wiki.sei.cmu.edu/confluence/x/WtYxBQ) - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n",
        "disable": false
      },
      {
        "real_name": "css:S4649",
        "display_name": "CssS4649",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Font declarations should contain at least one generic font family",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nIf none of the font names defined in a `font` or `font-family` declaration are available on the browser of the user, the\nbrowser will display the text using its default font. It's recommended to always define a generic font family for each declaration of\n`font` or `font-family` to get a less degraded situation than relying on the default browser font. All browsers should implement\na list of generic font matching these families: `Serif`, `Sans-serif`, `cursive`, `fantasy`,\n`Monospace`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CSS Specification](https://www.w3.org/TR/CSS2/fonts.html#generic-font-families) - Generic font families \n",
        "disable": false
      },
      {
        "real_name": "css:S4660",
        "display_name": "CssS4660",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Pseudo-element selectors should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the valid pseudo-element selectors. Only the official and browser-specific pseudo-element selectors should be used to\nget the expected impact in the final rendering.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4655",
        "display_name": "CssS4655",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "\"!important\" should not be used on \"keyframes\"",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`!important` within keyframes declarations is completely ignored in some browsers and therefore it should not be used to be consistent\namong all browsers.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Mozilla Web Technology for Developers](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#!important_in_a_keyframe) -\n  `!important` in a keyframe </li>\n",
        "disable": false
      },
      {
        "real_name": "css:S4654",
        "display_name": "CssS4654",
        "severity": "error",
        "category": "correctness",
        "rule_title": "CSS properties should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the valid CSS properties. Only the official and browser-specific properties should be used to get the expected impact\nin the final rendering.\n\nThis rule ignores:\n\n  -  `$sass`, `@less`, and `var(--custom-property)` variable syntaxes. \n  -  vendor-prefixed properties (e.g., `-moz-align-self`, `-webkit-align-self`). \n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4657",
        "display_name": "CssS4657",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Shorthand properties that override related longhand properties should be avoided",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nA shorthand property defined after a longhand property will completely override the value defined in the longhand property making the longhand one\nuseless. The code should be refactored to consider the longhand property or to remove it completely.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Mozilla Web Technology for Developers](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) - Shorthand\n  properties </li>\n",
        "disable": false
      },
      {
        "real_name": "css:S4656",
        "display_name": "CssS4656",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Properties should not be duplicated",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nCSS allows duplicate property names but only the last instance of a duplicated name determines the actual value that will be used for it.\nTherefore, changing values of other occurrences of a duplicated name will have no effect and may cause misunderstandings and bugs.\n\nThis rule ignores `$sass`, `@less`, and `var(--custom-property)` variable syntaxes.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4650",
        "display_name": "CssS4650",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"calc\" operands should be correctly spaced",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`calc` is a CSS3 function that provides the possibility to do simple math in CSS (add, subtract, divide, multiply). Without spaces\naround operators, `calc` will have no effect.\n\nMore precisely, before an operator, there must be a single whitespace or a newline plus indentation. After an operator, there must be a single\nwhitespace or a newline.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4651",
        "display_name": "CssS4651",
        "severity": "error",
        "category": "correctness",
        "rule_title": "\"linear-gradient\" directions should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\n`linear-gradient` was standardized with CSS3. Before that, it was possible to use different non-standard values to define the gradient's\ndirection. Because these values are not standard, they are not supported in all browsers and therefore they should no longer be used in order to get\nthe expected gradient in the latest browser versions that support CSS3.\n\nThis rule raises an issue when the first parameter of a `linear-gradient` is not a valid `&lt;side-or-corner&gt;` or\n`angle`.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  <li> [Mozilla Web Technology for Developers](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient) -\n  `linear-gradient` </li>\n",
        "disable": false
      },
      {
        "real_name": "css:S4653",
        "display_name": "CssS4653",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Units should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the `units` that can be used with lengths. A unit that is not part of the list of supported ones is likely\nto be a typo and will be seen as a UI bug by the user.\n\nThis rule raises an issue each time a unit is not officially supported.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CSS Specification](https://www.w3.org/TR/css3-values/#lengths) - Distance units \n",
        "disable": false
      },
      {
        "real_name": "css:S4652",
        "display_name": "CssS4652",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Strings should not contain new lines",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nAccording to the W3C specifications:\n\n> \n  <p>A string cannot directly contain a newline. To include a newline in a string, use an escape representing the line feed character in ISO-10646\n  (U+000A), such as \"\\A\" or \"\\00000a\".</p>\n  [...]\n  <p>It is possible to break strings over several lines, for aesthetic or other reasons, but in such a case the newline itself has to be escaped with\n  a backslash (\\).</p>\n\n\n## Noncompliant Code Example\n\n## Compliant Solution\n\n## See\n\n  -  [CSS Specification](https://www.w3.org/TR/CSS2/syndata.html#strings) - Strings \n",
        "disable": false
      },
      {
        "real_name": "css:S4658",
        "display_name": "CssS4658",
        "severity": "warning",
        "category": "convention",
        "rule_title": "Empty blocks should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nLeftover empty blocks are usually introduced by mistake. They are useless and prevent readability of the code. They should be removed or completed\nwith real code.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4659",
        "display_name": "CssS4659",
        "severity": "warning",
        "category": "correctness",
        "rule_title": "Pseudo-class selectors should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nThe W3C specifications define the valid pseudo-class selectors. Only the official and browser-specific pseudo-class selectors should be used to get\nthe expected impact in the final rendering.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S1128",
        "display_name": "CssS1128",
        "severity": "info",
        "category": "convention",
        "rule_title": "Duplicate imports should be removed",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHaving the import of the same file twice, makes one of them useless. Leaving them in reduces the code's readability, since their presence can be\nconfusing.\n\n## Noncompliant Code Example\n\n## Exceptions\n\nThis rule ignores `@import` in `less` files.\n",
        "disable": false
      },
      {
        "real_name": "css:S5362",
        "display_name": "CssS5362",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Expressions within \"calc\" should be valid",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nTo perform calculations when specifying a CSS property `calc()` function can be used. This function takes single expression as\nparameter. When writing this expression some rules must be respected:\n\n  -  no empty `calc()` \n  -  there should be an operator between the arguments, spacing should be respected \n  -  there should not be any division by zero \n  -  the resolved type should be valid for where the expression is placed \n\nOtherwise `calc()` function will be invalid and the entire rule using it will be ignored.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      },
      {
        "real_name": "css:S4670",
        "display_name": "CssS4670",
        "severity": "error",
        "category": "correctness",
        "rule_title": "Selectors should be known",
        "rule_params": null,
        "custom": false,
        "languages": [
          "css"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "description": "\nHTML, SVG, and MathML define the selectors which can be used in a CSS. A selector that is not part of them is likely to be a typo or a\nmisunderstanding of the CSS syntax.\n\n## Noncompliant Code Example\n\n## Compliant Solution\n",
        "disable": false
      }
    ]
  }
]